(1, (0x2393c022191e51dc, [Int64[], [1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 2, 26, 27, 28, 29, 30, 31, 32, 0, 0, 34, 0, 35], [36, 37], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 7], [37], Int64[], [-1], [48, 49, 50, 51, 5, 0, 52], Int64[], [-1], [53, 54, 55, 5, 0, 56], [57, 58, 59, 60, 0], [61, 62, 63, 64, 58, 65, 60, 0], Int64[], [-1], Int64[], [66, 67, 19, 68, 69, 38, 70], [34, 0, 71], [2, 72, 0, 73, 72, 0, 73, 72, 0, 73], [999999999], Int64[], [-1], [74, 75, 43, 76], [77], Int64[], [-1], [78, 79, 80, 81, 43, 70, 82], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], [85, 86, 87, 88, 89, 90, 91], [92, 93, 44, 11, 94, 95, 96, 97], Int64[], [-1], Int64[], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1], [110, 60, 0], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], [110, 60, 0], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [117, 13, 118, 60, 0, 0, 0], Int64[], [-1], [2], Int64[], [-1], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], Int64[], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [154, 155, 14, 156, 157], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [9, 190, 191, 118, 173, 174], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], Int64[], [223, 224], [225, 112, 0, 226, 227], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], Int64[], [232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], [260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1], [264, 14, 169, 170], Int64[], [-1], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1], [117, 13, 118, 60, 0, 0, 0], Int64[], [-1], [269, 270, 38, 271, 272, 13, 14, 273, 274], [275, 276, 277, 278, 279, 89, 90, 141], [280, 281, 282, 283, 13, 284, 0, 285, 0, 286], Int64[], [-1], Int64[], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [287], [2], Int64[], [-1], Int64[], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], [130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1], [0, 294, 295, 296, 297, 298], Int64[], [-1], Int64[], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [299, 159], Int64[], [-1], [160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [302, 195, 0, 303, 194, 304, 196], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 307, 308, 0, 306], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 309, 0, 306], Int64[], [-1], [310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 245, 169, 312, 314, 0, 306], Int64[], [-1], [316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1], [324, 325, 112, 0, 130, 325], Int64[], [-1], [326, 327, 117], [328, 270, 296, 329], Int64[], [-1], [168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [253, 13, 278, 339, 255], Int64[], [-1], [197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1], [14, 241, 242, 11, 0, 345], Int64[], [-1], [346, 347, 75, 319, 77], Int64[], [-1], [2], Int64[], [-1], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], Int64[], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [154, 155, 14, 156, 157], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [9, 190, 191, 118, 173, 174], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], Int64[], [223, 224], [225, 112, 0, 226, 227], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], Int64[], [232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], [260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1], [264, 14, 169, 170], Int64[], [-1], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1], [117, 13, 118, 60, 0, 0, 0], Int64[], [-1], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [287], [2], Int64[], [-1], Int64[], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], [130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1], [0, 294, 295, 296, 297, 298], Int64[], [-1], Int64[], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [299, 159], Int64[], [-1], [160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [302, 195, 0, 303, 194, 304, 196], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 307, 308, 0, 306], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 309, 0, 306], Int64[], [-1], [310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 245, 169, 312, 314, 0, 306], Int64[], [-1], [316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1], [324, 325, 112, 0, 130, 325], Int64[], [-1], [326, 327, 117], [328, 270, 296, 329], Int64[], [-1], [168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [253, 13, 278, 339, 255], Int64[], [-1], [197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1], [14, 241, 242, 11, 0, 345], Int64[], [-1], [346, 347, 75, 319, 77], Int64[], [-1], [2], Int64[], [-1], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], Int64[], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [154, 155, 14, 156, 157], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [9, 190, 191, 118, 173, 174], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], Int64[], [223, 224], [225, 112, 0, 226, 227], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], Int64[], [232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], [260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1], [264, 14, 169, 170], Int64[], [-1], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1], [117, 13, 118, 60, 0, 0, 0], Int64[], [-1], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [287], [2], Int64[], [-1], Int64[], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], [130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1], [0, 294, 295, 296, 297, 298], Int64[], [-1], Int64[], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [299, 159], Int64[], [-1], [160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [302, 195, 0, 303, 194, 304, 196], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 307, 308, 0, 306], Int64[], [-1], [305, 82, 0, 306], Int64[], [-1], [305, 309, 0, 306], Int64[], [-1], [310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1], [310, 245, 169, 312, 314, 0, 306], Int64[], [-1], [316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1], [324, 325, 112, 0, 130, 325], Int64[], [-1], [326, 327, 117], [328, 270, 296, 329], Int64[], [-1], [168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1], [253, 13, 278, 339, 255], Int64[], [-1], [197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1], [14, 241, 242, 11, 0, 345], Int64[], [-1], [346, 347, 75, 319, 77], Int64[], [-1], [2], Int64[], [-1], [119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1], Int64[], [142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1], [144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], Int64[], [154, 155, 14, 156, 157], Int64[], [-1], [158, 159], Int64[], [-1], [160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1], [168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1], [175, 176, 177], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [9, 190, 191, 118, 173, 174], Int64[], [-1], [178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1], [63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1], [128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1], [205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1], Int64[], [223, 224], [225, 112, 0, 226, 227], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0], [34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], [228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1], [115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1], Int64[], [232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1], Int64[], [228, 116, 0, 115, 116, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], Int64[], [228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1], [239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1], [256, 257, 258, 259], Int64[], [-1], [260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1], [264, 14, 169, 170], Int64[], [-1], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1], [265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [350, 351, 348], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [350, 351, 348], Int64[], [-1], [350, 351, 348], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [352, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [48, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [235, 236, 237, 236, 238], Int64[], [-1], [355], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [356, 357], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [235, 236, 237, 236, 238, 34, 0, 349], [358, 348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [358, 348, 236, 237, 236, 238, 34, 0, 349], [348, 236, 237, 236, 238, 34, 0, 349], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], Int64[], [352, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1], Int64[], [235, 236, 237, 236, 238], Int64[], [-1], Int64[], [9, 359, 360, 361, 362, 8, 6], Int64[], [-1], [363], [364, 365], [363], Int64[], [-1], [-1]]))
|--
|--(1, (0x7e00ca7bda37f4db, [[1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1]]))
|--|--     Program  __CHEM__   __VERSIONa__  starts on  __DATEa__  at   __HHMMSS__  
|--|--
|--(1, (0x082360392d1449b3, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 2, 26, 27, 28, 29, 30, 31, 32, 0, 0, 34, 0, 35], [36, 37], [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 7], [37], Int64[], [-1]]))
|--|--     This program is part of the open-source Quantum ESPRESSO suite
|--|--     for quantum simulation of materials; please cite
|--|--         " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
               " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--|--          URL  __URL__  
|--|--     in publications or presentations arising from this work. More details at
|--|--      __URL__ 
|--|--
|--(1, (0x709c0ba2a601116e, [[48, 49, 50, 51, 5, 0, 52], Int64[], [-1]]))
|--|--     Parallel version (MPI), running on    £ processors
|--|--
|--(1, (0xf65cad986d0ed351, [[53, 54, 55, 5, 0, 56], [57, 58, 59, 60, 0], [61, 62, 63, 64, 58, 65, 60, 0], Int64[], [-1]]))
|--|--     MPI processes distributed on     £ nodes
|--|--     K-points division:     npool     =       £
|--|--     R & G space division:  proc/nbgrp/npool/nimage =       £
|--|--
|--
|--(1, (0xab8803236026b9eb, [[66, 67, 19, 68, 69, 38, 70], [34, 0, 71], [2, 72, 0, 73, 72, 0, 73, 72, 0, 73], [999999999], Int64[], [-1]]))
|--|--     Dynamical matrices for q-points given in input
|--|--     (   £ q-points):
|--|--        __CHEM__          xq( £ )         xq( £ )         xq( £ ) 
|--|--       £   £   £   £
             £   £   £   £
             £   £   £   £
             £   £   £   £
|--|--
|--(1, (0x70543936c4751c45, [[74, 75, 43, 76], [77], Int64[], [-1]]))
|--|--     Reading data from directory:
|--|--      __FULLPATH__ 
|--|--
|--(1, (0x6a40fe67be9429dc, [[78, 79, 80, 81, 43, 70, 82], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], [85, 86, 87, 88, 89, 90, 91], [92, 93, 44, 11, 94, 95, 96, 97], Int64[], [-1]]))
|--|--     IMPORTANT: XC functional enforced from input :
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--     Any further DFT definition will be discarded
|--|--     Please, verify this is what you really want
|--|--
|--
|--(1, (0x8be4217ba17d3689, [[98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--(1, (0x7ff6fbebdfc4f079, [[110, 60, 0], [111, 112, 113, 114], Int64[], [-1]]))
|--|--  autoval = £
|--|--     Irreps are as follows:
|--|--
|--(47, (0x5f22e68f1daf8d78, [[115, 116, 0], [34, 0, 0, 73], [110, 60, 0], [111, 112, 113, 114], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--  autoval = £
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #  £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--
|--(1, (0x215e9b06bfc52a18, [[117, 13, 118, 60, 0, 0, 0], Int64[], [-1]]))
|--|--     Calculation of q =    £   £   £
|--|--
|--(1, (0x7a56a067ca2bd79a, [[2], Int64[], [-1]]))
|--|--      __CHEM__                                                                        
|--|--
|--(1, (0x43a524b1801acc01, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     kinetic-energy cut-off    =     £   __Ry__ 
|--|--     charge density cut-off    =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     beta                      =       £
|--|--     number of iterations used =            £
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
           celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x8c7dd3cd938f32f7, [[154, 155, 14, 156, 157], Int64[], [-1]]))
|--|--     Atoms inside the unit cell: 
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--     Cartesian axes
|--|--
|--(1, (0xf96a48aa85f1fa8f, [[160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.  atom      mass           positions (alat units)
|--|--        £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--|--
|--(1, (0xb64886d7c4b2d224, [[168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     Computing dynamical matrix for 
|--|--                    q = (   £   £   £ )
|--|--
|--(1, (0x177a961693227104, [[0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1]]))
|--|--     £  __ABSPATH__ . (with q -> -q+G )
|--|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(7, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(20, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(16, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £         £      )
|--|--|--                  (     £          £          £      )
                           (    £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £ £ )
|--|--|--                  (  £  £  £ )
                           ( £  £  £ )
|--|--|--
|--|--
|--(1, (0x146e9d6d32084304, [[9, 190, 191, 118, 173, 174], Int64[], [-1]]))
|--|--     This transformation sends q -> -q+G
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym = £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x981e739164af2da5, [[63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1]]))
|--|--     G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--
|--(1, (0x3372a4ddfe14895a, [[223, 224], [225, 112, 0, 226, 227], Int64[], [-1]]))
|--|--     Atomic displacements:
|--|--     There are   £ irreducible representations
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #   £              mode #   £              mode #   £
|--|--     (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #   £              mode #   £              mode #   £
|--|--     (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (   £   £ ) (  £  £ ) 
           (   £  £ ) (   £   £ ) (   £  £ ) 
           (   £  £ ) (   £   £ ) (   £  £ ) 
           (   £  £ ) (  £  £ ) (   £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £  £ ) 
           (  £  £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #   £              mode #   £              mode #   £
|--|--     (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #  £              mode #  £              mode #  £
|--|--     (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (   £   £ ) 
           (   £  £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
|--|--
|--
   
|--(1, (0x08232853d1517908, [[232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--     Alpha used in Ewald sum =   £
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL
|--|--
|--
   
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £  £
|--|--
|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :     £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :     £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :     £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :     £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :     £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0xb988c79362ea7d79, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £  £
|--|--
|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0xb988c79362ea7d79, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £  £
|--|--
|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0xb988c79362ea7d79, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #  £ £ £
|--|--
|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0x46f97b9b9296fef0, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--|--
|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--
|--(1, (0xb988c79362ea7d79, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x1c60a095973d0a5f, [[240, 116, 0, 82, 241, 242, 243, 34, 134, 73, 60, 0, 0], Int64[], [-1]]))
|--|--|--     Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
              Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--|--
|--|--(1, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--(1, (0x57460513c7934b5e, [[260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1]]))
|--|--     Number of q in the star =    £
|--|--     List of q in the star:
|--|--          £   £   £   £
|--|--
|--(1, (0x42e3a802c71d8478, [[264, 14, 169, 170], Int64[], [-1]]))
|--|--     Diagonalizing the dynamical matrix
|--|--
|--(1, (0x5cab923051261510, [[118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     q = (    £   £   £ ) 
|--|--
|--(1, (0x49d96c09ae051958, [[265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1]]))
|--|-- **************************************************************************
|--|--     freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
|--|-- **************************************************************************
|--|--
|--(1, (0x215e9b06bfc52a18, [[117, 13, 118, 60, 0, 0, 0], Int64[], [-1]]))
|--|--     Calculation of q =    £   £   £
|--|--
|--(1, (0x6ffce8712cbadf61, [[269, 270, 38, 271, 272, 13, 14, 273, 274], [275, 276, 277, 278, 279, 89, 90, 141], [280, 281, 282, 283, 13, 284, 0, 285, 0, 286], Int64[], [-1]]))
|--|--     Subspace diagonalization in iterative solution of the eigenvalue problem:
|--|--     one sub-group per band group will be used
|--|--     scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--|--
|--
|--(1, (0x8be4217ba17d3689, [[98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x5820bc8260bbe7f3, [[287], [2], Int64[], [-1]]))
|--|--     Title: 
|--|--      __CHEM__                                                                        
|--|--
|--
|--(1, (0xaa0ebfb37906f3ca, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--(1, (0x2f82824bfcb4eefb, [[130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__              £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0xd16bdc3c32024f33, [[0, 294, 295, 296, 297, 298], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(3, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(4, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(4, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £         £      )
                           (     £         £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £ £ )
                           (  £ £  £ )
|--|--|--
|--|--
|--(12, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__      
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(8, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £         £          £      )
|--|--|--                  (    £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £ £  £ )
|--|--|--                  ( £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(4, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(8, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__ 
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £         £      )
|--|--|--                  (    £          £          £      )
                           (     £         £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £ £  £ )
|--|--|--                  (  £  £ £ )
                           ( £  £  £ )
|--|--|--
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0xf935c3f61c26675f, [[160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0xeb1adbebb9d3d942, [[299, 159], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xbc79e1c13617b18b, [[160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x35206abd908c70e9, [[302, 195, 0, 303, 194, 304, 196], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x4a0a49eb5d524465, [[305, 307, 308, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(10, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x64cfaa8c0bc0ab43, [[305, 309, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(1, (0xab960ce1bdd019c9, [[310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >       £ MB
|--|--
|--(1, (0x6af80ecf80b8d0f0, [[310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >       £ MB
|--|--
|--(1, (0x4b1983fe2ee5fc57, [[310, 245, 169, 312, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >     £ MB
|--|--
|--(1, (0x2693feecc72edb8f, [[316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1]]))
|--|--     The potential is recalculated from file :
|--|--      __FULLPATH__ _ __SYMBOLtypeB__ / __ABSPATH__ /charge-density
|--|--
|--(1, (0x5ca0d34d09b7d0e4, [[324, 325, 112, 0, 130, 325], Int64[], [-1]]))
|--|--     Starting wfcs are   £ atomic wfcs
|--|--
|--(1, (0xf2395fe6cc8a8b8d, [[326, 327, 117], [328, 270, 296, 329], Int64[], [-1]]))
|--|--     Band Structure Calculation
|--|--     Davidson diagonalization with overlap
|--|--
|--(10, (0x1a0ef83622768cf2, [[168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     Computing kpt #:     £
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x3bb25920b2d2da64, [[336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1]]))
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0x2ce1dac627314ee1, [[245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x2dbb3e2f37203c66, [[253, 13, 278, 339, 255], Int64[], [-1]]))
|--|--     End of band structure calculation
|--|--
|--(80, (0xa7676042564e9db9, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x7b7a7d4be963a28c, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--|--(1, (0x65f833bf4fb21d74, [[343, 344], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--(1, (0x283835eb06d05e56, [[14, 241, 242, 11, 0, 345], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf825c324eb557b75, [[346, 347, 75, 319, 77], Int64[], [-1]]))
|--|--     Writing output data file  __FULLPATH__ 
|--|--
|--(1, (0x7a56a067ca2bd79a, [[2], Int64[], [-1]]))
|--|--      __CHEM__                                                                        
|--|--
|--(1, (0x43a524b1801acc01, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     kinetic-energy cut-off    =     £   __Ry__ 
|--|--     charge density cut-off    =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     beta                      =       £
|--|--     number of iterations used =            £
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
           celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x8c7dd3cd938f32f7, [[154, 155, 14, 156, 157], Int64[], [-1]]))
|--|--     Atoms inside the unit cell: 
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--     Cartesian axes
|--|--
|--(1, (0xf96a48aa85f1fa8f, [[160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.  atom      mass           positions (alat units)
|--|--        £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--|--
|--(1, (0xb64886d7c4b2d224, [[168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     Computing dynamical matrix for 
|--|--                    q = (   £   £   £ )
|--|--
|--(1, (0x177a961693227104, [[0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1]]))
|--|--     £  __ABSPATH__ . (with q -> -q+G )
|--|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(3, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(4, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(4, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £         £      )
                           (     £         £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £ £ )
                           (  £ £  £ )
|--|--|--
|--|--
|--(1, (0x146e9d6d32084304, [[9, 190, 191, 118, 173, 174], Int64[], [-1]]))
|--|--     This transformation sends q -> -q+G
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym = £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x981e739164af2da5, [[63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1]]))
|--|--     G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--
|--(1, (0x3372a4ddfe14895a, [[223, 224], [225, 112, 0, 226, 227], Int64[], [-1]]))
|--|--     Atomic displacements:
|--|--     There are   £ irreducible representations
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (   £   £   )            (  £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #  £                           mode #  £
|--|--           (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #  £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--
   
|--(1, (0x08232853d1517908, [[232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--     Alpha used in Ewald sum =   £
|--|--      __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--|--
|--
   
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(8, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(5, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(9, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #  £ £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(8, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--(1, (0x57460513c7934b5e, [[260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1]]))
|--|--     Number of q in the star =    £
|--|--     List of q in the star:
|--|--          £   £   £   £
                £   £   £   £
                £   £   £   £
|--|--
|--(1, (0x42e3a802c71d8478, [[264, 14, 169, 170], Int64[], [-1]]))
|--|--     Diagonalizing the dynamical matrix
|--|--
|--(1, (0x5cab923051261510, [[118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     q = (    £   £   £ ) 
|--|--
|--(1, (0x49d96c09ae051958, [[265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1]]))
|--|-- **************************************************************************
|--|--     freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--|-- **************************************************************************
|--|--
|--(1, (0x215e9b06bfc52a18, [[117, 13, 118, 60, 0, 0, 0], Int64[], [-1]]))
|--|--     Calculation of q =    £   £   £
|--|--
|--(1, (0x8be4217ba17d3689, [[98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £   £
|--|--
|--
|--(1, (0x5820bc8260bbe7f3, [[287], [2], Int64[], [-1]]))
|--|--     Title: 
|--|--      __CHEM__                                                                        
|--|--
|--
|--(1, (0xaa0ebfb37906f3ca, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--(1, (0x2f82824bfcb4eefb, [[130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__              £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0xd16bdc3c32024f33, [[0, 294, 295, 296, 297, 298], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(7, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(20, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(16, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £         £      )
|--|--|--                  (     £          £          £      )
                           (    £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £ £ )
|--|--|--                  (  £  £  £ )
                           ( £  £  £ )
|--|--|--
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0xf935c3f61c26675f, [[160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0xeb1adbebb9d3d942, [[299, 159], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xbc79e1c13617b18b, [[160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x35206abd908c70e9, [[302, 195, 0, 303, 194, 304, 196], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x4a0a49eb5d524465, [[305, 307, 308, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(10, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x64cfaa8c0bc0ab43, [[305, 309, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(1, (0xab960ce1bdd019c9, [[310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >       £ MB
|--|--
|--(1, (0x6af80ecf80b8d0f0, [[310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >       £ MB
|--|--
|--(1, (0x4b1983fe2ee5fc57, [[310, 245, 169, 312, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >     £ MB
|--|--
|--(1, (0x2693feecc72edb8f, [[316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1]]))
|--|--     The potential is recalculated from file :
|--|--      __FULLPATH__ _ __SYMBOLtypeB__ / __ABSPATH__ /charge-density
|--|--
|--(1, (0x5ca0d34d09b7d0e4, [[324, 325, 112, 0, 130, 325], Int64[], [-1]]))
|--|--     Starting wfcs are   £ atomic wfcs
|--|--
|--(1, (0xf2395fe6cc8a8b8d, [[326, 327, 117], [328, 270, 296, 329], Int64[], [-1]]))
|--|--     Band Structure Calculation
|--|--     Davidson diagonalization with overlap
|--|--
|--(10, (0x1a0ef83622768cf2, [[168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     Computing kpt #:     £
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x3bb25920b2d2da64, [[336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1]]))
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0x2ce1dac627314ee1, [[245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x2dbb3e2f37203c66, [[253, 13, 278, 339, 255], Int64[], [-1]]))
|--|--     End of band structure calculation
|--|--
|--(80, (0xa7676042564e9db9, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x7b7a7d4be963a28c, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--|--(1, (0x65f833bf4fb21d74, [[343, 344], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--(1, (0x283835eb06d05e56, [[14, 241, 242, 11, 0, 345], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf825c324eb557b75, [[346, 347, 75, 319, 77], Int64[], [-1]]))
|--|--     Writing output data file  __FULLPATH__ 
|--|--
|--(1, (0x7a56a067ca2bd79a, [[2], Int64[], [-1]]))
|--|--      __CHEM__                                                                        
|--|--
|--(1, (0x43a524b1801acc01, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     kinetic-energy cut-off    =     £   __Ry__ 
|--|--     charge density cut-off    =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     beta                      =       £
|--|--     number of iterations used =            £
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
           celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x8c7dd3cd938f32f7, [[154, 155, 14, 156, 157], Int64[], [-1]]))
|--|--     Atoms inside the unit cell: 
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--     Cartesian axes
|--|--
|--(1, (0xf96a48aa85f1fa8f, [[160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.  atom      mass           positions (alat units)
|--|--        £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--|--
|--(1, (0xb64886d7c4b2d224, [[168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     Computing dynamical matrix for 
|--|--                    q = (   £   £   £ )
|--|--
|--(1, (0x177a961693227104, [[0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1]]))
|--|--     £  __ABSPATH__ . (with q -> -q+G )
|--|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(7, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(4, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0x146e9d6d32084304, [[9, 190, 191, 118, 173, 174], Int64[], [-1]]))
|--|--     This transformation sends q -> -q+G
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym = £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x981e739164af2da5, [[63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1]]))
|--|--     G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--
|--(1, (0x3372a4ddfe14895a, [[223, 224], [225, 112, 0, 226, 227], Int64[], [-1]]))
|--|--     Atomic displacements:
|--|--     There are   £ irreducible representations
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #  £
|--|--                     (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #  £                           mode #  £
|--|--           (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--
|--
   
|--(1, (0x08232853d1517908, [[232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--     Alpha used in Ewald sum =   £
|--|--      __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--|--
|--
   
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(7, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :    £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(5, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(9, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #  £ £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(8, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--(1, (0x57460513c7934b5e, [[260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1]]))
|--|--     Number of q in the star =    £
|--|--     List of q in the star:
|--|--          £   £   £   £
                £   £   £   £
                £   £   £   £
|--|--
|--(1, (0x42e3a802c71d8478, [[264, 14, 169, 170], Int64[], [-1]]))
|--|--     Diagonalizing the dynamical matrix
|--|--
|--(1, (0x5cab923051261510, [[118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     q = (    £   £   £ ) 
|--|--
|--(1, (0x49d96c09ae051958, [[265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1]]))
|--|-- **************************************************************************
|--|--     freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--|-- **************************************************************************
|--|--
|--(1, (0x215e9b06bfc52a18, [[117, 13, 118, 60, 0, 0, 0], Int64[], [-1]]))
|--|--     Calculation of q =    £   £   £
|--|--
|--(1, (0x8be4217ba17d3689, [[98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £   £
|--|--
|--
|--(1, (0x5820bc8260bbe7f3, [[287], [2], Int64[], [-1]]))
|--|--     Title: 
|--|--      __CHEM__                                                                        
|--|--
|--
|--(1, (0xaa0ebfb37906f3ca, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [128, 13, 288, 60, 0], [128, 13, 289, 290, 0], [132, 192, 60, 0, 134], [135, 136, 192, 60, 0, 134], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--(1, (0x2f82824bfcb4eefb, [[130, 291, 292, 163, 293], [2, 0, 0, 2, 34, 0, 73], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__              £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0xd16bdc3c32024f33, [[0, 294, 295, 296, 297, 298], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(7, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(20, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(16, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £         £      )
|--|--|--                  (     £          £          £      )
                           (    £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £ £ )
|--|--|--                  (  £  £  £ )
                           ( £  £  £ )
|--|--|--
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0xf935c3f61c26675f, [[160, 161, 162, 164, 165, 166], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0xeb1adbebb9d3d942, [[299, 159], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xbc79e1c13617b18b, [[160, 161, 162, 164, 300, 301], [0, 2, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x35206abd908c70e9, [[302, 195, 0, 303, 194, 304, 196], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x4a0a49eb5d524465, [[305, 307, 308, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(10, (0x6d0064dae20ba186, [[305, 82, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x64cfaa8c0bc0ab43, [[305, 309, 0, 306], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(1, (0xab960ce1bdd019c9, [[310, 311, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >       £ MB
|--|--
|--(1, (0x6af80ecf80b8d0f0, [[310, 315, 169, 312, 277, 313, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >       £ MB
|--|--
|--(1, (0x4b1983fe2ee5fc57, [[310, 245, 169, 312, 314, 0, 306], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >     £ MB
|--|--
|--(1, (0x2693feecc72edb8f, [[316, 317, 11, 318, 43, 319, 82], [77, 320, 321, 322, 171, 323], Int64[], [-1]]))
|--|--     The potential is recalculated from file :
|--|--      __FULLPATH__ _ __SYMBOLtypeB__ / __ABSPATH__ /charge-density
|--|--
|--(1, (0x5ca0d34d09b7d0e4, [[324, 325, 112, 0, 130, 325], Int64[], [-1]]))
|--|--     Starting wfcs are   £ atomic wfcs
|--|--
|--(1, (0xf2395fe6cc8a8b8d, [[326, 327, 117], [328, 270, 296, 329], Int64[], [-1]]))
|--|--     Band Structure Calculation
|--|--     Davidson diagonalization with overlap
|--|--
|--(6, (0x1a0ef83622768cf2, [[168, 330, 331, 0], [245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     Computing kpt #:     £
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x3bb25920b2d2da64, [[336, 60, 0, 337, 338, 116, 13, 140, 60, 0], Int64[], [-1]]))
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0x2ce1dac627314ee1, [[245, 246, 247, 332, 333, 334, 335, 11, 0, 248], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x2dbb3e2f37203c66, [[253, 13, 278, 339, 255], Int64[], [-1]]))
|--|--     End of band structure calculation
|--|--
|--(40, (0xa7676042564e9db9, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1], [999999999], Int64[], [-1], [343, 344], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x7b7a7d4be963a28c, [[197, 60, 0, 0, 0, 34, 0, 340, 341, 342], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--|--(1, (0x65f833bf4fb21d74, [[343, 344], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £  £
             £
|--|--|--
|--(1, (0x283835eb06d05e56, [[14, 241, 242, 11, 0, 345], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf825c324eb557b75, [[346, 347, 75, 319, 77], Int64[], [-1]]))
|--|--     Writing output data file  __FULLPATH__ 
|--|--
|--(1, (0x7a56a067ca2bd79a, [[2], Int64[], [-1]]))
|--|--      __CHEM__                                                                        
|--|--
|--(1, (0x43a524b1801acc01, [[119, 120, 60, 0], [121, 122, 123, 60, 0, 124], [125, 126, 60, 0, 127], [128, 13, 129, 60, 0], [128, 13, 130, 131, 60, 0], [132, 133, 60, 0, 134], [135, 136, 133, 60, 0, 134], [137, 138, 60, 0], [139, 60, 0], [128, 13, 140, 141, 60, 0], [83, 60, 84, 34, 0, 0, 0, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     kinetic-energy cut-off    =     £   __Ry__ 
|--|--     charge density cut-off    =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     beta                      =       £
|--|--     number of iterations used =            £
|--|--     Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--|--
|--
|--(1, (0xd9bf803cc9b387e8, [[142, 0, 143, 0, 142, 0, 143, 0, 142, 0, 143, 0], Int64[], [-1]]))
|--|--     celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
           celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--|--
|--(1, (0x4059018a979ee593, [[144, 145, 146, 147, 38, 148, 13, 149], [150, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
                     a( £ ) = (  £  £  £ )  
|--|--
|--(1, (0x925beb7ed07dad08, [[151, 145, 146, 147, 38, 148, 152, 73], [153, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x8c7dd3cd938f32f7, [[154, 155, 14, 156, 157], Int64[], [-1]]))
|--|--     Atoms inside the unit cell: 
|--|--
|--(1, (0x09a00851e92e1123, [[158, 159], Int64[], [-1]]))
|--|--     Cartesian axes
|--|--
|--(1, (0xf96a48aa85f1fa8f, [[160, 161, 162, 163, 164, 165, 166], [0, 2, 0, 167, 0, 73, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     site n.  atom      mass           positions (alat units)
|--|--        £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
              £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--|--
|--(1, (0xb64886d7c4b2d224, [[168, 169, 170, 19], [118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     Computing dynamical matrix for 
|--|--                    q = (   £   £   £ )
|--|--
|--(1, (0x177a961693227104, [[0, 171, 26, 172, 118, 173, 174, 73], Int64[], [-1]]))
|--|--     £  __ABSPATH__ . (with q -> -q+G )
|--|--
|--(1, (0x5476d2f4859f7da4, [[175, 176, 177], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(3, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x8641918cb71cfd9f, [[178, 60, 0, 188], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x500b62cce45d4877, [[178, 60, 0, 188], Int64[], [-1]]))
|--|--|--      isym =  £     inversion                                    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(7, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(20, (0xf2d834cc9ba13f2e, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x8f35dda3d9834458, [[178, 60, 0, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(16, (0xaea16951f5c5b227, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5bb56fc33a79c99f, [[178, 60, 0, 189, 0, 183, 184, 185, 182, 186, 187], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £         £      )
|--|--|--                  (     £          £          £      )
                           (    £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £ £ )
|--|--|--                  (  £  £  £ )
                           ( £  £  £ )
|--|--|--
|--|--
|--(1, (0x146e9d6d32084304, [[9, 190, 191, 118, 173, 174], Int64[], [-1]]))
|--|--     This transformation sends q -> -q+G
|--|--
|--(1, (0x8ea9c6cc07d4c2dd, [[178, 60, 0, 179], Int64[], [-1], [180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], [182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xed4c9d82ca0270a6, [[178, 60, 0, 179], Int64[], [-1]]))
|--|--|--      isym = £     identity                                     
|--|--|--
|--|--(1, (0xd2ca9f8611a73c07, [[180, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x7ee7eaaf7a733205, [[182, 181, 0, 73, 60, 34, 0, 0, 0, 73], [34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x981e739164af2da5, [[63, 192, 60, 0, 34, 0, 193, 194, 195, 196], Int64[], [-1]]))
|--|--     G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--|--
|--(1, (0x33e1a1c9b592ebc0, [[128, 13, 197, 198, 0, 199, 200, 201, 34, 134, 143, 0], [182, 147, 38, 148, 152], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--     number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xb774990405144f12, [[180, 147], [202, 0, 73, 60, 34, 0, 0, 0, 203, 204, 60, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(2, (0x77fb0b2ddb469f41, [[205, 116, 0, 19, 2, 206, 43, 207], [77], [208], [209, 11, 210, 211, 60, 0], [212, 38, 213, 214, 215], [216, 217, 218, 13, 0, 219, 0, 139, 220, 221], [222, 0, 73, 60, 0], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Norm-conserving, Zval =  £
|--|--     Generated in analytical, separable form
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--
|--
|--(1, (0x3372a4ddfe14895a, [[223, 224], [225, 112, 0, 226, 227], Int64[], [-1]]))
|--|--     Atomic displacements:
|--|--     There are   £ irreducible representations
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xec9f69b26a96f3d5, [[115, 116, 0], [34, 0, 0, 73], Int64[], [-1]]))
|--|--                     mode #   £
|--|--                     (   £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #   £              mode #   £              mode #   £
|--|--     (   £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £   £ ) (   £   £ ) 
           (  £  £ ) (   £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #   £              mode #   £              mode #   £
|--|--     (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0x07af5ca035a78593, [[115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--           mode #   £                           mode #   £
|--|--           (  £   £   )            (   £   £   ) 
                 (   £  £   )            (   £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £   £   )            (   £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £  £   )            (   £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
|--|--
|--(1, (0x7005b35936ea1055, [[228, 0, 0, 229, 185, 230, 90, 231], [111, 112, 113, 114], Int64[], [-1]]))
|--|--     Representation     £      £ modes -  To be done
|--|--     Irreps are as follows:
|--|--
|--(1, (0xc63a92d36e14c6a7, [[115, 116, 0, 115, 116, 0, 115, 116, 0], [34, 0, 0, 73, 34, 0, 0, 73, 34, 0, 0, 73], Int64[], [-1]]))
|--|--     mode #  £              mode #  £              mode #  £
|--|--     (   £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (   £   £ ) (   £  £ ) 
           (   £   £ ) (   £   £ ) (  £   £ ) 
           (   £   £ ) (   £  £ ) (  £   £ ) 
           (  £  £ ) (   £   £ ) (   £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
|--|--
|--
   
|--(1, (0x08232853d1517908, [[232, 141, 38, 233, 234, 60, 0], [235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--     Alpha used in Ewald sum =   £
|--|--      __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--|--
|--
   
|--(1, (0xae3f630d4a2d9694, [[228, 116, 0, 115, 116, 0], Int64[], [-1]]))
|--|--     Representation #  £ mode #   £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(6, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:  £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(7, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xdf37450089466f89, [[228, 116, 0, 229, 116, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #   £  £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(5, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--
|--(1, (0xda3891ce7acd1173, [[228, 116, 0, 229, 116, 0, 0, 0], Int64[], [-1]]))
|--|--     Representation #  £ modes #  £ £ £
|--|--
|--(1, (0x8d6d4cb8f0f279ba, [[239, 117], Int64[], [-1], [244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1], [253, 13, 254, 255], Int64[], [-1], [-1]]))
|--|--(1, (0x5d485393640aac1f, [[239, 117], Int64[], [-1]]))
|--|--|--     Self-consistent Calculation
|--|--|--
|--|--(5, (0x426963808a80b441, [[244, 116, 0, 245, 246, 247, 82, 0, 248, 171, 249, 0], [250, 0, 251, 60, 0, 252, 251, 60, 0], Int64[], [-1]]))
|--|--|--      iter #   £ total cpu time :   £ secs    __ABSPATH__ .:   £
|--|--|--      thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--|--
|--|--(1, (0x4e619fc47d17898c, [[253, 13, 254, 255], Int64[], [-1]]))
|--|--|--     End of self-consistent calculation
|--|--|--
|--(1, (0x7cc1cae6fcebac18, [[256, 257, 258, 259], Int64[], [-1]]))
|--|--     Convergence has been achieved 
|--|--
|--(1, (0x57460513c7934b5e, [[260, 13, 118, 38, 14, 261, 60, 0], [262, 13, 118, 38, 14, 263], [999999999], Int64[], [-1]]))
|--|--     Number of q in the star =    £
|--|--     List of q in the star:
|--|--          £   £   £   £
|--|--
|--(1, (0x42e3a802c71d8478, [[264, 14, 169, 170], Int64[], [-1]]))
|--|--     Diagonalizing the dynamical matrix
|--|--
|--(1, (0x5cab923051261510, [[118, 60, 34, 0, 0, 0, 73], Int64[], [-1]]))
|--|--     q = (    £   £   £ ) 
|--|--
|--(1, (0x49d96c09ae051958, [[265], [266, 34, 0, 73, 60, 0, 267, 60, 0, 268], [265], Int64[], [-1]]))
|--|-- **************************************************************************
|--|--     freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
           freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--|-- **************************************************************************
|--|--
|--(1, (0x6f497e6851a2abdd, [[348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(3, (0x0831e7bc89b08f04, [[350, 351, 348], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0x23b133279f531b42, [[350, 351, 348], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--
|--(2, (0x0831e7bc89b08f04, [[350, 351, 348], [348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--|--
|--(1, (0xd7b4a94cc1f40c53, [[352, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     General routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--|--
|--(1, (0xdd3f853cb15fce87, [[48, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     Parallel routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0xb06c627458c632b1, [[235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--      __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--|--
|--(1, (0x794d981a6c8c9c7e, [[355], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     INITIALIZATION: 
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0x15dae49c5d135825, [[235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0x6c5c988d27811289, [[356, 357], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     DYNAMICAL MATRIX:
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
            __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(6, (0x15dae49c5d135825, [[235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
            __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
            __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--|--
|--(1, (0xbe032043fe9588a4, [[235, 236, 237, 236, 238, 34, 0, 349], [358, 348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
|--|--     c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--|--
|--(1, (0x6ce27cdeffbe98d1, [[358, 348, 236, 237, 236, 238, 34, 0, 349], [348, 236, 237, 236, 238, 34, 0, 349], [235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--     c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--|--
|--(1, (0x6f497e6851a2abdd, [[348, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--|--
|--(1, (0x15dae49c5d135825, [[235, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--|--
|--
|--(1, (0xd7b4a94cc1f40c53, [[352, 353], [354, 236, 237, 236, 238, 34, 0, 349], Int64[], [-1]]))
|--|--      General routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
|--|--
|--
|--(1, (0xb06c627458c632b1, [[235, 236, 237, 236, 238], Int64[], [-1]]))
|--|--      __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--|--
|--
|--(1, (0x5fb7280e4a808ce9, [[9, 359, 360, 361, 362, 8, 6], Int64[], [-1]]))
|--|--   This run was terminated on:    __HHMMSS__    __DATEa__             
|--|--
|--(1, (0x5d3749f41e65ee7b, [[363], [364, 365], [363], Int64[], [-1]]))
|--|--=------------------------------------------------------------------------------=
|--|--   JOB DONE.
|--|--=------------------------------------------------------------------------------=
|--|--