(1, (0xb3fd63a2fe2a3e38, [Int64[], [1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1], [49, 50, 51, 52, 5, 0, 53], Int64[], [-1], [54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1], [72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], [87, 88, 89, 90, 91, 91, 92], [87, 26, 27, 88, 89, 90, 91, 91, 92], Int64[], [-1], [93, 94, 39, 95, 96, 13, 14, 97, 98], [99, 100, 101, 102, 103, 104, 105, 106], [107, 108, 109, 110, 13, 111, 0, 112, 0, 113], Int64[], [-1], Int64[], [114, 115], [116], [117, 118, 119, 120, 121, 118, 119, 122], [123, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [124, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [125], [126], Int64[], [-1], Int64[], [127, 128, 61, 0], [129, 130, 131, 61, 0, 132], [133, 134, 61, 0, 135], [76, 13, 136, 61, 0], [76, 13, 78, 137, 61, 0], [76, 13, 138, 61, 0], [76, 13, 139, 140, 0], [141, 142, 61, 0, 143], [144, 145, 142, 61, 0, 143], [146, 147, 61, 0], [148, 149, 61, 0], [76, 13, 150, 106, 61, 0, 151, 148], [152, 61, 153, 120, 154, 155, 35, 0, 0, 0, 0, 0, 0, 156], [157, 61, 0], Int64[], [-1], Int64[], [158, 0, 159, 0, 158, 0, 159, 0, 158, 0, 159, 0], Int64[], [-1], [160, 161, 162, 163, 39, 164, 13, 165], [166, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [167, 161, 162, 163, 39, 164, 168, 156], [169, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], Int64[], [170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1], Int64[], [170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1], Int64[], [78, 79, 206, 207, 208], [26, 0, 0, 26, 35, 0, 156], Int64[], [-1], [0, 209, 210, 204, 211, 212], Int64[], [-1], Int64[], [213, 214, 215], Int64[], [-1], [216, 61, 0, 217], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 226], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [228, 229], Int64[], [-1], [230, 231, 232, 233, 234, 235], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [237, 229], Int64[], [-1], [230, 231, 232, 233, 238, 239], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [76, 13, 240, 241, 0, 242, 243, 244, 35, 143, 159, 0], [220, 163, 39, 164, 168], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1], [218, 163], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1], [248, 249, 0, 250, 251, 252, 253], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [254, 256, 257, 0, 255], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [254, 258, 0, 255], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [259, 260, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1], [259, 265, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1], [259, 266, 261, 262, 264, 0, 267], Int64[], [-1], [268, 269, 180, 270, 0], Int64[], [-1], [271, 272, 44, 273, 13, 274, 275], Int64[], [-1], [276, 144, 0, 277, 278, 279, 0], [280, 281, 282, 0, 283, 78, 281, 179, 0, 284, 281], [285, 286, 287, 288, 289, 290, 105, 291], [288, 289, 292, 5, 0, 57, 19, 293, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [300, 301], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [316, 13, 317, 318], Int64[], [-1], [240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1], [14, 324, 309, 11, 0, 325], Int64[], [-1], [326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [266, 327, 309, 61, 0, 143], Int64[], [-1], [328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1], [332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1], [146, 344, 345, 346, 39, 0, 150], Int64[], [-1], [347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1], [360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1], Int64[], [361, 362, 363, 364, 365, 366], Int64[], [-1], [266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1], [370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [371, 372, 373], Int64[], [-1], [76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1], [377, 378, 61, 0, 143], Int64[], [-1], [378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1], [378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1], [126, 385], [999999999], Int64[], [-1], [126, 386], [26, 0, 0, 0], Int64[], [-1], Int64[], [387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1], [268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [300, 301], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [316, 13, 317, 318], Int64[], [-1], [240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1], [14, 324, 309, 11, 0, 325], Int64[], [-1], [326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [266, 327, 309, 61, 0, 143], Int64[], [-1], [328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1], [332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1], [146, 344, 345, 346, 39, 0, 150], Int64[], [-1], [347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1], [360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1], Int64[], [361, 362, 363, 364, 365, 366], Int64[], [-1], [266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1], [370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1], [377, 398, 61, 0, 143], [377, 378, 61, 0, 143], Int64[], [-1], [399, 126, 315, 126], Int64[], [-1], [400, 126, 401, 375, 402], Int64[], [-1], [378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1], [378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1], [126, 385], [999999999], Int64[], [-1], [126, 386], [26, 0, 0, 0], Int64[], [-1], Int64[], [387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1], [268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [300, 301], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [316, 13, 317, 318], Int64[], [-1], [240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1], [14, 324, 309, 11, 0, 325], Int64[], [-1], [326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [266, 327, 309, 61, 0, 143], Int64[], [-1], [328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1], [332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1], [146, 344, 345, 346, 39, 0, 150], Int64[], [-1], [347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1], [360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1], Int64[], [361, 362, 363, 364, 365, 366], Int64[], [-1], [266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1], [370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1], [377, 398, 61, 0, 143], [377, 378, 61, 0, 143], Int64[], [-1], [399, 126, 315, 126], Int64[], [-1], [403, 44, 404, 405], [402, 406, 407, 7, 408, 409, 410], [400, 126, 401, 375, 402], Int64[], [-1], [378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1], [378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1], [126, 385], [999999999], Int64[], [-1], [126, 386], [26, 0, 0, 0], Int64[], [-1], Int64[], [387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1], [268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [300, 301], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [316, 13, 317, 318], Int64[], [-1], [240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1], [14, 324, 309, 11, 0, 325], Int64[], [-1], [326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [266, 327, 309, 61, 0, 143], Int64[], [-1], [328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1], [332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1], [146, 344, 345, 346, 39, 0, 150], Int64[], [-1], [347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1], [360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1], Int64[], [361, 362, 363, 364, 365, 366], Int64[], [-1], [266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1], [370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [403, 44, 404, 405], [402, 406, 407, 7, 408, 409, 410], Int64[], [-1], [375, 411, 39, 0, 313, 374, 365, 0, 375, 376], [412, 309, 315, 0, 143, 277, 354, 315, 0, 413, 277, 414, 315, 0, 368, 156], Int64[], [-1], [316, 13, 371, 372, 373], Int64[], [-1], [415, 377, 61, 0, 143], [416, 417, 418], [378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1], [126, 385], [999999999], Int64[], [-1], [126, 386], [26, 0, 0, 0], [316, 417, 418], Int64[], [-1], Int64[], [419, 417, 313, 318, 7, 14, 420, 421], [328, 250, 282, 422, 19, 14, 417, 423, 414], [424, 425, 426, 44, 427, 7, 14, 428, 429], Int64[], [-1], [114, 115], [116], [117, 118, 119, 120, 121, 118, 119, 122], [123, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [124, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [125], [126], Int64[], [-1], Int64[], [127, 128, 61, 0], [129, 130, 131, 61, 0, 132], [133, 134, 61, 0, 135], [76, 13, 136, 61, 0], [76, 13, 78, 137, 61, 0], [76, 13, 138, 61, 0], [76, 13, 139, 140, 0], [141, 142, 61, 0, 143], [144, 145, 142, 61, 0, 143], [146, 147, 61, 0], [148, 149, 61, 0], [76, 13, 150, 106, 61, 0, 151, 148], [152, 61, 153, 120, 154, 155, 35, 0, 0, 0, 0, 0, 0, 156], Int64[], [-1], [158, 0, 159, 0, 158, 0, 159, 0, 158, 0, 159, 0], Int64[], [-1], [160, 161, 162, 163, 39, 164, 13, 165], [166, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [167, 161, 162, 163, 39, 164, 168, 156], [169, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], Int64[], [170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1], Int64[], [170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1], Int64[], [78, 79, 206, 207, 208], [26, 0, 0, 26, 35, 0, 156], Int64[], [-1], [0, 209, 210, 204, 211, 212], Int64[], [-1], Int64[], [213, 214, 215], Int64[], [-1], [216, 61, 0, 217], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 226], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1], [228, 229], Int64[], [-1], [230, 231, 232, 233, 234, 235], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [237, 229], Int64[], [-1], [230, 231, 232, 233, 238, 239], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1], [76, 13, 240, 241, 0, 242, 243, 244, 35, 143, 159, 0], [220, 163, 39, 164, 168], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1], [218, 163], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1], [248, 249, 0, 250, 251, 252, 253], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [254, 256, 257, 0, 255], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [254, 258, 0, 255], Int64[], [-1], [254, 89, 0, 255], Int64[], [-1], [259, 260, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1], [259, 265, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1], [259, 266, 261, 262, 264, 0, 267], Int64[], [-1], [268, 269, 180, 270, 0], Int64[], [-1], [271, 272, 44, 273, 13, 274, 275], Int64[], [-1], [276, 144, 0, 277, 278, 279, 0], [280, 281, 282, 0, 283, 78, 281, 179, 0, 284, 281], [285, 286, 287, 288, 289, 290, 105, 291], [288, 289, 292, 5, 0, 57, 19, 293, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [300, 301], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [430, 0, 392, 431, 411], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1], [316, 13, 317, 318], Int64[], [-1], [240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1], [14, 324, 309, 11, 0, 325], Int64[], [-1], [326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1], [266, 327, 309, 61, 0, 143], Int64[], [-1], [328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1], [332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1], [146, 344, 345, 346, 39, 0, 150], Int64[], [-1], [347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1], [360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1], Int64[], [361, 362, 363, 364, 365, 366], Int64[], [-1], [266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1], [370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1], [436, 187, 430], [430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1], [437, 438], [439, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1], [49, 438], [439, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1], [288, 438], [430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1], [430, 432, 433, 432, 434], Int64[], [-1], Int64[], [9, 440, 393, 441, 442, 8, 6], Int64[], [-1], [443], [444, 445], [443], Int64[], [-1], [-1]]))
|--
|--(1, (0x7e00ca7bda37f4db, [[1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1]]))
|--|--     Program  __KWPWSCF__   __VERSIONa__  starts on  __DATEa__  at  __HHMMSS__  
|--|--
|--(1, (0x68f918b830e4034b, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1]]))
|--|--     This program is part of the open-source Quantum ESPRESSO suite
|--|--     for quantum simulation of materials; please cite
|--|--         " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
               " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--|--          URL  __URL__  
|--|--     in publications or presentations arising from this work. More details at
|--|--      __URL__ 
|--|--
|--(1, (0x6fbf7773363bce3a, [[49, 50, 51, 52, 5, 0, 53], Int64[], [-1]]))
|--|--     Parallel version (MPI), running on    £ processors
|--|--
|--(1, (0xfd3b00449fa3f6a0, [[54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1]]))
|--|--     MPI processes distributed on     £ nodes
|--|--     K-points division:     npool     =       £
|--|--     R & G space division:  proc/nbgrp/npool/nimage =       £
|--|--     Waiting for input...
|--|--     Reading input from standard input
|--|--
|--(1, (0x97bde25ccba238ee, [[72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], [87, 88, 89, 90, 91, 91, 92], [87, 26, 27, 88, 89, 90, 91, 91, 92], Int64[], [-1]]))
|--|--     Current dimensions of program  __KWPWSCF__  are:
|--|--     Max number of different atomic species (ntypx) = £
|--|--     Max number of k-points (npk) =  £
|--|--     Max angular momentum in pseudopotentials (lmaxx) =  £
|--|--               file  __ABSPATH__ : wavefunction(s)   __ATOMORBIT__   __ATOMORBIT__  renormalized
|--|--               file  __CHEM__ . __ABSPATH__ : wavefunction(s)   __ATOMORBIT__   __ATOMORBIT__  renormalized
|--|--
|--(1, (0xe68d1ce4b53705e5, [[93, 94, 39, 95, 96, 13, 14, 97, 98], [99, 100, 101, 102, 103, 104, 105, 106], [107, 108, 109, 110, 13, 111, 0, 112, 0, 113], Int64[], [-1]]))
|--|--     Subspace diagonalization in iterative solution of the eigenvalue problem:
|--|--     one sub-group per band group will be used
|--|--     scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--|--
|--
|--(1, (0x3ac25f54d51268c4, [[114, 115], [116], [117, 118, 119, 120, 121, 118, 119, 122], [123, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [124, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £     £
|--|--     Max         £     £     £                 £     £     £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x8bf938f0d628ef4e, [[125], [126], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0xbb93f5491a5d7ed4, [[127, 128, 61, 0], [129, 130, 131, 61, 0, 132], [133, 134, 61, 0, 135], [76, 13, 136, 61, 0], [76, 13, 78, 137, 61, 0], [76, 13, 138, 61, 0], [76, 13, 139, 140, 0], [141, 142, 61, 0, 143], [144, 145, 142, 61, 0, 143], [146, 147, 61, 0], [148, 149, 61, 0], [76, 13, 150, 106, 61, 0, 151, 148], [152, 61, 153, 120, 154, 155, 35, 0, 0, 0, 0, 0, 0, 156], [157, 61, 0], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  __KWPW__  PBX  __KWPBC__  ( £  £  £  £ £ £ )
|--|--     nstep                     =           £
|--|--
|--
|--(1, (0x11a78591e92d8465, [[158, 0, 159, 0, 158, 0, 159, 0, 158, 0, 159, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x94312495926c00f7, [[160, 161, 162, 163, 39, 164, 13, 165], [166, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x7376b67103ad45e7, [[167, 161, 162, 163, 39, 164, 168, 156], [169, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x698476ddb2262901, [[170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Projector augmented-wave + core cor, Zval = £
|--|--     Generated using "atomic" code by A. Dal Corso  __VERSIONa__ 
|--|--     Shape of augmentation charge: PSQ
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with £ coefficients 
|--|--
|--
|--(1, (0x698476ddb2262901, [[170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__   read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Projector augmented-wave + core cor, Zval =  £
|--|--     Generated using "atomic" code by A. Dal Corso  __VERSIONa__ 
|--|--     Shape of augmentation charge: PSQ
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with £ coefficients 
|--|--
|--
|--(1, (0xd02d4803b70f772c, [[78, 79, 206, 207, 208], [26, 0, 0, 26, 35, 0, 156], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0x16da55c787d8ba4d, [[0, 209, 210, 204, 211, 212], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0xb798db86901d60ed, [[213, 214, 215], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0xb06be2208d060409, [[216, 61, 0, 217], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x09247b1e4842c51e, [[216, 61, 0, 217], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0x43a574a605b91cc5, [[216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x33c78a02808a90ea, [[216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x7df25b7fe70b6192, [[216, 61, 0, 226], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xd1bb9dfc1f2c40dc, [[216, 61, 0, 226], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x1b828ab2d4ea449a, [[216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x3d6aa9386e53599f, [[216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0xa6d3018f064bc7df, [[228, 229], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0x2de05abd071d054e, [[230, 231, 232, 233, 234, 235], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0xde9e50e1fc12d244, [[237, 229], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xf695b0918916abc3, [[230, 231, 232, 233, 238, 239], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x35ff01e27a2f9435, [[76, 13, 240, 241, 0, 242, 243, 244, 35, 143, 159, 0], [220, 163, 39, 164, 168], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xd7c97cc3825a73ae, [[218, 163], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x4e89f2f897180925, [[248, 249, 0, 250, 251, 252, 253], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xf5a5b1ecc8a51ec6, [[254, 256, 257, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x9e80bf661b0fd064, [[254, 258, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x6d0dc130cd45c606, [[259, 260, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x755e5395f98ebccb, [[259, 265, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x8f0c1de35aae1a6f, [[259, 266, 261, 262, 264, 0, 267], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0x16804af9765b026a, [[268, 269, 180, 270, 0], Int64[], [-1]]))
|--|--     Check: negative core charge=   £
|--|--
|--(1, (0x39d606d8b480d309, [[271, 272, 44, 273, 13, 274, 275], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0xfa8b01b102263256, [[276, 144, 0, 277, 278, 279, 0], [280, 281, 282, 0, 283, 78, 281, 179, 0, 284, 281], [285, 286, 287, 288, 289, 290, 105, 291], [288, 289, 292, 5, 0, 57, 19, 293, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--     Checking if some PAW data can be deallocated... 
|--|--       PAW data deallocated on   £ nodes for type:  £
             PAW data deallocated on   £ nodes for type:  £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x3ef12af154684818, [[300, 301], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <      £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0x83a993a257211aaa, [[316, 13, 317, 318], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x0375a575e30766fd, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x28e781504bb09976, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x665fefcfa8f153c7, [[322, 323], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x0186c81695105210, [[14, 324, 309, 11, 0, 325], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x511f127eb9ae0603, [[326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xe614a6dbcab54505, [[266, 327, 309, 61, 0, 143], Int64[], [-1]]))
|--|--     total all-electron energy =    £  __Ry__ 
|--|--
|--(1, (0xc5fa629cd1cfc870, [[328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0xbff4a4d3c4ec76d8, [[332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     one-center paw contrib.   =    £  __Ry__ 
|--|--      -> PAW hartree energy AE =      £  __Ry__ 
|--|--      -> PAW hartree energy  __CHEM__  =     £  __Ry__ 
|--|--      -> PAW xc energy AE      =     £  __Ry__ 
|--|--      -> PAW xc energy  __CHEM__       =       £  __Ry__ 
|--|--      -> total  __SYMBOLtypeA__  with PAW    =      £  __Ry__ 
            -> total  __SYMBOLtypeA__  with PAW   =     £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x892f0613ab26105a, [[146, 344, 345, 346, 39, 0, 150], Int64[], [-1]]))
|--|--     convergence has been achieved in  £ iterations
|--|--
|--(1, (0x202a968b5735dd6e, [[347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x8fa88c8dfcd0366b, [[232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £    £
|--|--
|--(1, (0x42d6f16096f469af, [[360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xfab8afab996616f4, [[361, 362, 363, 364, 365, 366], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--(1, (0x1151e26f399cc98b, [[266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1]]))
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0xf950ea8ba15db956, [[370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x0d73b805f953e142, [[371, 372, 373], Int64[], [-1]]))
|--|--     BFGS Geometry Optimization
|--|--
|--(1, (0x97549b0621bcaf14, [[76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x3f20923b8fc30f42, [[377, 378, 61, 0, 143], Int64[], [-1]]))
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x78b807cc10f998bb, [[378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0xb99f3690439d5df1, [[378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xdf4bafbdb2114f88, [[126, 385], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (bohr)
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x90707cca83e72bcc, [[126, 386], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd94e911909e31ebb, [[387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0xa4edb03f51d77c34, [[268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1]]))
|--|--     Check: negative core charge=   £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x3ef12af154684818, [[300, 301], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xa3dfaaad1aba3392, [[390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0x02786843b7e0cab2, [[305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0x83a993a257211aaa, [[316, 13, 317, 318], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x0375a575e30766fd, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x28e781504bb09976, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x665fefcfa8f153c7, [[322, 323], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x0186c81695105210, [[14, 324, 309, 11, 0, 325], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x511f127eb9ae0603, [[326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xe614a6dbcab54505, [[266, 327, 309, 61, 0, 143], Int64[], [-1]]))
|--|--     total all-electron energy =    £  __Ry__ 
|--|--
|--(1, (0xc5fa629cd1cfc870, [[328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0xbff4a4d3c4ec76d8, [[332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     one-center paw contrib.   =    £  __Ry__ 
|--|--      -> PAW hartree energy AE =      £  __Ry__ 
|--|--      -> PAW hartree energy  __CHEM__  =     £  __Ry__ 
|--|--      -> PAW xc energy AE      =     £  __Ry__ 
|--|--      -> PAW xc energy  __CHEM__       =       £  __Ry__ 
|--|--      -> total  __SYMBOLtypeA__  with PAW    =      £  __Ry__ 
            -> total  __SYMBOLtypeA__  with PAW   =     £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x892f0613ab26105a, [[146, 344, 345, 346, 39, 0, 150], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0x202a968b5735dd6e, [[347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x8fa88c8dfcd0366b, [[232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £    £   £
|--|--
|--(1, (0x42d6f16096f469af, [[360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xfab8afab996616f4, [[361, 362, 363, 364, 365, 366], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--(1, (0x1151e26f399cc98b, [[266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1]]))
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--  £   £   £         £      £      £
         £  £   £          £     £      £
         £   £  £          £      £     £
|--|--
|--(13, (0xf950ea8ba15db956, [[370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x97549b0621bcaf14, [[76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x5a57e47dd63bdf47, [[377, 398, 61, 0, 143], [377, 378, 61, 0, 143], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0xd6872afb20e73923, [[399, 126, 315, 126], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0x2da1d874c02c22ca, [[400, 126, 401, 375, 402], Int64[], [-1]]))
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0x78b807cc10f998bb, [[378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =            £  __Ry__ 
|--|--
|--(1, (0xb99f3690439d5df1, [[378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xdf4bafbdb2114f88, [[126, 385], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (bohr)
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x90707cca83e72bcc, [[126, 386], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd94e911909e31ebb, [[387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0xa4edb03f51d77c34, [[268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1]]))
|--|--     Check: negative core charge=   £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x3ef12af154684818, [[300, 301], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xa3dfaaad1aba3392, [[390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0x02786843b7e0cab2, [[305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0x83a993a257211aaa, [[316, 13, 317, 318], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x0375a575e30766fd, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x28e781504bb09976, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x665fefcfa8f153c7, [[322, 323], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x0186c81695105210, [[14, 324, 309, 11, 0, 325], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x511f127eb9ae0603, [[326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xe614a6dbcab54505, [[266, 327, 309, 61, 0, 143], Int64[], [-1]]))
|--|--     total all-electron energy =    £  __Ry__ 
|--|--
|--(1, (0xc5fa629cd1cfc870, [[328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0xbff4a4d3c4ec76d8, [[332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     one-center paw contrib.   =    £  __Ry__ 
|--|--      -> PAW hartree energy AE =      £  __Ry__ 
|--|--      -> PAW hartree energy  __CHEM__  =     £  __Ry__ 
|--|--      -> PAW xc energy AE      =     £  __Ry__ 
|--|--      -> PAW xc energy  __CHEM__       =       £  __Ry__ 
|--|--      -> total  __SYMBOLtypeA__  with PAW    =      £  __Ry__ 
            -> total  __SYMBOLtypeA__  with PAW   =     £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x892f0613ab26105a, [[146, 344, 345, 346, 39, 0, 150], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0x202a968b5735dd6e, [[347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x8fa88c8dfcd0366b, [[232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £   £    £
|--|--
|--(1, (0x42d6f16096f469af, [[360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xfab8afab996616f4, [[361, 362, 363, 364, 365, 366], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--(1, (0x1151e26f399cc98b, [[266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1]]))
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0xf950ea8ba15db956, [[370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x97549b0621bcaf14, [[76, 13, 313, 374, 61, 0], [76, 13, 375, 376, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x5a57e47dd63bdf47, [[377, 398, 61, 0, 143], [377, 378, 61, 0, 143], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0xd6872afb20e73923, [[399, 126, 315, 126], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xe8844f97b353dc52, [[403, 44, 404, 405], [402, 406, 407, 7, 408, 409, 410], [400, 126, 401, 375, 402], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0x78b807cc10f998bb, [[378, 379, 380, 61, 0, 381], [378, 126, 61, 0, 143], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =            £  __Ry__ 
|--|--
|--(1, (0xb99f3690439d5df1, [[378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xdf4bafbdb2114f88, [[126, 385], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (bohr)
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x90707cca83e72bcc, [[126, 386], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd94e911909e31ebb, [[387, 78, 144, 145, 388, 19, 14, 272], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0xa4edb03f51d77c34, [[268, 269, 180, 270, 0], [389, 144, 0, 277, 278, 279, 0], Int64[], [-1]]))
|--|--     Check: negative core charge=   £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x3ef12af154684818, [[300, 301], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xa3dfaaad1aba3392, [[390, 391, 5, 392, 393, 394, 395], [396, 204, 397, 147], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0x02786843b7e0cab2, [[305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0x83a993a257211aaa, [[316, 13, 317, 318], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x0375a575e30766fd, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x28e781504bb09976, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x665fefcfa8f153c7, [[322, 323], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x0186c81695105210, [[14, 324, 309, 11, 0, 325], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x511f127eb9ae0603, [[326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xe614a6dbcab54505, [[266, 327, 309, 61, 0, 143], Int64[], [-1]]))
|--|--     total all-electron energy =    £  __Ry__ 
|--|--
|--(1, (0xc5fa629cd1cfc870, [[328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0xbff4a4d3c4ec76d8, [[332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     one-center paw contrib.   =    £  __Ry__ 
|--|--      -> PAW hartree energy AE =      £  __Ry__ 
|--|--      -> PAW hartree energy  __CHEM__  =     £  __Ry__ 
|--|--      -> PAW xc energy AE      =     £  __Ry__ 
|--|--      -> PAW xc energy  __CHEM__       =       £  __Ry__ 
|--|--      -> total  __SYMBOLtypeA__  with PAW    =      £  __Ry__ 
            -> total  __SYMBOLtypeA__  with PAW   =     £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x892f0613ab26105a, [[146, 344, 345, 346, 39, 0, 150], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0x202a968b5735dd6e, [[347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x8fa88c8dfcd0366b, [[232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =    £    £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--
|--(1, (0x42d6f16096f469af, [[360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xfab8afab996616f4, [[361, 362, 363, 364, 365, 366], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--(1, (0x1151e26f399cc98b, [[266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1]]))
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--  £   £   £         £      £      £
         £  £   £          £     £      £
         £   £  £          £      £     £
|--|--
|--(13, (0xf950ea8ba15db956, [[370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
|--(1, (0x5d4de5ddd8de1061, [[403, 44, 404, 405], [402, 406, 407, 7, 408, 409, 410], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--
|--(1, (0x6872bfcb58cfcc70, [[375, 411, 39, 0, 313, 374, 365, 0, 375, 376], [412, 309, 315, 0, 143, 277, 354, 315, 0, 413, 277, 414, 315, 0, 368, 156], Int64[], [-1]]))
|--|--     bfgs converged in   £ scf cycles and   £ bfgs steps
|--|--     (criteria: energy <  £  __Ry__ , force <  £ __UNITFORCEa__ , cell <  £ __UNITkbar__ )
|--|--
|--(1, (0xf6bc3a39f2b405f3, [[316, 13, 371, 372, 373], Int64[], [-1]]))
|--|--     End of BFGS Geometry Optimization
|--|--
|--(1, (0xeae7be976898140d, [[415, 377, 61, 0, 143], [416, 417, 418], [378, 133, 134, 61, 0, 382, 35, 0, 383, 156], [145, 61, 0, 384], Int64[], [-1]]))
|--|--     Final enthalpy =    £  __Ry__ 
|--|--Begin final coordinates
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xdf4bafbdb2114f88, [[126, 385], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (bohr)
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x921587e66359a7bc, [[126, 386], [26, 0, 0, 0], [316, 417, 418], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--End final coordinates
|--|--
|--
   
|--(1, (0x92ef2d7d88dcb714, [[419, 417, 313, 318, 7, 14, 420, 421], [328, 250, 282, 422, 19, 14, 417, 423, 414], [424, 425, 426, 44, 427, 7, 14, 428, 429], Int64[], [-1]]))
|--|--     A final scf calculation at the relaxed structure.
|--|--     The G-vectors are recalculated for the final unit cell
|--|--     Results may differ from those at the preceding step.
|--|--
|--(1, (0x3ac25f54d51268c4, [[114, 115], [116], [117, 118, 119, 120, 121, 118, 119, 122], [123, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [124, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £     £
|--|--     Max         £     £     £                 £     £     £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x8bf938f0d628ef4e, [[125], [126], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0x1fb1538d37276466, [[127, 128, 61, 0], [129, 130, 131, 61, 0, 132], [133, 134, 61, 0, 135], [76, 13, 136, 61, 0], [76, 13, 78, 137, 61, 0], [76, 13, 138, 61, 0], [76, 13, 139, 140, 0], [141, 142, 61, 0, 143], [144, 145, 142, 61, 0, 143], [146, 147, 61, 0], [148, 149, 61, 0], [76, 13, 150, 106, 61, 0, 151, 148], [152, 61, 153, 120, 154, 155, 35, 0, 0, 0, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  __KWPW__  PBX  __KWPBC__  ( £  £  £  £ £ £ )
|--|--
|--(1, (0x11a78591e92d8465, [[158, 0, 159, 0, 158, 0, 159, 0, 158, 0, 159, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x94312495926c00f7, [[160, 161, 162, 163, 39, 164, 13, 165], [166, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x7376b67103ad45e7, [[167, 161, 162, 163, 39, 164, 168, 156], [169, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0x698476ddb2262901, [[170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Projector augmented-wave + core cor, Zval = £
|--|--     Generated using "atomic" code by A. Dal Corso  __VERSIONa__ 
|--|--     Shape of augmentation charge: PSQ
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with £ coefficients 
|--|--
|--
|--(1, (0x698476ddb2262901, [[170, 171, 0, 19, 26, 172, 44, 173], [174], [175], [176, 11, 177, 178, 179, 180, 181, 182, 61, 0], [183, 184, 185, 186, 187, 188, 189, 190, 3], [191, 13, 192, 193, 194], [195, 196, 197, 13, 0, 198, 0, 149, 199, 200], [201, 0, 156, 61, 0], [202, 203, 204, 0, 205], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__   read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Projector augmented-wave + core cor, Zval =  £
|--|--     Generated using "atomic" code by A. Dal Corso  __VERSIONa__ 
|--|--     Shape of augmentation charge: PSQ
|--|--     Using radial grid of £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with £ coefficients 
|--|--
|--
|--(1, (0xd02d4803b70f772c, [[78, 79, 206, 207, 208], [26, 0, 0, 26, 35, 0, 156], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0x16da55c787d8ba4d, [[0, 209, 210, 204, 211, 212], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0xb798db86901d60ed, [[213, 214, 215], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0xb06be2208d060409, [[216, 61, 0, 217], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x09247b1e4842c51e, [[216, 61, 0, 217], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0x43a574a605b91cc5, [[216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x33c78a02808a90ea, [[216, 61, 0, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x7df25b7fe70b6192, [[216, 61, 0, 226], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xd1bb9dfc1f2c40dc, [[216, 61, 0, 226], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x1b828ab2d4ea449a, [[216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1], [218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], [220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x3d6aa9386e53599f, [[216, 61, 0, 227, 0, 221, 222, 223, 220, 224, 225], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xa1464b6a8e772d14, [[218, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xd10b5c422ca0c300, [[220, 219, 0, 156, 61, 35, 0, 0, 0, 156], [35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0xa6d3018f064bc7df, [[228, 229], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0x2de05abd071d054e, [[230, 231, 232, 233, 234, 235], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0xde9e50e1fc12d244, [[237, 229], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xf695b0918916abc3, [[230, 231, 232, 233, 238, 239], [0, 26, 236, 0, 156, 61, 35, 0, 0, 0, 156], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x35ff01e27a2f9435, [[76, 13, 240, 241, 0, 242, 243, 244, 35, 143, 159, 0], [220, 163, 39, 164, 168], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xd7c97cc3825a73ae, [[218, 163], [245, 0, 156, 61, 35, 0, 0, 0, 246, 247, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x4e89f2f897180925, [[248, 249, 0, 250, 251, 252, 253], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xf5a5b1ecc8a51ec6, [[254, 256, 257, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x9e80bf661b0fd064, [[254, 258, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0x0cbf35d66484dec2, [[254, 89, 0, 255], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x6d0dc130cd45c606, [[259, 260, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x755e5395f98ebccb, [[259, 265, 261, 262, 101, 263, 264, 0, 255], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x8f0c1de35aae1a6f, [[259, 266, 261, 262, 264, 0, 267], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0x16804af9765b026a, [[268, 269, 180, 270, 0], Int64[], [-1]]))
|--|--     Check: negative core charge=   £
|--|--
|--(1, (0x39d606d8b480d309, [[271, 272, 44, 273, 13, 274, 275], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0xfa8b01b102263256, [[276, 144, 0, 277, 278, 279, 0], [280, 281, 282, 0, 283, 78, 281, 179, 0, 284, 281], [285, 286, 287, 288, 289, 290, 105, 291], [288, 289, 292, 5, 0, 57, 19, 293, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--     Checking if some PAW data can be deallocated... 
|--|--       PAW data deallocated on   £ nodes for type:  £
             PAW data deallocated on   £ nodes for type:  £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x3ef12af154684818, [[300, 301], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x631265bd77f2961c, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [430, 0, 392, 431, 411], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--      __QEelROUTINES__   £ eigenvalues not converged
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <      £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xd6fc5fd3c8a0f6d1, [[266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x61070f58e967f670, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1], [266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1], [-1]]))
|--|--(1, (0xd002ca4d17a20a31, [[302, 171, 0, 303, 0, 143, 304, 0], [305, 94, 204, 306], [307, 61, 0, 277, 308, 171, 13, 150, 61, 0], Int64[], [-1]]))
|--|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--|--     Davidson diagonalization with overlap
|--|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--|--
|--|--(1, (0xd07cd86d479b6ab5, [[266, 294, 295, 296, 297, 279, 298, 11, 0, 299], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0x83a993a257211aaa, [[316, 13, 317, 318], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x0375a575e30766fd, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1], [999999999], Int64[], [-1], [322, 323], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x28e781504bb09976, [[240, 61, 0, 0, 0, 35, 0, 319, 320, 321], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x665fefcfa8f153c7, [[322, 323], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x0186c81695105210, [[14, 324, 309, 11, 0, 325], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x511f127eb9ae0603, [[326, 266, 309, 61, 0, 143], [310, 311, 61, 0, 143], [312, 313, 314, 315, 0, 143], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xe614a6dbcab54505, [[266, 327, 309, 61, 0, 143], Int64[], [-1]]))
|--|--     total all-electron energy =    £  __Ry__ 
|--|--
|--(1, (0xc5fa629cd1cfc870, [[328, 266, 309, 11, 14, 329, 13, 14, 330, 331], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0xbff4a4d3c4ec76d8, [[332, 333, 61, 0, 143], [334, 333, 61, 0, 143], [335, 333, 61, 0, 143], [336, 333, 61, 0, 143], [337, 338, 339, 61, 0, 143], [340, 288, 334, 309, 341, 61, 0, 143], [340, 288, 334, 309, 26, 61, 0, 143], [340, 288, 335, 309, 341, 61, 0, 143], [340, 288, 335, 309, 26, 61, 0, 143], [340, 266, 126, 204, 288, 61, 0, 143], [342, 339, 343, 61, 0, 143], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     one-center paw contrib.   =    £  __Ry__ 
|--|--      -> PAW hartree energy AE =      £  __Ry__ 
|--|--      -> PAW hartree energy  __CHEM__  =     £  __Ry__ 
|--|--      -> PAW xc energy AE      =     £  __Ry__ 
|--|--      -> PAW xc energy  __CHEM__       =       £  __Ry__ 
|--|--      -> total  __SYMBOLtypeA__  with PAW    =      £  __Ry__ 
            -> total  __SYMBOLtypeA__  with PAW   =     £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x892f0613ab26105a, [[146, 344, 345, 346, 39, 0, 150], Int64[], [-1]]))
|--|--     convergence has been achieved in  £ iterations
|--|--
|--(1, (0x202a968b5735dd6e, [[347, 348, 5, 275, 349, 350, 351, 352], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x8fa88c8dfcd0366b, [[232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 355], [232, 0, 353, 0, 354, 61, 0, 0, 0], [328, 356, 357, 358, 279, 359], [232, 0, 353, 0, 354, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £    £    £
|--|--
|--(1, (0x42d6f16096f469af, [[360, 354, 61, 0, 360, 356, 357, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xfab8afab996616f4, [[361, 362, 363, 364, 365, 366], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--(1, (0x1151e26f399cc98b, [[266, 362, 35, 367, 156, 35, 368, 156, 369, 0], [999999999], Int64[], [-1]]))
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--  £   £   £         £      £      £
         £  £   £          £     £      £
         £   £  £          £      £     £
|--|--
|--(13, (0xf950ea8ba15db956, [[370, 35, 368, 156, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xe7a8f5f974a3a00c, [[430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1]]))
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(6, (0xaac1e8004ff3715c, [[436, 187, 430], [430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0xedd52f65e7ed6e0c, [[437, 438], [439, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1]]))
|--|--     General routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0x0379648457b92d59, [[49, 438], [439, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1]]))
|--|--     Parallel routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0xee17b4d40bedbf85, [[288, 438], [430, 432, 433, 432, 434, 35, 0, 435], Int64[], [-1]]))
|--|--     PAW routines
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
|--|--
|--(1, (0x9ddf5130594f4993, [[430, 432, 433, 432, 434], Int64[], [-1]]))
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--|--
|--
|--(1, (0x43d5a5cf71dee0ee, [[9, 440, 393, 441, 442, 8, 6], Int64[], [-1]]))
|--|--   This run was terminated on:   __HHMMSS__    __DATEa__             
|--|--
|--(1, (0xbca71de9a9e2df59, [[443], [444, 445], [443], Int64[], [-1]]))
|--|--=------------------------------------------------------------------------------=
|--|--   JOB DONE.
|--|--=------------------------------------------------------------------------------=
|--|--