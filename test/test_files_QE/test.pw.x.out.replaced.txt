(1, (0xe4f0ebdb81bc309f, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 0, 0, 33, 0, 34], [35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 7], [36], [47, 48, 49, 50, 5, 0, 51], [52, 53, 54, 5, 0, 55], [56, 57, 58, 59, 0], [60, 61, 62, 63, 57, 64, 59, 0], [65, 19, 66], [67, 68, 42, 69, 68], [70, 71, 13, 10, 2, 72], [73, 74, 13, 75, 76, 77, 78, 59, 0], [73, 74, 13, 79, 80, 59, 0], [73, 81, 82, 37, 83, 84, 59, 0], [85, 86, 37, 87, 88, 13, 14, 89, 90], [91, 92, 93, 94, 95, 96, 97, 98], [99, 100, 101, 102, 13, 103, 0, 104, 0, 105], [106, 107], [108], [109, 110, 111, 112, 113, 110, 111, 114], [115, 0, 0, 0, 0, 0, 0], [73, 0, 0, 0, 0, 0, 0], [116, 0, 0, 0, 0, 0, 0], [117], [118], [119, 120, 59, 0], [121, 122, 123, 59, 0, 124], [125, 126, 59, 0, 127], [74, 13, 128, 59, 0], [74, 13, 76, 129, 59, 0], [74, 13, 130, 59, 0], [74, 13, 131, 132, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 141, 59, 0], [74, 13, 142, 98, 59, 0, 143, 140], [144, 59, 145, 146, 147, 148, 33, 0, 0, 0, 0, 0, 0, 149], [150, 59, 0], [151, 0, 152, 0, 151, 0, 152, 0, 151, 0, 152, 0], [153, 154, 155, 156, 37, 157, 13, 158], [159, 0, 149, 59, 33, 0, 0, 0, 149], [160, 154, 155, 156, 37, 157, 161, 149], [162, 0, 149, 59, 33, 0, 0, 0, 149], [163, 164, 0, 19, 165, 166, 42, 167], [168], [169], [170, 11, 171, 172, 173, 174, 175, 59, 0], [176, 177, 178, 76, 179, 39, 180, 181, 182, 183], [184, 185, 186, 13, 0, 187, 0, 141, 188, 189], [190, 0, 149, 59, 0], [191, 192, 193, 0, 194, 195, 59, 0, 0, 0], [999999999], [163, 164, 0, 19, 165, 166, 42, 167], [168], [169], [170, 11, 171, 172, 173, 174, 175, 59, 0], [176, 177, 178, 76, 179, 39, 180, 181, 182, 183], [184, 185, 186, 13, 0, 187, 0, 141, 188, 189], [190, 0, 149, 59, 0], [191, 192, 193, 0, 194, 195, 59, 0, 0, 0], [999999999], [76, 77, 196, 197, 198], [165, 0, 0, 165, 33, 0, 149], [0, 199, 200, 193, 201, 202], [203, 204, 205], [206, 59, 0, 207], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 216], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [218], [219, 220, 0, 221], [14, 222, 223], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 226, 227, 37, 228, 229, 230, 14, 231, 13, 14, 232, 233], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [234, 235], [236, 237, 238, 239, 240, 241], [0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149], [243, 235], [236, 237, 238, 239, 244, 245], [0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149], [74, 13, 246, 247, 0, 248, 249, 250, 33, 135, 152, 0], [210, 156, 37, 157, 161], [251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0], [208, 156], [251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0], [254, 255, 0, 256, 257, 258, 259], [260, 261, 0, 262], [260, 263, 264, 0, 262], [260, 261, 0, 262], [260, 265, 0, 262], [260, 261, 0, 262], [266, 267, 268, 269, 93, 270, 271, 0, 262], [266, 272, 268, 269, 93, 270, 271, 0, 262], [266, 273, 268, 269, 271, 0, 274], [275, 276, 42, 277, 13, 278, 279], [280, 136, 0, 281, 282, 181, 0], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 76, 288, 172, 0, 290, 288], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [362, 363, 364], [74, 13, 310, 365, 59, 0], [74, 13, 366, 367, 59, 0], [368, 178, 59, 0, 135], [178, 369, 370, 59, 0, 371], [178, 118, 59, 0, 135], [178, 125, 126, 59, 0, 372, 33, 0, 373, 149], [137, 59, 0, 374], [118, 375, 0, 149], [999999999], [118, 376], [165, 0, 0, 0], [377, 76, 136, 137, 378, 19, 14, 276], [283, 284, 285, 286, 0, 0], [379, 136, 0, 281, 282, 181, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [74, 13, 310, 365, 59, 0], [74, 13, 366, 367, 59, 0], [368, 380, 59, 0, 135], [368, 178, 59, 0, 135], [381, 118, 312, 118], [178, 369, 370, 59, 0, 371], [178, 118, 59, 0, 135], [178, 125, 126, 59, 0, 372, 33, 0, 373, 149], [137, 59, 0, 374], [118, 375, 0, 149], [999999999], [118, 376], [165, 0, 0, 0], [377, 76, 136, 137, 378, 19, 14, 276], [283, 284, 285, 286, 0, 0], [379, 136, 0, 281, 282, 181, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [74, 13, 310, 365, 59, 0], [74, 13, 366, 367, 59, 0], [368, 380, 59, 0, 135], [368, 178, 59, 0, 135], [381, 118, 312, 118], [382, 118, 383, 366, 384], [178, 369, 370, 59, 0, 371], [178, 118, 59, 0, 135], [178, 125, 126, 59, 0, 372, 33, 0, 373, 149], [137, 59, 0, 374], [118, 375, 0, 149], [999999999], [118, 376], [165, 0, 0, 0], [377, 76, 136, 137, 378, 19, 14, 276], [283, 284, 285, 286, 0, 0], [379, 136, 0, 281, 282, 181, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 139], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [74, 13, 310, 365, 59, 0], [74, 13, 366, 367, 59, 0], [368, 380, 59, 0, 135], [368, 178, 59, 0, 135], [381, 118, 312, 118], [393, 42, 394, 395], [384, 396, 397, 7, 398, 399, 400], [382, 118, 383, 366, 384], [178, 369, 370, 59, 0, 371], [178, 118, 59, 0, 135], [178, 125, 126, 59, 0, 372, 33, 0, 373, 149], [137, 59, 0, 374], [118, 375, 0, 149], [999999999], [118, 376], [165, 0, 0, 0], [377, 76, 136, 137, 378, 19, 14, 276], [283, 284, 285, 286, 0, 0], [379, 136, 0, 281, 282, 181, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 139], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [393, 42, 394, 395], [384, 396, 397, 7, 398, 399, 400], [366, 401, 37, 0, 310, 365, 230, 0, 366, 367], [402, 306, 312, 0, 135, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 149], [313, 13, 362, 363, 364], [405, 368, 59, 0, 135], [406, 407, 408], [178, 125, 126, 59, 0, 372, 33, 0, 373, 149], [137, 59, 0, 374], [118, 375, 0, 149], [999999999], [118, 376], [165, 0, 0, 0], [313, 407, 408], [409, 407, 310, 315, 7, 14, 410, 411], [324, 256, 220, 412, 19, 14, 407, 413, 404], [414, 415, 416, 42, 417, 7, 14, 418, 419], [106, 107], [108], [109, 110, 111, 112, 113, 110, 111, 114], [115, 0, 0, 0, 0, 0, 0], [73, 0, 0, 0, 0, 0, 0], [116, 0, 0, 0, 0, 0, 0], [117], [118], [119, 120, 59, 0], [121, 122, 123, 59, 0, 124], [125, 126, 59, 0, 127], [74, 13, 128, 59, 0], [74, 13, 76, 129, 59, 0], [74, 13, 130, 59, 0], [74, 13, 131, 132, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 141, 59, 0], [74, 13, 142, 98, 59, 0, 143, 140], [144, 59, 145, 146, 147, 148, 33, 0, 0, 0, 0, 0, 0, 149], [151, 0, 152, 0, 151, 0, 152, 0, 151, 0, 152, 0], [153, 154, 155, 156, 37, 157, 13, 158], [159, 0, 149, 59, 33, 0, 0, 0, 149], [160, 154, 155, 156, 37, 157, 161, 149], [162, 0, 149, 59, 33, 0, 0, 0, 149], [163, 164, 0, 19, 165, 166, 42, 167], [168], [169], [170, 11, 171, 172, 173, 174, 175, 59, 0], [176, 177, 178, 76, 179, 39, 180, 181, 182, 183], [184, 185, 186, 13, 0, 187, 0, 141, 188, 189], [190, 0, 149, 59, 0], [191, 192, 193, 0, 194, 195, 59, 0, 0, 0], [999999999], [163, 164, 0, 19, 165, 166, 42, 167], [168], [169], [170, 11, 171, 172, 173, 174, 175, 59, 0], [176, 177, 178, 76, 179, 39, 180, 181, 182, 183], [184, 185, 186, 13, 0, 187, 0, 141, 188, 189], [190, 0, 149, 59, 0], [191, 192, 193, 0, 194, 195, 59, 0, 0, 0], [999999999], [76, 77, 196, 197, 198], [165, 0, 0, 165, 33, 0, 149], [0, 199, 200, 193, 201, 202], [203, 204, 205], [206, 59, 0, 207], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 216], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1], [218], [219, 220, 0, 221], [14, 222, 223], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 226, 227, 37, 228, 229, 230, 14, 231, 13, 14, 232, 233], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [234, 235], [236, 237, 238, 239, 240, 241], [0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149], [243, 235], [236, 237, 238, 239, 244, 245], [0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149], [74, 13, 246, 247, 0, 248, 249, 250, 33, 135, 152, 0], [210, 156, 37, 157, 161], [251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0], [208, 156], [251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0], [254, 255, 0, 256, 257, 258, 259], [260, 261, 0, 262], [260, 263, 264, 0, 262], [260, 261, 0, 262], [260, 265, 0, 262], [260, 261, 0, 262], [266, 267, 268, 269, 93, 270, 271, 0, 262], [266, 272, 268, 269, 93, 270, 271, 0, 262], [266, 273, 268, 269, 271, 0, 274], [275, 276, 42, 277, 13, 278, 279], [280, 136, 0, 281, 282, 181, 0], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 76, 288, 172, 0, 290, 288], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [297, 298], [299, 164, 0, 300, 0, 135, 301, 0], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1], [302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1], [246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1], [14, 321, 306, 11, 0, 322], [323, 273, 306, 59, 0, 135], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], [328, 329, 59, 0, 135], [330, 329, 59, 0, 135], [331, 329, 59, 0, 135], [332, 329, 59, 0, 135], [333, 334, 335, 59, 0, 135], [138, 336, 337, 338, 37, 0, 142], [283, 284, 285, 286, 0, 0], [339, 340, 5, 279, 341, 342, 343, 344], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 59, 0, 0, 0], [324, 348, 349, 350, 181, 351], [238, 0, 345, 0, 346, 59, 0, 0, 0], [352, 346, 59, 0, 352, 348, 349, 59, 0], [353, 354, 355, 356, 230, 357], [283, 284, 285, 286, 0, 0], [273, 354, 33, 358, 149, 33, 359, 149, 360, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [361, 33, 359, 149, 0, 0, 0], [999999999], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [425, 177, 420], [420, 421, 422, 421, 423, 33, 0, 424], [426, 427], [428, 421, 422, 421, 423, 33, 0, 424], [47, 427], [428, 421, 422, 421, 423, 33, 0, 424], [420, 421, 422, 421, 423], [9, 429, 388, 430, 431, 8, 6], [432], [433, 434], [432], [-1]]))
|--(1, (0x8e457d5d2baf2866, [[1, 2, 3, 4, 5, 6, 7, 8]]))
        Program  __KWPWSCF__   __VERSIONa__  starts on  __DATEa__  at  __HHMMSS__  
|--(1, (0x5dfa1ff9d042ed20, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]))
        This program is part of the open-source Quantum ESPRESSO suite
|--(1, (0x76401a8ca73f4295, [[19, 20, 21, 13, 22, 23, 24]]))
        for quantum simulation of materials; please cite
|--(2, (0xac1ab2911d0b16d5, [[25, 26, 27, 28, 29, 30, 31, 0, 0, 33, 0, 34]]))
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--(1, (0xa590e97affe9bc88, [[35, 36]]))
             URL  __URL__  
|--(1, (0x49e67ae9163446b0, [[37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 7]]))
        in publications or presentations arising from this work. More details at
|--(1, (0xc643afc1a364cf02, [[36]]))
         __URL__ 
|--(1, (0x2a922e56b950bee8, [[47, 48, 49, 50, 5, 0, 51]]))
        Parallel version (MPI), running on    £ processors
|--(1, (0x3205822595232858, [[52, 53, 54, 5, 0, 55]]))
        MPI processes distributed on     £ nodes
|--(1, (0x1ea522825c53c190, [[56, 57, 58, 59, 0]]))
        K-points division:     npool     =       £
|--(1, (0x27225415eea38edd, [[60, 61, 62, 63, 57, 64, 59, 0]]))
        R & G space division:  proc/nbgrp/npool/nimage =       £
|--(1, (0xd23401c83f16c157, [[65, 19, 66]]))
        Waiting for input...
|--(1, (0x1d4bd92d68dd91a2, [[67, 68, 42, 69, 68]]))
        Reading input from standard input
|--(1, (0x9a43f1fc5b254cab, [[70, 71, 13, 10, 2, 72]]))
        Current dimensions of program  __KWPWSCF__  are:
|--(1, (0xdde3360deac9f9e4, [[73, 74, 13, 75, 76, 77, 78, 59, 0]]))
        Max number of different atomic species (ntypx) = £
|--(1, (0x387670ad2fcc2e65, [[73, 74, 13, 79, 80, 59, 0]]))
        Max number of k-points (npk) =  £
|--(1, (0x7ab0b571a1d455af, [[73, 81, 82, 37, 83, 84, 59, 0]]))
        Max angular momentum in pseudopotentials (lmaxx) =  £
|--(1, (0x2c5f4b98fae8fc10, [[85, 86, 37, 87, 88, 13, 14, 89, 90]]))
        Subspace diagonalization in iterative solution of the eigenvalue problem:
|--(1, (0x3e9ee2a0ed09c114, [[91, 92, 93, 94, 95, 96, 97, 98]]))
        one sub-group per band group will be used
|--(1, (0xa834cb9113b4ed65, [[99, 100, 101, 102, 13, 103, 0, 104, 0, 105]]))
        scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--(1, (0x9719f3ce768d91c7, [[106, 107]]))
        Parallelization info
|--(1, (0x9c14df160d8ebd13, [[108]]))
        --------------------
|--(1, (0xe17791a8b5d773b7, [[109, 110, 111, 112, 113, 110, 111, 114]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x792901a42b16659a, [[115, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x8470934af8c45567, [[73, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x10414de4e425a729, [[116, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(1, (0x64a6f6930071d5dd, [[117]]))
        Title: 
|--(1, (0x949982e76bc8957d, [[118]]))
         __SYMBOLtypeA__                                                               
|--(1, (0xaebda88147f7400b, [[119, 120, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x0f0d306e646bd9d9, [[121, 122, 123, 59, 0, 124]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0xa347d861f02d0452, [[125, 126, 59, 0, 127]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x0a2edf453f832244, [[74, 13, 128, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xa17314116a58668b, [[74, 13, 76, 129, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x1c92b10111d8afcd, [[74, 13, 130, 59, 0]]))
        number of electrons       =        £
|--(1, (0xfe1dff7d5e8f731f, [[74, 13, 131, 132, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x8904ff7a92a9e8a3, [[140, 141, 59, 0]]))
        mixing beta               =       £
|--(1, (0x3e812549b84d502e, [[74, 13, 142, 98, 59, 0, 143, 140]]))
        number of iterations used =            £  plain     mixing
|--(1, (0xa062e6ac514ef53b, [[144, 59, 145, 146, 147, 148, 33, 0, 0, 0, 0, 0, 0, 149]]))
        Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--(1, (0xf62c4009ce0bbe02, [[150, 59, 0]]))
        nstep                     =           £
|--(2, (0x1debd91c09d66099, [[151, 0, 152, 0, 151, 0, 152, 0, 151, 0, 152, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0x45e72eafcec24e00, [[153, 154, 155, 156, 37, 157, 13, 158]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xd6a78edb29b1d468, [[159, 0, 149, 59, 33, 0, 0, 0, 149]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0xeb12a8c3cb3669a4, [[160, 154, 155, 156, 37, 157, 161, 149]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xf11e7dc56ef85d58, [[162, 0, 149, 59, 33, 0, 0, 0, 149]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x421a7c934aea5c60, [[163, 164, 0, 19, 165, 166, 42, 167]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xed6ba457e3a463da, [[168]]))
         __FULLPATH__ 
|--(1, (0x1136aa88b0a9ee8f, [[169]]))
         __CHKSUM__ 
|--(1, (0x4f5e7a25a66d2386, [[170, 11, 171, 172, 173, 174, 175, 59, 0]]))
        Pseudo is Ultrasoft + core correction, Zval = £
|--(1, (0x00219e1e3e4f6026, [[176, 177, 178, 76, 179, 39, 180, 181, 182, 183]]))
        Generated by new atomic code, or converted to  __KWUPF__  format
|--(1, (0x328a2c559acf0ce1, [[184, 185, 186, 13, 0, 187, 0, 141, 188, 189]]))
        Using radial grid of  £ points,  £ beta functions with: 
|--(8, (0x5d6af138bcb64aa7, [[190, 0, 149, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x3059ae037ddfe99a, [[191, 192, 193, 0, 194, 195, 59, 0, 0, 0]]))
        Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                                          £   £   £
                                                          £
|--(1, (0x421a7c934aea5c60, [[163, 164, 0, 19, 165, 166, 42, 167]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xed6ba457e3a463da, [[168]]))
         __FULLPATH__ 
|--(1, (0x1136aa88b0a9ee8f, [[169]]))
         __CHKSUM__ 
|--(1, (0x4f5e7a25a66d2386, [[170, 11, 171, 172, 173, 174, 175, 59, 0]]))
        Pseudo is Ultrasoft + core correction, Zval =  £
|--(1, (0x00219e1e3e4f6026, [[176, 177, 178, 76, 179, 39, 180, 181, 182, 183]]))
        Generated by new atomic code, or converted to  __KWUPF__  format
|--(1, (0x328a2c559acf0ce1, [[184, 185, 186, 13, 0, 187, 0, 141, 188, 189]]))
        Using radial grid of  £ points,  £ beta functions with: 
|--(5, (0xa52dd43376dc0a8c, [[190, 0, 149, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x3059ae037ddfe99a, [[191, 192, 193, 0, 194, 195, 59, 0, 0, 0]]))
        Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--(1, (0x58777f4a929200b5, [[999999999]]))
                                                          £   £
|--(1, (0x7514848065f0f897, [[76, 77, 196, 197, 198]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0xc4109e5152af7554, [[165, 0, 0, 165, 33, 0, 149]]))
            __CHEM__             £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x26bc01f36fdb0038, [[0, 199, 200, 193, 201, 202]]))
        £ Sym. Ops., with inversion, found
|--(1, (0x06c3b635a2faaef7, [[203, 204, 205]]))
                                       s                        frac. trans.
|--(1, (0x172d8c086cc323bf, [[206, 59, 0, 207], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0xb99ae803f15d0115, [[206, 59, 0, 207]]))
            isym =  £     identity                                     
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(23, (0xe72a7d4f6b46e081, [[206, 59, 0, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x03c939f329da7392, [[206, 59, 0, 0, 211, 212, 213, 210, 214, 215]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x78ef0564f9d6203b, [[206, 59, 0, 216], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x05468246c6730544, [[206, 59, 0, 216]]))
            isym = £     inversion                                    
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(23, (0xc4a98207d6064e12, [[206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x0e35fdc81e6e967b, [[206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(1, (0x8109533e1a7e8ace, [[218]]))
         __POINTGROUP__  
|--(1, (0x8a7f81b3d7c52775, [[219, 220, 0, 221]]))
        there are £ classes
|--(1, (0x3ad1138fe5ef2463, [[14, 222, 223]]))
        the character table:
|--(1, (0x65e8a05ff7f4f878, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224]]))
           __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--(10, (0x9f9c5ccf5c417bb8, [[225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))
    __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
    __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
    __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
    __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
    __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
    __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
    __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
    __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
    __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
    __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--(1, (0x118e0bcbc3813260, [[14, 226, 227, 37, 228, 229, 230, 14, 231, 13, 14, 232, 233]]))
        the symmetry operations in each class and the name of the first element:
|--(1, (0x6ba981ae14e5d7df, [[224, 0]]))
         __GRPSYMBOL__         £
|--(1, (0xf057c02c3d73f8b1, [[207]]))
             identity                                               
|--(1, (0xba7db3822a616024, [[224, 0, 0, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                
|--(1, (0x02160156c07fc405, [[224, 0, 0, 0]]))
         __GRPSYMBOL__       £    £    £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                   
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__       £    £   £   £   £   £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
              £ deg rotation - cart. axis  __MILLER__                  
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £    £   £   £   £    £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                   
|--(1, (0x6ba981ae14e5d7df, [[224, 0]]))
         __GRPSYMBOL__        £
|--(1, (0x102a9fe42d64ff10, [[216]]))
             inversion                                              
|--(1, (0xba7db3822a616024, [[224, 0, 0, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__           
|--(1, (0x02160156c07fc405, [[224, 0, 0, 0]]))
         __GRPSYMBOL__     £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__              
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv.  £ deg rotation - cart. axis  __MILLER__             
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__     £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__              
|--(1, (0xbd9dbb35106482ed, [[234, 235]]))
      Cartesian axes
|--(1, (0xb172c6fe60b97aff, [[236, 237, 238, 239, 240, 241]]))
        site n.     atom                  positions (alat units)
|--(4, (0x2fe7f11bfc642a74, [[0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0x34b21a67af60cb54, [[243, 235]]))
      Crystallographic axes
|--(1, (0x060160cfe593152b, [[236, 237, 238, 239, 244, 245]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0x2fe7f11bfc642a74, [[0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0xc496fbb0b831bd71, [[74, 13, 246, 247, 0, 248, 249, 250, 33, 135, 152, 0]]))
        number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--(1, (0x46da021cd2aaba63, [[210, 156, 37, 157, 161]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(56, (0xfeccf1df88f949d3, [[251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x3c3f398e9a3c0940, [[208, 156]]))
                          cryst. coord.
|--(56, (0xfeccf1df88f949d3, [[251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xb2ec9a1185f6575f, [[254, 255, 0, 256, 257, 258, 259]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0xe12f73ee1c9517eb, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0xd68daa9b29867172, [[260, 263, 264, 0, 262]]))
         __QEDynRAMfor__  (w. buffer):       £ MB
|--(13, (0xe43195db95520d3b, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :      £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc44b3233140769ee, [[260, 265, 0, 262]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(3, (0x0bb3fe816546b856, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc8c9e485adadc93e, [[266, 267, 268, 269, 93, 270, 271, 0, 262]]))
        Estimated static dynamical RAM per process >      £ MB
|--(1, (0xd93ea4fa957c5d48, [[266, 272, 268, 269, 93, 270, 271, 0, 262]]))
        Estimated max dynamical RAM per process >      £ MB
|--(1, (0x8852fb08e363253c, [[266, 273, 268, 269, 271, 0, 274]]))
        Estimated total dynamical RAM >       £ GB
|--(1, (0x17fceed9139f0211, [[275, 276, 42, 277, 13, 278, 279]]))
        Initial potential from superposition of free atoms
|--(1, (0xda24ce8f66b56be8, [[280, 136, 0, 281, 282, 181, 0]]))
        starting charge   £ , renormalised to   £
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x8e732a2e5191edc2, [[287, 288, 220, 0, 289, 76, 288, 172, 0, 290, 288]]))
        Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(6, (0xc9af1582f3b2c552, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations =  £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is        £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <       £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is        £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <       £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in   £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =    £   £    £
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £   £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £   £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =    £   £   £
        atom    £ type  £   force =    £    £   £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__  £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
     £   £   £        £      £      £
      £  £   £          £    £      £
      £   £  £          £      £    £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0x5bff0bff882cd0be, [[362, 363, 364]]))
        BFGS Geometry Optimization
|--(1, (0x92c90df20931f357, [[74, 13, 310, 365, 59, 0]]))
        number of scf cycles    =   £
|--(1, (0xa759b84c396a3ba8, [[74, 13, 366, 367, 59, 0]]))
        number of bfgs steps    =   £
|--(1, (0x453575a238900c25, [[368, 178, 59, 0, 135]]))
        enthalpy new            =    £  __Ry__ 
|--(1, (0xeebb736fbf482965, [[178, 369, 370, 59, 0, 371]]))
        new trust radius        =       £ bohr
|--(1, (0xa22c65cc9d833de1, [[178, 118, 59, 0, 135]]))
        new  __SYMBOLtypeA__             =       £  __Ry__ 
|--(1, (0x5541e36693dce0f2, [[178, 125, 126, 59, 0, 372, 33, 0, 373, 149]]))
        new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--(1, (0xdd1b26ab87a1bee3, [[137, 59, 0, 374]]))
        density =      £  __UNITDENSITY__ 
|--(1, (0x5fedf7a736e581a2, [[118, 375, 0, 149]]))
    __SYMBOLtypeA__  (alat=  £ )
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £
      £   £   £
      £   £   £
|--(1, (0x0f2743dfc67f2c9e, [[118, 376]]))
    __SYMBOLtypeA__  (crystal)
|--(4, (0xe5d9c30eed4daa4d, [[165, 0, 0, 0]]))
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__        £   £   £
|--(1, (0x045f47f1965ca173, [[377, 76, 136, 137, 378, 19, 14, 276]]))
        NEW-OLD atomic charge density approx. for the potential
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x93879907654e970b, [[379, 136, 0, 281, 282, 181, 0]]))
        extrapolated charge   £ , renormalised to   £
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is       £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(7, (0x4e38770853b21280, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations =  £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is       £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <       £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is       £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <       £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in   £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =    £   £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =    £   £    £
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £   £   £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £         £      £      £
      £   £   £          £     £      £
      £   £   £          £      £     £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £     £
                                   £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0x92c90df20931f357, [[74, 13, 310, 365, 59, 0]]))
        number of scf cycles    =   £
|--(1, (0xa759b84c396a3ba8, [[74, 13, 366, 367, 59, 0]]))
        number of bfgs steps    =   £
|--(1, (0x8f8ee2e1c5597272, [[368, 380, 59, 0, 135]]))
        enthalpy old            =    £  __Ry__ 
|--(1, (0x453575a238900c25, [[368, 178, 59, 0, 135]]))
        enthalpy new            =    £  __Ry__ 
|--(1, (0x42a1cf8248aec20d, [[381, 118, 312, 118]]))
        CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--(1, (0xeebb736fbf482965, [[178, 369, 370, 59, 0, 371]]))
        new trust radius        =       £ bohr
|--(1, (0xa22c65cc9d833de1, [[178, 118, 59, 0, 135]]))
        new  __SYMBOLtypeA__             =       £  __Ry__ 
|--(1, (0x5541e36693dce0f2, [[178, 125, 126, 59, 0, 372, 33, 0, 373, 149]]))
        new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--(1, (0xdd1b26ab87a1bee3, [[137, 59, 0, 374]]))
        density =      £  __UNITDENSITY__ 
|--(1, (0x5fedf7a736e581a2, [[118, 375, 0, 149]]))
    __SYMBOLtypeA__  (alat=  £ )
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £
      £   £   £
      £   £   £
|--(1, (0x0f2743dfc67f2c9e, [[118, 376]]))
    __SYMBOLtypeA__  (crystal)
|--(4, (0xe5d9c30eed4daa4d, [[165, 0, 0, 0]]))
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__        £   £   £
|--(1, (0x045f47f1965ca173, [[377, 76, 136, 137, 378, 19, 14, 276]]))
        NEW-OLD atomic charge density approx. for the potential
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x93879907654e970b, [[379, 136, 0, 281, 282, 181, 0]]))
        extrapolated charge   £ , renormalised to   £
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is       £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(11, (0x763fc6284d4b9bde, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations =  £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is       £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <       £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is       £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <          £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in  £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =    £   £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
     £   £   £         £      £      £
      £  £   £          £     £      £
      £   £  £          £      £     £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £     £
                                   £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0x92c90df20931f357, [[74, 13, 310, 365, 59, 0]]))
        number of scf cycles    =   £
|--(1, (0xa759b84c396a3ba8, [[74, 13, 366, 367, 59, 0]]))
        number of bfgs steps    =   £
|--(1, (0x8f8ee2e1c5597272, [[368, 380, 59, 0, 135]]))
        enthalpy old            =    £  __Ry__ 
|--(1, (0x453575a238900c25, [[368, 178, 59, 0, 135]]))
        enthalpy new            =    £  __Ry__ 
|--(1, (0x42a1cf8248aec20d, [[381, 118, 312, 118]]))
        CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--(1, (0x67d923cad2a1ca4f, [[382, 118, 383, 366, 384]]))
        small  __SYMBOLtypeA__  resetting bfgs history
|--(1, (0xeebb736fbf482965, [[178, 369, 370, 59, 0, 371]]))
        new trust radius        =       £ bohr
|--(1, (0xa22c65cc9d833de1, [[178, 118, 59, 0, 135]]))
        new  __SYMBOLtypeA__             =       £  __Ry__ 
|--(1, (0x5541e36693dce0f2, [[178, 125, 126, 59, 0, 372, 33, 0, 373, 149]]))
        new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--(1, (0xdd1b26ab87a1bee3, [[137, 59, 0, 374]]))
        density =      £  __UNITDENSITY__ 
|--(1, (0x5fedf7a736e581a2, [[118, 375, 0, 149]]))
    __SYMBOLtypeA__  (alat=  £ )
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £
      £   £   £
      £   £   £
|--(1, (0x0f2743dfc67f2c9e, [[118, 376]]))
    __SYMBOLtypeA__  (crystal)
|--(4, (0xe5d9c30eed4daa4d, [[165, 0, 0, 0]]))
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__        £   £   £
|--(1, (0x045f47f1965ca173, [[377, 76, 136, 137, 378, 19, 14, 276]]))
        NEW-OLD atomic charge density approx. for the potential
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x93879907654e970b, [[379, 136, 0, 281, 282, 181, 0]]))
        extrapolated charge   £ , renormalised to   £
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is       £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
        Davidson diagonalization with overlap
|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
        ethr =  £ ,  avg # of iterations =  £
|--(1, (0x4d3800b3bd1d6bff, [[385, 386, 5, 387, 388, 389, 390]]))
        Threshold (ethr) on eigenvalues was too large:
|--(1, (0xf21e349fb0fdcf57, [[391, 193, 392, 139]]))
        Diagonalizing with lowered threshold
|--(6, (0xc9af1582f3b2c552, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations =  £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is       £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <       £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is       £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <          £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in   £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =    £   £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =    £    £   £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £          £      £      £
      £   £   £          £      £      £
      £   £   £          £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £      £
                                  £      £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0x92c90df20931f357, [[74, 13, 310, 365, 59, 0]]))
        number of scf cycles    =   £
|--(1, (0xa759b84c396a3ba8, [[74, 13, 366, 367, 59, 0]]))
        number of bfgs steps    =   £
|--(1, (0x8f8ee2e1c5597272, [[368, 380, 59, 0, 135]]))
        enthalpy old            =    £  __Ry__ 
|--(1, (0x453575a238900c25, [[368, 178, 59, 0, 135]]))
        enthalpy new            =    £  __Ry__ 
|--(1, (0x42a1cf8248aec20d, [[381, 118, 312, 118]]))
        CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--(1, (0x942307a1c846e6c0, [[393, 42, 394, 395]]))
        Message from routine bfgs:
|--(1, (0xfb0350fa75ac75d1, [[384, 396, 397, 7, 398, 399, 400]]))
        history already reset at previous step: stopping
|--(1, (0x67d923cad2a1ca4f, [[382, 118, 383, 366, 384]]))
        small  __SYMBOLtypeA__  resetting bfgs history
|--(1, (0xeebb736fbf482965, [[178, 369, 370, 59, 0, 371]]))
        new trust radius        =       £ bohr
|--(1, (0xa22c65cc9d833de1, [[178, 118, 59, 0, 135]]))
        new  __SYMBOLtypeA__             =       £  __Ry__ 
|--(1, (0x5541e36693dce0f2, [[178, 125, 126, 59, 0, 372, 33, 0, 373, 149]]))
        new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--(1, (0xdd1b26ab87a1bee3, [[137, 59, 0, 374]]))
        density =      £  __UNITDENSITY__ 
|--(1, (0x5fedf7a736e581a2, [[118, 375, 0, 149]]))
    __SYMBOLtypeA__  (alat=  £ )
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £
      £   £   £
      £   £   £
|--(1, (0x0f2743dfc67f2c9e, [[118, 376]]))
    __SYMBOLtypeA__  (crystal)
|--(4, (0xe5d9c30eed4daa4d, [[165, 0, 0, 0]]))
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__        £   £   £
|--(1, (0x045f47f1965ca173, [[377, 76, 136, 137, 378, 19, 14, 276]]))
        NEW-OLD atomic charge density approx. for the potential
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x93879907654e970b, [[379, 136, 0, 281, 282, 181, 0]]))
        extrapolated charge   £ , renormalised to   £
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is       £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
        Davidson diagonalization with overlap
|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
        ethr =  £ ,  avg # of iterations =  £
|--(1, (0x4d3800b3bd1d6bff, [[385, 386, 5, 387, 388, 389, 390]]))
        Threshold (ethr) on eigenvalues was too large:
|--(1, (0xf21e349fb0fdcf57, [[391, 193, 392, 139]]))
        Diagonalizing with lowered threshold
|--(3, (0x254957f8dd6fa724, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations =  £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is       £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <          £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is       £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <          £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in   £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =    £   £   £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =    £   £   £
        atom    £ type  £   force =    £   £   £
        atom    £ type  £   force =    £   £   £
        atom    £ type  £   force =    £   £   £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £          £      £      £
      £   £   £          £      £      £
      £   £   £          £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £      £
                                  £      £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0x942307a1c846e6c0, [[393, 42, 394, 395]]))
        Message from routine bfgs:
|--(1, (0xfb0350fa75ac75d1, [[384, 396, 397, 7, 398, 399, 400]]))
        history already reset at previous step: stopping
|--(1, (0xa4477e80fcb94e62, [[366, 401, 37, 0, 310, 365, 230, 0, 366, 367]]))
        bfgs converged in   £ scf cycles and   £ bfgs steps
|--(1, (0x2eba8348b8baf7fd, [[402, 306, 312, 0, 135, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 149]]))
        (criteria: energy <  £  __Ry__ , force <  £ __UNITFORCEa__ , cell <  £ __UNITkbar__ )
|--(1, (0x94e24d953bcf815f, [[313, 13, 362, 363, 364]]))
        End of BFGS Geometry Optimization
|--(1, (0xec8871335b1b3c7f, [[405, 368, 59, 0, 135]]))
        Final enthalpy =    £  __Ry__ 
|--(1, (0x1d52cabceebb5f42, [[406, 407, 408]]))
   Begin final coordinates
|--(1, (0x5541e36693dce0f2, [[178, 125, 126, 59, 0, 372, 33, 0, 373, 149]]))
        new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--(1, (0xdd1b26ab87a1bee3, [[137, 59, 0, 374]]))
        density =      £  __UNITDENSITY__ 
|--(1, (0x5fedf7a736e581a2, [[118, 375, 0, 149]]))
    __SYMBOLtypeA__  (alat=  £ )
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £
      £   £   £
      £   £   £
|--(1, (0x0f2743dfc67f2c9e, [[118, 376]]))
    __SYMBOLtypeA__  (crystal)
|--(4, (0xe5d9c30eed4daa4d, [[165, 0, 0, 0]]))
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__         £   £   £
    __CHEM__        £   £   £
|--(1, (0x28f30261093834d8, [[313, 407, 408]]))
   End final coordinates
|--(1, (0xc37a7d95fb9ad642, [[409, 407, 310, 315, 7, 14, 410, 411]]))
        A final scf calculation at the relaxed structure.
|--(1, (0xa193b6813f3fadb3, [[324, 256, 220, 412, 19, 14, 407, 413, 404]]))
        The G-vectors are recalculated for the final unit cell
|--(1, (0x6fe01c419ca79bbe, [[414, 415, 416, 42, 417, 7, 14, 418, 419]]))
        Results may differ from those at the preceding step.
|--(1, (0x9719f3ce768d91c7, [[106, 107]]))
        Parallelization info
|--(1, (0x9c14df160d8ebd13, [[108]]))
        --------------------
|--(1, (0xe17791a8b5d773b7, [[109, 110, 111, 112, 113, 110, 111, 114]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x792901a42b16659a, [[115, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x8470934af8c45567, [[73, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x10414de4e425a729, [[116, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(1, (0x64a6f6930071d5dd, [[117]]))
        Title: 
|--(1, (0x949982e76bc8957d, [[118]]))
         __SYMBOLtypeA__                                                               
|--(1, (0xaebda88147f7400b, [[119, 120, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x0f0d306e646bd9d9, [[121, 122, 123, 59, 0, 124]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0xa347d861f02d0452, [[125, 126, 59, 0, 127]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x0a2edf453f832244, [[74, 13, 128, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xa17314116a58668b, [[74, 13, 76, 129, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x1c92b10111d8afcd, [[74, 13, 130, 59, 0]]))
        number of electrons       =        £
|--(1, (0xfe1dff7d5e8f731f, [[74, 13, 131, 132, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x8904ff7a92a9e8a3, [[140, 141, 59, 0]]))
        mixing beta               =       £
|--(1, (0x3e812549b84d502e, [[74, 13, 142, 98, 59, 0, 143, 140]]))
        number of iterations used =            £  plain     mixing
|--(1, (0xa062e6ac514ef53b, [[144, 59, 145, 146, 147, 148, 33, 0, 0, 0, 0, 0, 0, 149]]))
        Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--(2, (0x1debd91c09d66099, [[151, 0, 152, 0, 151, 0, 152, 0, 151, 0, 152, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0x45e72eafcec24e00, [[153, 154, 155, 156, 37, 157, 13, 158]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xd6a78edb29b1d468, [[159, 0, 149, 59, 33, 0, 0, 0, 149]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0xeb12a8c3cb3669a4, [[160, 154, 155, 156, 37, 157, 161, 149]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xf11e7dc56ef85d58, [[162, 0, 149, 59, 33, 0, 0, 0, 149]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x421a7c934aea5c60, [[163, 164, 0, 19, 165, 166, 42, 167]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xed6ba457e3a463da, [[168]]))
         __FULLPATH__ 
|--(1, (0x1136aa88b0a9ee8f, [[169]]))
         __CHKSUM__ 
|--(1, (0x4f5e7a25a66d2386, [[170, 11, 171, 172, 173, 174, 175, 59, 0]]))
        Pseudo is Ultrasoft + core correction, Zval = £
|--(1, (0x00219e1e3e4f6026, [[176, 177, 178, 76, 179, 39, 180, 181, 182, 183]]))
        Generated by new atomic code, or converted to  __KWUPF__  format
|--(1, (0x328a2c559acf0ce1, [[184, 185, 186, 13, 0, 187, 0, 141, 188, 189]]))
        Using radial grid of  £ points,  £ beta functions with: 
|--(8, (0x5d6af138bcb64aa7, [[190, 0, 149, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x3059ae037ddfe99a, [[191, 192, 193, 0, 194, 195, 59, 0, 0, 0]]))
        Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                                          £   £   £
                                                          £
|--(1, (0x421a7c934aea5c60, [[163, 164, 0, 19, 165, 166, 42, 167]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xed6ba457e3a463da, [[168]]))
         __FULLPATH__ 
|--(1, (0x1136aa88b0a9ee8f, [[169]]))
         __CHKSUM__ 
|--(1, (0x4f5e7a25a66d2386, [[170, 11, 171, 172, 173, 174, 175, 59, 0]]))
        Pseudo is Ultrasoft + core correction, Zval =  £
|--(1, (0x00219e1e3e4f6026, [[176, 177, 178, 76, 179, 39, 180, 181, 182, 183]]))
        Generated by new atomic code, or converted to  __KWUPF__  format
|--(1, (0x328a2c559acf0ce1, [[184, 185, 186, 13, 0, 187, 0, 141, 188, 189]]))
        Using radial grid of  £ points,  £ beta functions with: 
|--(5, (0xa52dd43376dc0a8c, [[190, 0, 149, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x3059ae037ddfe99a, [[191, 192, 193, 0, 194, 195, 59, 0, 0, 0]]))
        Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--(1, (0x58777f4a929200b5, [[999999999]]))
                                                          £   £
|--(1, (0x7514848065f0f897, [[76, 77, 196, 197, 198]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0xc4109e5152af7554, [[165, 0, 0, 165, 33, 0, 149]]))
            __CHEM__             £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x26bc01f36fdb0038, [[0, 199, 200, 193, 201, 202]]))
        £ Sym. Ops., with inversion, found
|--(1, (0x06c3b635a2faaef7, [[203, 204, 205]]))
                                       s                        frac. trans.
|--(1, (0x172d8c086cc323bf, [[206, 59, 0, 207], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0xb99ae803f15d0115, [[206, 59, 0, 207]]))
            isym =  £     identity                                     
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(23, (0xe72a7d4f6b46e081, [[206, 59, 0, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x03c939f329da7392, [[206, 59, 0, 0, 211, 212, 213, 210, 214, 215]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x78ef0564f9d6203b, [[206, 59, 0, 216], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x05468246c6730544, [[206, 59, 0, 216]]))
            isym = £     inversion                                    
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(23, (0xc4a98207d6064e12, [[206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215], [208, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [210, 209, 0, 149, 59, 33, 0, 0, 0, 149], [33, 0, 0, 0, 149], [-1]]))
|--|--(1, (0x0e35fdc81e6e967b, [[206, 59, 0, 217, 0, 211, 212, 213, 210, 214, 215]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xdfabae7a864f6581, [[208, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x9f990eb71107d2c3, [[210, 209, 0, 149, 59, 33, 0, 0, 0, 149]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xb6282ccd75a1ace1, [[33, 0, 0, 0, 149]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(1, (0x8109533e1a7e8ace, [[218]]))
         __POINTGROUP__  
|--(1, (0x8a7f81b3d7c52775, [[219, 220, 0, 221]]))
        there are £ classes
|--(1, (0x3ad1138fe5ef2463, [[14, 222, 223]]))
        the character table:
|--(1, (0x65e8a05ff7f4f878, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224]]))
           __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--(10, (0x9f9c5ccf5c417bb8, [[225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))
    __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
    __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
    __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
    __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
    __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
    __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
    __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
    __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
    __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
    __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--(1, (0x118e0bcbc3813260, [[14, 226, 227, 37, 228, 229, 230, 14, 231, 13, 14, 232, 233]]))
        the symmetry operations in each class and the name of the first element:
|--(1, (0x6ba981ae14e5d7df, [[224, 0]]))
         __GRPSYMBOL__         £
|--(1, (0xf057c02c3d73f8b1, [[207]]))
             identity                                               
|--(1, (0xba7db3822a616024, [[224, 0, 0, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                
|--(1, (0x02160156c07fc405, [[224, 0, 0, 0]]))
         __GRPSYMBOL__       £    £    £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                   
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__       £    £   £   £   £   £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
              £ deg rotation - cart. axis  __MILLER__                  
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £    £   £   £   £    £
|--(1, (0x13f4a7a31777fd0e, [[0, 211, 212, 213, 210, 214, 215]]))
             £ deg rotation - cart. axis  __MILLER__                   
|--(1, (0x6ba981ae14e5d7df, [[224, 0]]))
         __GRPSYMBOL__        £
|--(1, (0x102a9fe42d64ff10, [[216]]))
             inversion                                              
|--(1, (0xba7db3822a616024, [[224, 0, 0, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__           
|--(1, (0x02160156c07fc405, [[224, 0, 0, 0]]))
         __GRPSYMBOL__     £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__              
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__      £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv.  £ deg rotation - cart. axis  __MILLER__             
|--(1, (0x4de013f06b4f2bca, [[224, 0, 0, 0, 0, 0, 0]]))
         __GRPSYMBOL__     £   £   £   £   £   £
|--(1, (0x53dae2281f529523, [[217, 0, 211, 212, 213, 210, 214, 215]]))
             inv. £ deg rotation - cart. axis  __MILLER__              
|--(1, (0xbd9dbb35106482ed, [[234, 235]]))
      Cartesian axes
|--(1, (0xb172c6fe60b97aff, [[236, 237, 238, 239, 240, 241]]))
        site n.     atom                  positions (alat units)
|--(4, (0x2fe7f11bfc642a74, [[0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0x34b21a67af60cb54, [[243, 235]]))
      Crystallographic axes
|--(1, (0x060160cfe593152b, [[236, 237, 238, 239, 244, 245]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0x2fe7f11bfc642a74, [[0, 165, 242, 0, 149, 59, 33, 0, 0, 0, 149]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0xc496fbb0b831bd71, [[74, 13, 246, 247, 0, 248, 249, 250, 33, 135, 152, 0]]))
        number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--(1, (0x46da021cd2aaba63, [[210, 156, 37, 157, 161]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(56, (0xfeccf1df88f949d3, [[251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x3c3f398e9a3c0940, [[208, 156]]))
                          cryst. coord.
|--(56, (0xfeccf1df88f949d3, [[251, 0, 149, 59, 33, 0, 0, 0, 252, 253, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xb2ec9a1185f6575f, [[254, 255, 0, 256, 257, 258, 259]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0xe12f73ee1c9517eb, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0xd68daa9b29867172, [[260, 263, 264, 0, 262]]))
         __QEDynRAMfor__  (w. buffer):       £ MB
|--(13, (0xe43195db95520d3b, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :      £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc44b3233140769ee, [[260, 265, 0, 262]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(3, (0x0bb3fe816546b856, [[260, 261, 0, 262]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc8c9e485adadc93e, [[266, 267, 268, 269, 93, 270, 271, 0, 262]]))
        Estimated static dynamical RAM per process >      £ MB
|--(1, (0xd93ea4fa957c5d48, [[266, 272, 268, 269, 93, 270, 271, 0, 262]]))
        Estimated max dynamical RAM per process >      £ MB
|--(1, (0x8852fb08e363253c, [[266, 273, 268, 269, 271, 0, 274]]))
        Estimated total dynamical RAM >       £ GB
|--(1, (0x17fceed9139f0211, [[275, 276, 42, 277, 13, 278, 279]]))
        Initial potential from superposition of free atoms
|--(1, (0xda24ce8f66b56be8, [[280, 136, 0, 281, 282, 181, 0]]))
        starting charge   £ , renormalised to   £
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0x8e732a2e5191edc2, [[287, 288, 220, 0, 289, 76, 288, 172, 0, 290, 288]]))
        Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
        total cpu time spent up to now is       £ secs
|--(1, (0xb6b9c0524f380228, [[297, 298]]))
        Self-consistent Calculation
|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
        iteration #  £     ecut=   £  __Ry__      beta= £
|--(8, (0x396f3a0a86ebce51, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1], [307, 308, 59, 0, 135], [309, 310, 311, 312, 0, 135], [299, 164, 0, 300, 0, 135, 301, 0], [-1]]))
|--|--(1, (0xfe316ce2c0e43a98, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [273, 306, 59, 0, 135], [-1]]))
|--|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
              Davidson diagonalization with overlap
|--|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
              ethr =  £ ,  avg # of iterations = £
|--|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
              negative rho (up, down):  £ £
|--|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
              total cpu time spent up to now is       £ secs
|--|--|--(1, (0xf7c512b7223ab19e, [[273, 306, 59, 0, 135]]))
              total energy              =    £  __Ry__ 
|--|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
           Harris-Foulkes estimate   =    £  __Ry__ 
|--|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
           estimated scf accuracy    <       £  __Ry__ 
|--|--(1, (0x7ecb115ad63d0f9e, [[299, 164, 0, 300, 0, 135, 301, 0]]))
           iteration #  £     ecut=   £  __Ry__      beta= £
|--(1, (0x469d9f1c7715deb5, [[302, 86, 193, 303], [304, 59, 0, 281, 305, 164, 13, 142, 59, 0], [283, 284, 285, 286, 0, 0], [273, 291, 292, 293, 294, 181, 295, 11, 0, 296], [313, 13, 314, 315], [-1]]))
|--|--(1, (0x3a37161a580fa9bb, [[302, 86, 193, 303]]))
           Davidson diagonalization with overlap
|--|--(1, (0x0ff9c888fbcffb27, [[304, 59, 0, 281, 305, 164, 13, 142, 59, 0]]))
           ethr =  £ ,  avg # of iterations =  £
|--|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
           negative rho (up, down):  £ £
|--|--(1, (0x91d505fa933dcd90, [[273, 291, 292, 293, 294, 181, 295, 11, 0, 296]]))
           total cpu time spent up to now is       £ secs
|--|--(1, (0x586912353f0cf125, [[313, 13, 314, 315]]))
           End of self-consistent calculation
|--(56, (0x82d0b479f2587631, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318], [999999999], [319, 320], [999999999], [-1]]))
|--|--(1, (0x544c1a05f0ce44e8, [[246, 59, 0, 0, 0, 33, 0, 316, 317, 318]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
         £ £ £ £ £ £ £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--|--(1, (0x445de862b93cc261, [[319, 320]]))
           occupation numbers 
|--|--(8, (0x06780adf52fdccb2, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £   £
           £   £   £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £  £  £  £  £  £  £
          £  £
|--(1, (0x289f0fbe9614b747, [[14, 321, 306, 11, 0, 322]]))
        the Fermi energy is     £ ev
|--(1, (0xfb90030231dd77a6, [[323, 273, 306, 59, 0, 135]]))
   !    total energy              =    £  __Ry__ 
|--(1, (0x8738b93490266831, [[307, 308, 59, 0, 135]]))
        Harris-Foulkes estimate   =    £  __Ry__ 
|--(1, (0xe3484050e7ee4120, [[309, 310, 311, 312, 0, 135]]))
        estimated scf accuracy    <          £  __Ry__ 
|--(1, (0x2baae18c2c518a43, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327]]))
        The total energy is the sum of the following terms:
|--(1, (0x7ba3fd2f8c46ac39, [[328, 329, 59, 0, 135]]))
        one-electron contribution =    £  __Ry__ 
|--(1, (0x57a45aff49b6e6f5, [[330, 329, 59, 0, 135]]))
        hartree contribution      =      £  __Ry__ 
|--(1, (0x5a206132d228cc38, [[331, 329, 59, 0, 135]]))
        xc contribution           =     £  __Ry__ 
|--(1, (0xf327b14106bfc13a, [[332, 329, 59, 0, 135]]))
        ewald contribution        =    £  __Ry__ 
|--(1, (0x324f1766652b4cdf, [[333, 334, 335, 59, 0, 135]]))
        smearing contrib. (-TS)   =      £  __Ry__ 
|--(1, (0x7fcbde114cea9f6c, [[138, 336, 337, 338, 37, 0, 142]]))
        convergence has been achieved in   £ iterations
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca9a7cbc0ab44a4a, [[339, 340, 5, 279, 341, 342, 343, 344]]))
        Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £   £
        atom    £ type  £   force =    £    £   £
        atom    £ type  £   force =    £   £    £
|--(1, (0x46a6e0a1ee4fe71e, [[324, 347]]))
        The  __QEforceKW__ 
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0x16bb550157a10cc1, [[324, 348, 349, 350, 181, 351]]))
        The  __KWSCF__  correction term to forces
|--(4, (0x63c978dd27c82d48, [[238, 0, 345, 0, 346, 59, 0, 0, 0]]))
        atom    £ type  £   force =     £    £   £
        atom    £ type  £   force =     £   £    £
        atom    £ type  £   force =    £    £    £
        atom    £ type  £   force =     £    £    £
|--(1, (0xbe1c9f52688d47a4, [[352, 346, 59, 0, 352, 348, 349, 59, 0]]))
        Total force =     £     Total  __KWSCF__  correction =     £
|--(1, (0xaa1dc7a8a4801b11, [[353, 354, 355, 356, 230, 357]]))
        Computing stress (Cartesian axis) and pressure
|--(1, (0xaea87ea6eef7bbf4, [[283, 284, 285, 286, 0, 0]]))
        negative rho (up, down):  £ £
|--(1, (0xca206ebc27bb681f, [[273, 354, 33, 358, 149, 33, 359, 149, 360, 0]]))
             total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--(3, (0xcb3e341309ff2801, [[999999999]]))
      £   £   £          £      £      £
      £   £   £          £      £      £
      £   £   £          £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £  £      £
                                   £      £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )  £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £  £     £
                                  £     £  £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )   £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £   £      £
                                   £      £   £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £      £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £ £      £
                                   £      £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ ) £     £     £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                  £ £     £
                                  £     £ £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(1, (0xe5c6974836d0c054, [[361, 33, 359, 149, 0, 0, 0]]))
         __QEstressKW__  ( __UNITkbar__ )      £      £      £
|--(2, (0xdba5e40740e05a37, [[999999999]]))
                                   £      £      £
                                   £      £      £
|--(5, (0x0b500182253be92c, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(5, (0x0b500182253be92c, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(7, (0x1c6318c65f285969, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(2, (0xa57ae57a0d8beeae, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (     £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(2, (0xa57ae57a0d8beeae, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(10, (0x80db5dcc72539675, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0xea7ebadf91ef9fc0, [[425, 177, 420]]))
        Called by  __QEelROUTINES__ 
|--(4, (0x958777d60afe1bf7, [[420, 421, 422, 421, 423, 33, 0, 424]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x0c12398be365719b, [[426, 427]]))
        General routines
|--(4, (0xb858a10c6635bd8b, [[428, 421, 422, 421, 423, 33, 0, 424]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--(1, (0xc2d52ed1a1b539c1, [[47, 427]]))
        Parallel routines
|--(2, (0x5cd523bc11d464b3, [[428, 421, 422, 421, 423, 33, 0, 424]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
|--(1, (0xdc7a7c02f6eb8724, [[420, 421, 422, 421, 423]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--(1, (0x91041b6e319fdd4a, [[9, 429, 388, 430, 431, 8, 6]]))
      This run was terminated on:   __HHMMSS__    __DATEa__             
|--(1, (0xf063a7f32559bd15, [[432]]))
   =------------------------------------------------------------------------------=
|--(1, (0x1a42ae03beb45571, [[433, 434]]))
      JOB DONE.
|--(1, (0xf063a7f32559bd15, [[432]]))
   =------------------------------------------------------------------------------=