(1, (0xe924fced62d97c97, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 0, 0, 33, 0, 34], [35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 7], [36], [47, 48, 49, 50, 5, 0, 51], [52, 53, 54, 5, 0, 55], [56, 57, 58, 59, 0], [60, 61, 62, 63, 57, 64, 59, 0], [65, 66, 19, 67, 68, 37, 69], [33, 0, 70], [71, 72, 0, 73, 72, 0, 73, 72, 0, 73], [999999999], [74, 75, 42, 76], [77], [78, 79, 80, 81, 42, 69, 82], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [85, 86, 87, 88, 89, 90, 91], [92, 93, 43, 11, 94, 95, 96, 97], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], [110, 59, 0], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [110, 59, 0], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [117, 13, 118, 59, 0, 0, 0], [-1], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 59, 0], [129, 13, 141, 142, 59, 0], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [155, 156, 14, 157, 158], [159, 160], [161, 162, 163, 164, 165, 166, 167], [0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73], [169, 170, 171, 19], [118, 59, 33, 0, 0, 0, 73], [0, 172, 173, 118, 174, 175, 73], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [9, 191, 192, 118, 174, 175], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [62, 193, 59, 0, 33, 0, 194, 195, 196, 197], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [224, 225], [226, 112, 0, 227, 228], [229, 0, 0, 230, 186, 231, 90, 232], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1], [236, 237, 238, 237, 239], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [254, 13, 255, 256], [257, 258, 259, 260], [261, 13, 118, 37, 14, 262, 59, 0], [263, 13, 118, 37, 14, 264], [999999999], [265, 14, 170, 171], [118, 59, 33, 0, 0, 0, 73], [266], [267, 33, 0, 73, 59, 0, 268, 59, 0, 269], [266], [117, 13, 118, 59, 0, 0, 0], [270, 271, 37, 272, 273, 13, 14, 274, 275], [276, 277, 278, 279, 280, 89, 90, 142], [281, 282, 283, 284, 13, 285, 0, 286, 0, 287], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], [288], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [129, 13, 289, 59, 0], [129, 13, 290, 291, 0], [133, 193, 59, 0, 135], [136, 137, 193, 59, 0, 135], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [131, 292, 293, 164, 294], [119, 0, 0, 119, 33, 0, 73], [0, 295, 296, 297, 298, 299], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [159, 160], [161, 162, 163, 165, 166, 167], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [300, 160], [161, 162, 163, 165, 301, 302], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [303, 196, 0, 304, 195, 305, 197], [306, 82, 0, 307], [306, 308, 309, 0, 307], [306, 82, 0, 307], [306, 310, 0, 307], [311, 312, 170, 313, 278, 314, 315, 0, 307], [311, 316, 170, 313, 278, 314, 315, 0, 307], [311, 246, 170, 313, 315, 0, 307], [317, 318, 11, 319, 42, 320, 82], [77], [321, 322, 112, 0, 131, 322], [323, 324, 117], [325, 271, 297, 326], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [333, 59, 0, 334, 335, 116, 13, 141, 59, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [254, 13, 279, 336, 256], [198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1], [14, 242, 243, 11, 0, 342], [343, 344, 75, 320, 77], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 59, 0], [129, 13, 141, 142, 59, 0], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [155, 156, 14, 157, 158], [159, 160], [161, 162, 163, 164, 165, 166, 167], [0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73], [169, 170, 171, 19], [118, 59, 33, 0, 0, 0, 73], [0, 172, 173, 118, 174, 175, 73], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [9, 191, 192, 118, 174, 175], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [62, 193, 59, 0, 33, 0, 194, 195, 196, 197], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [224, 225], [226, 112, 0, 227, 228], [229, 0, 0, 230, 186, 231, 90, 232], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1], [236, 237, 238, 237, 239], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [261, 13, 118, 37, 14, 262, 59, 0], [263, 13, 118, 37, 14, 264], [999999999], [265, 14, 170, 171], [118, 59, 33, 0, 0, 0, 73], [266], [267, 33, 0, 73, 59, 0, 268, 59, 0, 269], [266], [117, 13, 118, 59, 0, 0, 0], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], [288], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [129, 13, 289, 59, 0], [129, 13, 290, 291, 0], [133, 193, 59, 0, 135], [136, 137, 193, 59, 0, 135], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [131, 292, 293, 164, 294], [119, 0, 0, 119, 33, 0, 73], [0, 295, 296, 297, 298, 299], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [159, 160], [161, 162, 163, 165, 166, 167], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [300, 160], [161, 162, 163, 165, 301, 302], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [303, 196, 0, 304, 195, 305, 197], [306, 82, 0, 307], [306, 308, 309, 0, 307], [306, 82, 0, 307], [306, 310, 0, 307], [311, 312, 170, 313, 278, 314, 315, 0, 307], [311, 316, 170, 313, 278, 314, 315, 0, 307], [311, 246, 170, 313, 315, 0, 307], [317, 318, 11, 319, 42, 320, 82], [77], [321, 322, 112, 0, 131, 322], [323, 324, 117], [325, 271, 297, 326], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [333, 59, 0, 334, 335, 116, 13, 141, 59, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [254, 13, 279, 336, 256], [198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1], [14, 242, 243, 11, 0, 342], [343, 344, 75, 320, 77], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 59, 0], [129, 13, 141, 142, 59, 0], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [155, 156, 14, 157, 158], [159, 160], [161, 162, 163, 164, 165, 166, 167], [0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73], [169, 170, 171, 19], [118, 59, 33, 0, 0, 0, 73], [0, 172, 173, 118, 174, 175, 73], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [9, 191, 192, 118, 174, 175], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [62, 193, 59, 0, 33, 0, 194, 195, 196, 197], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [224, 225], [226, 112, 0, 227, 228], [229, 0, 0, 230, 186, 231, 90, 232], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1], [236, 237, 238, 237, 239], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [261, 13, 118, 37, 14, 262, 59, 0], [263, 13, 118, 37, 14, 264], [999999999], [265, 14, 170, 171], [118, 59, 33, 0, 0, 0, 73], [266], [267, 33, 0, 73, 59, 0, 268, 59, 0, 269], [266], [117, 13, 118, 59, 0, 0, 0], [98, 99], [100], [101, 102, 103, 104, 105, 102, 103, 106], [107, 0, 0, 0, 0, 0, 0], [108, 0, 0, 0, 0, 0, 0], [109, 0, 0, 0, 0, 0, 0], [288], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [129, 13, 289, 59, 0], [129, 13, 290, 291, 0], [133, 193, 59, 0, 135], [136, 137, 193, 59, 0, 135], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [131, 292, 293, 164, 294], [119, 0, 0, 119, 33, 0, 73], [0, 295, 296, 297, 298, 299], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [159, 160], [161, 162, 163, 165, 166, 167], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [300, 160], [161, 162, 163, 165, 301, 302], [0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [303, 196, 0, 304, 195, 305, 197], [306, 82, 0, 307], [306, 308, 309, 0, 307], [306, 82, 0, 307], [306, 310, 0, 307], [311, 312, 170, 313, 278, 314, 315, 0, 307], [311, 316, 170, 313, 278, 314, 315, 0, 307], [311, 246, 170, 313, 315, 0, 307], [317, 318, 11, 319, 42, 320, 82], [77], [321, 322, 112, 0, 131, 322], [323, 324, 117], [325, 271, 297, 326], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [169, 327, 328, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [333, 59, 0, 334, 335, 116, 13, 141, 59, 0], [246, 247, 248, 329, 330, 331, 332, 11, 0, 249], [254, 13, 279, 336, 256], [198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1], [14, 242, 243, 11, 0, 342], [343, 344, 75, 320, 77], [119], [120, 121, 59, 0], [122, 123, 124, 59, 0, 125], [126, 127, 59, 0, 128], [129, 13, 130, 59, 0], [129, 13, 131, 132, 59, 0], [133, 134, 59, 0, 135], [136, 137, 134, 59, 0, 135], [138, 139, 59, 0], [140, 59, 0], [129, 13, 141, 142, 59, 0], [83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73], [143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0], [145, 146, 147, 148, 37, 149, 13, 150], [151, 0, 73, 59, 33, 0, 0, 0, 73], [152, 146, 147, 148, 37, 149, 153, 73], [154, 0, 73, 59, 33, 0, 0, 0, 73], [155, 156, 14, 157, 158], [159, 160], [161, 162, 163, 164, 165, 166, 167], [0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73], [169, 170, 171, 19], [118, 59, 33, 0, 0, 0, 73], [0, 172, 173, 118, 174, 175, 73], [176, 177, 178], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [9, 191, 192, 118, 174, 175], [179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1], [62, 193, 59, 0, 33, 0, 194, 195, 196, 197], [129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0], [183, 148, 37, 149, 153], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [181, 148], [203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [206, 116, 0, 19, 119, 207, 42, 208], [77], [209], [210, 11, 211, 212, 59, 0], [213, 37, 214, 215, 216], [217, 218, 219, 13, 0, 220, 0, 140, 221, 222], [223, 0, 73, 59, 0], [224, 225], [226, 112, 0, 227, 228], [229, 0, 0, 230, 186, 231, 90, 232], [111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1], [111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1], [236, 237, 238, 237, 239], [229, 116, 0, 115, 116, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [229, 116, 0, 230, 116, 0, 0, 0], [240, 117], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1], [254, 13, 255, 256], [257, 258, 259, 260], [261, 13, 118, 37, 14, 262, 59, 0], [263, 13, 118, 37, 14, 264], [999999999], [265, 14, 170, 171], [118, 59, 33, 0, 0, 0, 73], [266], [267, 33, 0, 73, 59, 0, 268, 59, 0, 269], [266], [345, 237, 238, 237, 239, 33, 0, 346], [347, 348, 345], [345, 237, 238, 237, 239, 33, 0, 346], [347, 348, 345], [345, 237, 238, 237, 239, 33, 0, 346], [347, 348, 345], [345, 237, 238, 237, 239, 33, 0, 346], [347, 348, 345], [345, 237, 238, 237, 239, 33, 0, 346], [347, 348, 345], [345, 237, 238, 237, 239, 33, 0, 346], [349, 350], [351, 237, 238, 237, 239, 33, 0, 346], [47, 350], [351, 237, 238, 237, 239, 33, 0, 346], [236, 237, 238, 237, 239], [352], [236, 237, 238, 237, 239, 33, 0, 346], [353, 354], [236, 237, 238, 237, 239, 33, 0, 346], [355, 345, 237, 238, 237, 239, 33, 0, 346], [345, 237, 238, 237, 239, 33, 0, 346], [236, 237, 238, 237, 239, 33, 0, 346], [345, 237, 238, 237, 239, 33, 0, 346], [236, 237, 238, 237, 239, 33, 0, 346], [349, 350], [351, 237, 238, 237, 239, 33, 0, 346], [236, 237, 238, 237, 239], [9, 356, 357, 358, 359, 8, 6], [360], [361, 362], [360], [-1]]))
|--(1, (0x8e457d5d2baf2866, [[1, 2, 3, 4, 5, 6, 7, 8]]))
        Program  __KWPHONON__   __VERSIONa__  starts on  __DATEa__  at   __HHMMSS__  
|--(1, (0x5dfa1ff9d042ed20, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]))
        This program is part of the open-source Quantum ESPRESSO suite
|--(1, (0x76401a8ca73f4295, [[19, 20, 21, 13, 22, 23, 24]]))
        for quantum simulation of materials; please cite
|--(2, (0xac1ab2911d0b16d5, [[25, 26, 27, 28, 29, 30, 31, 0, 0, 33, 0, 34]]))
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--(1, (0xa590e97affe9bc88, [[35, 36]]))
             URL  __URL__  
|--(1, (0x49e67ae9163446b0, [[37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 7]]))
        in publications or presentations arising from this work. More details at
|--(1, (0xc643afc1a364cf02, [[36]]))
         __URL__ 
|--(1, (0x2a922e56b950bee8, [[47, 48, 49, 50, 5, 0, 51]]))
        Parallel version (MPI), running on    £ processors
|--(1, (0x3205822595232858, [[52, 53, 54, 5, 0, 55]]))
        MPI processes distributed on     £ nodes
|--(1, (0x1ea522825c53c190, [[56, 57, 58, 59, 0]]))
        K-points division:     npool     =       £
|--(1, (0x27225415eea38edd, [[60, 61, 62, 63, 57, 64, 59, 0]]))
        R & G space division:  proc/nbgrp/npool/nimage =       £
|--(1, (0xc577cd92c31b9065, [[65, 66, 19, 67, 68, 37, 69]]))
        Dynamical matrices for q-points given in input
|--(1, (0x1577d32fa535a084, [[33, 0, 70]]))
        (   £ q-points):
|--(1, (0xb4b73803b909c4bc, [[71, 72, 0, 73, 72, 0, 73, 72, 0, 73]]))
          NUM          xq( £ )         xq( £ )         xq( £ ) 
|--(4, (0x390eb0b412c4b370, [[999999999]]))
          £   £   £   £
          £   £   £   £
          £   £   £   £
          £   £   £   £
|--(1, (0xf68802bff06c0955, [[74, 75, 42, 76]]))
        Reading data from directory:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0xacffc1b2e3f69089, [[78, 79, 80, 81, 42, 69, 82]]))
        IMPORTANT: XC functional enforced from input :
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(1, (0x5d75237da96a75bb, [[85, 86, 87, 88, 89, 90, 91]]))
        Any further DFT definition will be discarded
|--(1, (0x65f55bd01ae083a0, [[92, 93, 43, 11, 94, 95, 96, 97]]))
        Please, verify this is what you really want
|--(1, (0x1ee4ae78cd8d8a62, [[98, 99]]))
        Parallelization info
|--(1, (0x1a0a102a332bd1da, [[100]]))
        --------------------
|--(1, (0xb992bb55e0d34835, [[101, 102, 103, 104, 105, 102, 103, 106]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x5caf6a619b28e4aa, [[107, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x27a4fa173bf25e4a, [[108, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x1fedc0583762e740, [[109, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(1, (0x6ee9c2f3848b13d2, [[110, 59, 0]]))
     autoval = £
|--(47, (0x949b6e323b8aee23, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [110, 59, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--(1, (0x6ee9c2f3848b13d2, [[110, 59, 0]]))
        autoval = £
|--(1, (0x6f1dc7dbc5e0ebcd, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [117, 13, 118, 59, 0, 0, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #  £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--(1, (0x0fbf88bd7a99379a, [[117, 13, 118, 59, 0, 0, 0]]))
           Calculation of q =    £   £   £
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x2b82628281f6fa93, [[140, 59, 0]]))
        beta                      =       £
|--(1, (0x52f9514e7dbf54a3, [[129, 13, 141, 142, 59, 0]]))
        number of iterations used =            £
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xb3417b382f927fab, [[155, 156, 14, 157, 158]]))
        Atoms inside the unit cell: 
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
        Cartesian axes
|--(1, (0xa1cf4e0273512fe1, [[161, 162, 163, 164, 165, 166, 167]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x6ed1b16cb0d67c18, [[0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x14d3aacf3495a631, [[169, 170, 171, 19]]))
        Computing dynamical matrix for 
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
                       q = (   £   £   £ )
|--(1, (0x2f1a7f14642eec63, [[0, 172, 173, 118, 174, 175, 73]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0x2fa918e78419d3c4, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0xb25acb94bfbfba51, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x13f95607cda30a1d, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x259677653fdb09c6, [[9, 191, 192, 118, 174, 175]]))
        This transformation sends q -> -q+G
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym = £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x7f70346687d73eed, [[62, 193, 59, 0, 33, 0, 194, 195, 196, 197]]))
        G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(20, (0x4b28fa86f7af97fe, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(20, (0x4b28fa86f7af97fe, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0xd6b9c73b9338ca99, [[224, 225]]))
        Atomic displacements:
|--(1, (0x963877b786eca87c, [[226, 112, 0, 227, 228]]))
        There are   £ irreducible representations
|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
        Representation     £      £ modes -  To be done
|--(3, (0x123618ea79d225f1, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0xe263359f4842c086, [[115, 116, 0, 115, 116, 0, 115, 116, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x719fc337b730d484, [[33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73]]))
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0xdf04f23c80e49d05, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0xe263359f4842c086, [[115, 116, 0, 115, 116, 0, 115, 116, 0]]))
           mode #  £              mode #  £              mode #  £
|--|--(12, (0x719fc337b730d484, [[33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73]]))
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (   £   £ ) 
           (   £  £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
|--|--(1, (0x345affaed60d9a29, [[233, 142, 37, 234, 235, 59, 0]]))
           Alpha used in Ewald sum =   £
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :     £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :     £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :     £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :     £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :     £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #  £ £ £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x9adfdfbe2ac403b4, [[241, 116, 0, 82, 242, 243, 244, 33, 135, 73, 59, 0, 0]]))
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
        Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x53713bc497779f17, [[261, 13, 118, 37, 14, 262, 59, 0]]))
        Number of q in the star =    £
|--(1, (0x48ef3ad0157fd309, [[263, 13, 118, 37, 14, 264]]))
        List of q in the star:
|--(1, (0x58777f4a929200b5, [[999999999]]))
             £   £   £   £
|--(1, (0xc5c9b4948d6399d5, [[265, 14, 170, 171]]))
        Diagonalizing the dynamical matrix
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
        q = (    £   £   £ ) 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(12, (0x59a7983d462ccd11, [[267, 33, 0, 73, 59, 0, 268, 59, 0, 269]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(1, (0x0fbf88bd7a99379a, [[117, 13, 118, 59, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0x965f20a8e80f156b, [[270, 271, 37, 272, 273, 13, 14, 274, 275]]))
        Subspace diagonalization in iterative solution of the eigenvalue problem:
|--(1, (0xf9a6a754351c8422, [[276, 277, 278, 279, 280, 89, 90, 142]]))
        one sub-group per band group will be used
|--(1, (0x5f296a9d612723aa, [[281, 282, 283, 284, 13, 285, 0, 286, 0, 287]]))
        scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--(1, (0x1ee4ae78cd8d8a62, [[98, 99]]))
        Parallelization info
|--(1, (0x1a0a102a332bd1da, [[100]]))
        --------------------
|--(1, (0xb992bb55e0d34835, [[101, 102, 103, 104, 105, 102, 103, 106]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x5caf6a619b28e4aa, [[107, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x27a4fa173bf25e4a, [[108, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x1fedc0583762e740, [[109, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(1, (0xe93e08061084d822, [[288]]))
        Title: 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0xa6841048c9ad9636, [[129, 13, 289, 59, 0]]))
        number of electrons       =        £
|--(1, (0x6d70a01f13320529, [[129, 13, 290, 291, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x2fe11f6a59129f83, [[133, 193, 59, 0, 135]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0x1261e47e812469aa, [[136, 137, 193, 59, 0, 135]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0x4651367d8cde8aa2, [[131, 292, 293, 164, 294]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x63b67a5a1e3e45d0, [[119, 0, 0, 119, 33, 0, 73]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x4da609097e52a1a4, [[0, 295, 296, 297, 298, 299]]))
        £ Sym. Ops., with inversion, found
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(3, (0x82188479be6baacc, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0xb94cdfc270dce161, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(4, (0x8432fbf8100954db, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £         £      )
                        (     £         £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £ £ )
                        (  £ £  £ )
|--(12, (0xe999dade229f65e9, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__      
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(8, (0x047d7c9c5f4bbeaf, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £         £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (    £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £ £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        ( £  £  £ )
                        (  £  £  £ )
|--(4, (0xb94cdfc270dce161, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(8, (0x047d7c9c5f4bbeaf, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__ 
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (    £          £          £      )
                        (     £         £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £ £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £ £ )
                        ( £  £  £ )
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
      Cartesian axes
|--(1, (0x990c01846a460291, [[161, 162, 163, 165, 166, 167]]))
        site n.     atom                  positions (alat units)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0xe34ae341895b6c93, [[300, 160]]))
      Crystallographic axes
|--(1, (0x301386820ebb3cd9, [[161, 162, 163, 165, 301, 302]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x707b20e68d708cdb, [[303, 196, 0, 304, 195, 305, 197]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x8c1d1b85731ad436, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc42945e93d66c6d5, [[306, 308, 309, 0, 307]]))
         __QEDynRAMfor__  (w. buffer):       £ MB
|--(10, (0x8deb256168f99e26, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x6de868f55dd2b19e, [[306, 310, 0, 307]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0xaf7bb6397f0ccaaf, [[311, 312, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0x3242b549969eddb0, [[311, 316, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0xaf6f17840d5ae347, [[311, 246, 170, 313, 315, 0, 307]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0xb169c8ba947b9807, [[317, 318, 11, 319, 42, 320, 82]]))
        The potential is recalculated from file :
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x36bd21f9117f020a, [[321, 322, 112, 0, 131, 322]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0x1318874ded0496a3, [[323, 324, 117]]))
        Band Structure Calculation
|--(1, (0x4b4bfb71256ac834, [[325, 271, 297, 326]]))
        Davidson diagonalization with overlap
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:    £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x62a80e570c8a5e5a, [[333, 59, 0, 334, 335, 116, 13, 141, 59, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x24830b52f858c364, [[254, 13, 279, 336, 256]]))
        End of band structure calculation
|--(80, (0x2ba73b03ec6c175e, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1]]))
|--|--(1, (0x0229efa46f22ed4e, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x2c7a262e99922332, [[340, 341]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8e83aa244140d61f, [[14, 242, 243, 11, 0, 342]]))
        the Fermi energy is     £ ev
|--(1, (0x76ce68903a88fc21, [[343, 344, 75, 320, 77]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x2b82628281f6fa93, [[140, 59, 0]]))
        beta                      =       £
|--(1, (0x52f9514e7dbf54a3, [[129, 13, 141, 142, 59, 0]]))
        number of iterations used =            £
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xb3417b382f927fab, [[155, 156, 14, 157, 158]]))
        Atoms inside the unit cell: 
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
        Cartesian axes
|--(1, (0xa1cf4e0273512fe1, [[161, 162, 163, 164, 165, 166, 167]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x6ed1b16cb0d67c18, [[0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x14d3aacf3495a631, [[169, 170, 171, 19]]))
        Computing dynamical matrix for 
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
                       q = (   £   £   £ )
|--(1, (0x2f1a7f14642eec63, [[0, 172, 173, 118, 174, 175, 73]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(3, (0x82188479be6baacc, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0xb94cdfc270dce161, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(4, (0x8432fbf8100954db, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £         £      )
                        (     £         £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £ £ )
                        (  £ £  £ )
|--(1, (0x259677653fdb09c6, [[9, 191, 192, 118, 174, 175]]))
        This transformation sends q -> -q+G
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym = £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x7f70346687d73eed, [[62, 193, 59, 0, 33, 0, 194, 195, 196, 197]]))
        G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0xd6b9c73b9338ca99, [[224, 225]]))
        Atomic displacements:
|--(1, (0x963877b786eca87c, [[226, 112, 0, 227, 228]]))
        There are   £ irreducible representations
|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
        Representation     £      £ modes -  To be done
|--(1, (0x1894331ea6578828, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x395bb633e8ec2a86, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(2, (0x5e346e5f451b4ced, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(2, (0xf10c0f3cddd05b7d, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x1894331ea6578828, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #  £                           mode #  £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x3bf82b746784b399, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #  £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x345affaed60d9a29, [[233, 142, 37, 234, 235, 59, 0]]))
           Alpha used in Ewald sum =   £
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(4, (0xde725f677753bfd5, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x0c78b6757f7f34e4, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(4, (0xde725f677753bfd5, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #  £ £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(4, (0xde725f677753bfd5, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x53713bc497779f17, [[261, 13, 118, 37, 14, 262, 59, 0]]))
        Number of q in the star =    £
|--(1, (0x48ef3ad0157fd309, [[263, 13, 118, 37, 14, 264]]))
        List of q in the star:
|--(3, (0xcb3e341309ff2801, [[999999999]]))
             £   £   £   £
             £   £   £   £
             £   £   £   £
|--(1, (0xc5c9b4948d6399d5, [[265, 14, 170, 171]]))
        Diagonalizing the dynamical matrix
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
        q = (    £   £   £ ) 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(12, (0x59a7983d462ccd11, [[267, 33, 0, 73, 59, 0, 268, 59, 0, 269]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(1, (0x0fbf88bd7a99379a, [[117, 13, 118, 59, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0x1ee4ae78cd8d8a62, [[98, 99]]))
        Parallelization info
|--(1, (0x1a0a102a332bd1da, [[100]]))
        --------------------
|--(1, (0xb992bb55e0d34835, [[101, 102, 103, 104, 105, 102, 103, 106]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x5caf6a619b28e4aa, [[107, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x27a4fa173bf25e4a, [[108, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x1fedc0583762e740, [[109, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £   £
|--(1, (0xe93e08061084d822, [[288]]))
        Title: 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0xa6841048c9ad9636, [[129, 13, 289, 59, 0]]))
        number of electrons       =        £
|--(1, (0x6d70a01f13320529, [[129, 13, 290, 291, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x2fe11f6a59129f83, [[133, 193, 59, 0, 135]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0x1261e47e812469aa, [[136, 137, 193, 59, 0, 135]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0x4651367d8cde8aa2, [[131, 292, 293, 164, 294]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x63b67a5a1e3e45d0, [[119, 0, 0, 119, 33, 0, 73]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x4da609097e52a1a4, [[0, 295, 296, 297, 298, 299]]))
        £ Sym. Ops., with inversion, found
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0x2fa918e78419d3c4, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0xb25acb94bfbfba51, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x13f95607cda30a1d, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
      Cartesian axes
|--(1, (0x990c01846a460291, [[161, 162, 163, 165, 166, 167]]))
        site n.     atom                  positions (alat units)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0xe34ae341895b6c93, [[300, 160]]))
      Crystallographic axes
|--(1, (0x301386820ebb3cd9, [[161, 162, 163, 165, 301, 302]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x707b20e68d708cdb, [[303, 196, 0, 304, 195, 305, 197]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x8c1d1b85731ad436, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc42945e93d66c6d5, [[306, 308, 309, 0, 307]]))
         __QEDynRAMfor__  (w. buffer):       £ MB
|--(10, (0x8deb256168f99e26, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x6de868f55dd2b19e, [[306, 310, 0, 307]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0xaf7bb6397f0ccaaf, [[311, 312, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0x3242b549969eddb0, [[311, 316, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0xaf6f17840d5ae347, [[311, 246, 170, 313, 315, 0, 307]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0xb169c8ba947b9807, [[317, 318, 11, 319, 42, 320, 82]]))
        The potential is recalculated from file :
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x36bd21f9117f020a, [[321, 322, 112, 0, 131, 322]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0x1318874ded0496a3, [[323, 324, 117]]))
        Band Structure Calculation
|--(1, (0x4b4bfb71256ac834, [[325, 271, 297, 326]]))
        Davidson diagonalization with overlap
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:    £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x62a80e570c8a5e5a, [[333, 59, 0, 334, 335, 116, 13, 141, 59, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x24830b52f858c364, [[254, 13, 279, 336, 256]]))
        End of band structure calculation
|--(80, (0x2ba73b03ec6c175e, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1]]))
|--|--(1, (0x0229efa46f22ed4e, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x2c7a262e99922332, [[340, 341]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8e83aa244140d61f, [[14, 242, 243, 11, 0, 342]]))
        the Fermi energy is     £ ev
|--(1, (0x76ce68903a88fc21, [[343, 344, 75, 320, 77]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x2b82628281f6fa93, [[140, 59, 0]]))
        beta                      =       £
|--(1, (0x52f9514e7dbf54a3, [[129, 13, 141, 142, 59, 0]]))
        number of iterations used =            £
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xb3417b382f927fab, [[155, 156, 14, 157, 158]]))
        Atoms inside the unit cell: 
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
        Cartesian axes
|--(1, (0xa1cf4e0273512fe1, [[161, 162, 163, 164, 165, 166, 167]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x6ed1b16cb0d67c18, [[0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x14d3aacf3495a631, [[169, 170, 171, 19]]))
        Computing dynamical matrix for 
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
                       q = (   £   £   £ )
|--(1, (0x2f1a7f14642eec63, [[0, 172, 173, 118, 174, 175, 73]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0x2fa918e78419d3c4, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0xb94cdfc270dce161, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(1, (0x259677653fdb09c6, [[9, 191, 192, 118, 174, 175]]))
        This transformation sends q -> -q+G
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym = £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x7f70346687d73eed, [[62, 193, 59, 0, 33, 0, 194, 195, 196, 197]]))
        G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(80, (0x5452a54adc17e83c, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0xd6b9c73b9338ca99, [[224, 225]]))
        Atomic displacements:
|--(1, (0x963877b786eca87c, [[226, 112, 0, 227, 228]]))
        There are   £ irreducible representations
|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
        Representation     £      £ modes -  To be done
|--(1, (0x395bb633e8ec2a86, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x1894331ea6578828, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(3, (0x812a4ade8ce8780c, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x1894331ea6578828, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(2, (0xf10c0f3cddd05b7d, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x51818484b4d8ecf0, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #  £                           mode #  £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--|--(1, (0x345affaed60d9a29, [[233, 142, 37, 234, 235, 59, 0]]))
           Alpha used in Ewald sum =   £
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x0c78b6757f7f34e4, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:  £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(4, (0xde725f677753bfd5, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #  £ £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(4, (0xde725f677753bfd5, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x53713bc497779f17, [[261, 13, 118, 37, 14, 262, 59, 0]]))
        Number of q in the star =    £
|--(1, (0x48ef3ad0157fd309, [[263, 13, 118, 37, 14, 264]]))
        List of q in the star:
|--(3, (0xcb3e341309ff2801, [[999999999]]))
             £   £   £   £
             £   £   £   £
             £   £   £   £
|--(1, (0xc5c9b4948d6399d5, [[265, 14, 170, 171]]))
        Diagonalizing the dynamical matrix
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
        q = (    £   £   £ ) 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(12, (0x59a7983d462ccd11, [[267, 33, 0, 73, 59, 0, 268, 59, 0, 269]]))
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(1, (0x0fbf88bd7a99379a, [[117, 13, 118, 59, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0x1ee4ae78cd8d8a62, [[98, 99]]))
        Parallelization info
|--(1, (0x1a0a102a332bd1da, [[100]]))
        --------------------
|--(1, (0xb992bb55e0d34835, [[101, 102, 103, 104, 105, 102, 103, 106]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0x5caf6a619b28e4aa, [[107, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x27a4fa173bf25e4a, [[108, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0x1fedc0583762e740, [[109, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £   £
|--(1, (0xe93e08061084d822, [[288]]))
        Title: 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0xa6841048c9ad9636, [[129, 13, 289, 59, 0]]))
        number of electrons       =        £
|--(1, (0x6d70a01f13320529, [[129, 13, 290, 291, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x2fe11f6a59129f83, [[133, 193, 59, 0, 135]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0x1261e47e812469aa, [[136, 137, 193, 59, 0, 135]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0x4651367d8cde8aa2, [[131, 292, 293, 164, 294]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x63b67a5a1e3e45d0, [[119, 0, 0, 119, 33, 0, 73]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x4da609097e52a1a4, [[0, 295, 296, 297, 298, 299]]))
        £ Sym. Ops., with inversion, found
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0x2fa918e78419d3c4, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0xb25acb94bfbfba51, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x13f95607cda30a1d, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
      Cartesian axes
|--(1, (0x990c01846a460291, [[161, 162, 163, 165, 166, 167]]))
        site n.     atom                  positions (alat units)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0xe34ae341895b6c93, [[300, 160]]))
      Crystallographic axes
|--(1, (0x301386820ebb3cd9, [[161, 162, 163, 165, 301, 302]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xf49eca5a76992905, [[0, 119, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(40, (0x029c0372b4881bb6, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(40, (0x029c0372b4881bb6, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x707b20e68d708cdb, [[303, 196, 0, 304, 195, 305, 197]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x8c1d1b85731ad436, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc42945e93d66c6d5, [[306, 308, 309, 0, 307]]))
         __QEDynRAMfor__  (w. buffer):       £ MB
|--(10, (0x8deb256168f99e26, [[306, 82, 0, 307]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x6de868f55dd2b19e, [[306, 310, 0, 307]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0xaf7bb6397f0ccaaf, [[311, 312, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0x3242b549969eddb0, [[311, 316, 170, 313, 278, 314, 315, 0, 307]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0xaf6f17840d5ae347, [[311, 246, 170, 313, 315, 0, 307]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0xb169c8ba947b9807, [[317, 318, 11, 319, 42, 320, 82]]))
        The potential is recalculated from file :
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x36bd21f9117f020a, [[321, 322, 112, 0, 131, 322]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0x1318874ded0496a3, [[323, 324, 117]]))
        Band Structure Calculation
|--(1, (0x4b4bfb71256ac834, [[325, 271, 297, 326]]))
        Davidson diagonalization with overlap
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x08ad50385fc18dd1, [[169, 327, 328, 0]]))
        Computing kpt #:     £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x62a80e570c8a5e5a, [[333, 59, 0, 334, 335, 116, 13, 141, 59, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0xe90edaf15c62be38, [[246, 247, 248, 329, 330, 331, 332, 11, 0, 249]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x24830b52f858c364, [[254, 13, 279, 336, 256]]))
        End of band structure calculation
|--(40, (0x89732b866f995933, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339], [999999999], [340, 341], [999999999], [-1]]))
|--|--(1, (0x0229efa46f22ed4e, [[198, 59, 0, 0, 0, 33, 0, 337, 338, 339]]))
                k = £ £ £ (  £ PWs)   bands (ev):
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x2c7a262e99922332, [[340, 341]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8e83aa244140d61f, [[14, 242, 243, 11, 0, 342]]))
        the Fermi energy is     £ ev
|--(1, (0x76ce68903a88fc21, [[343, 344, 75, 320, 77]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __CHEM__                                                                        
|--(1, (0xa81d4739091bedf7, [[120, 121, 59, 0]]))
        bravais-lattice index     =            £
|--(1, (0x227269a5d2a1c7b6, [[122, 123, 124, 59, 0, 125]]))
        lattice parameter (alat)  =       £   __au__ 
|--(1, (0x1686021ed35f61d3, [[126, 127, 59, 0, 128]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x665fb108f5a59383, [[129, 13, 130, 59, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc95988adc5510cd6, [[129, 13, 131, 132, 59, 0]]))
        number of atomic types    =            £
|--(1, (0x148da8464c098a61, [[133, 134, 59, 0, 135]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0x58a982881b553154, [[136, 137, 134, 59, 0, 135]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0x7279730e92fb01d3, [[138, 139, 59, 0]]))
        convergence threshold     =      £
|--(1, (0x2b82628281f6fa93, [[140, 59, 0]]))
        beta                      =       £
|--(1, (0x52f9514e7dbf54a3, [[129, 13, 141, 142, 59, 0]]))
        number of iterations used =            £
|--(1, (0x0d9660b735685643, [[83, 59, 84, 33, 0, 0, 0, 0, 0, 0, 73]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x76a96a12513d99a3, [[143, 0, 144, 0, 143, 0, 144, 0, 143, 0, 144, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xaeb95e387ec234bd, [[145, 146, 147, 148, 37, 149, 13, 150]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xbdc1a8a0bb0ce149, [[151, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0x0ccf14fff06bdf4e, [[152, 146, 147, 148, 37, 149, 153, 73]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0xe0bfc52f91957946, [[154, 0, 73, 59, 33, 0, 0, 0, 73]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xb3417b382f927fab, [[155, 156, 14, 157, 158]]))
        Atoms inside the unit cell: 
|--(1, (0x47ea1c17cb3c0ddb, [[159, 160]]))
        Cartesian axes
|--(1, (0xa1cf4e0273512fe1, [[161, 162, 163, 164, 165, 166, 167]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x6ed1b16cb0d67c18, [[0, 119, 0, 168, 0, 73, 59, 33, 0, 0, 0, 73]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x14d3aacf3495a631, [[169, 170, 171, 19]]))
        Computing dynamical matrix for 
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
                       q = (   £   £   £ )
|--(1, (0x2f1a7f14642eec63, [[0, 172, 173, 118, 174, 175, 73]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0xc619dd5c61cde670, [[176, 177, 178]]))
                                       s                        frac. trans.
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym =  £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xeb56c03d0809f083, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x73946b52272b1ae7, [[179, 59, 0, 189], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xf7f03ceffb9eab0b, [[179, 59, 0, 189]]))
            isym =  £     inversion                                    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0x2fa918e78419d3c4, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0xb25acb94bfbfba51, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x9d04854957b37cdf, [[179, 59, 0, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x13f95607cda30a1d, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0x6bdfe4b39fd4d847, [[179, 59, 0, 190, 0, 184, 185, 186, 183, 187, 188]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x259677653fdb09c6, [[9, 191, 192, 118, 174, 175]]))
        This transformation sends q -> -q+G
|--(1, (0x1bd3c91a343949d3, [[179, 59, 0, 180], [181, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [183, 182, 0, 73, 59, 33, 0, 0, 0, 73], [33, 0, 0, 0, 73], [-1]]))
|--|--(1, (0xaacc6f94cb153059, [[179, 59, 0, 180]]))
            isym = £     identity                                     
|--|--(1, (0xa4f670a80c0be21a, [[181, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0x25fe09c498f96ce9, [[183, 182, 0, 73, 59, 33, 0, 0, 0, 73]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0x88d961a03dbb219a, [[33, 0, 0, 0, 73]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x7f70346687d73eed, [[62, 193, 59, 0, 33, 0, 194, 195, 196, 197]]))
        G cutoff =  £  (   £ G-vectors)     FFT grid:  __THREETUPLES__ 
|--(1, (0x0600e4ec3a915682, [[129, 13, 198, 199, 0, 200, 201, 202, 33, 135, 144, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xa3cee6d6748f7cb8, [[183, 148, 37, 149, 153]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(40, (0x029c0372b4881bb6, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xc5cc5749b6b194d7, [[181, 148]]))
                          cryst. coord.
|--(40, (0x029c0372b4881bb6, [[203, 0, 73, 59, 33, 0, 0, 0, 204, 205, 59, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0x93756791222595c5, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0x93b5becfe20825ec, [[206, 116, 0, 19, 119, 207, 42, 208]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0x56e85241330661d1, [[77]]))
         __FULLPATH__ 
|--(1, (0x7d9928ece22d7410, [[209]]))
         __CHKSUM__ 
|--(1, (0x0345969ec8992867, [[210, 11, 211, 212, 59, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x22f5ecf5252df19e, [[213, 37, 214, 215, 216]]))
        Generated in analytical, separable form
|--(1, (0x900cfdeb09c46671, [[217, 218, 219, 13, 0, 220, 0, 140, 221, 222]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x5caa675464bb4173, [[223, 0, 73, 59, 0]]))
                   l( £ ) =   £
|--(1, (0xd6b9c73b9338ca99, [[224, 225]]))
        Atomic displacements:
|--(1, (0x963877b786eca87c, [[226, 112, 0, 227, 228]]))
        There are   £ irreducible representations
|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
        Representation     £      £ modes -  To be done
|--(1, (0x395bb633e8ec2a86, [[111, 112, 113, 114], [115, 116, 0], [33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x1eb3a3a77a5f2914, [[115, 116, 0]]))
                           mode #   £
|--|--(12, (0xa78e62dbd51d31dc, [[33, 0, 0, 73]]))
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(2, (0x9fbb7a20b0cece04, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0xe263359f4842c086, [[115, 116, 0, 115, 116, 0, 115, 116, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x719fc337b730d484, [[33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73]]))
           (   £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £   £ ) (   £   £ ) 
           (  £  £ ) (   £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0x1894331ea6578828, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73], [229, 0, 0, 230, 186, 231, 90, 232], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0x7f184b885b26cdbd, [[115, 116, 0, 115, 116, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xa97f9cef4485fe25, [[33, 0, 0, 73, 33, 0, 0, 73]]))
                 (  £   £   )            (   £   £   ) 
                 (   £  £   )            (   £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £   £   )            (   £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £  £   )            (   £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
|--|--(1, (0x7ba87b147e238ce1, [[229, 0, 0, 230, 186, 231, 90, 232]]))
           Representation     £      £ modes -  To be done
|--(1, (0xdf04f23c80e49d05, [[111, 112, 113, 114], [115, 116, 0, 115, 116, 0, 115, 116, 0], [33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73], [233, 142, 37, 234, 235, 59, 0], [-1]]))
|--|--(1, (0xf38df89137567520, [[111, 112, 113, 114]]))
           Irreps are as follows:
|--|--(1, (0xe263359f4842c086, [[115, 116, 0, 115, 116, 0, 115, 116, 0]]))
           mode #  £              mode #  £              mode #  £
|--|--(12, (0x719fc337b730d484, [[33, 0, 0, 73, 33, 0, 0, 73, 33, 0, 0, 73]]))
           (   £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (   £   £ ) (   £  £ ) 
           (   £   £ ) (   £   £ ) (  £   £ ) 
           (   £   £ ) (   £  £ ) (  £   £ ) 
           (  £  £ ) (   £   £ ) (   £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
|--|--(1, (0x345affaed60d9a29, [[233, 142, 37, 234, 235, 59, 0]]))
           Alpha used in Ewald sum =   £
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0xfe93a27f0ca2cb53, [[229, 116, 0, 115, 116, 0]]))
        Representation #  £ mode #   £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x26785640bcfa8755, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x58c0605e6f45856f, [[229, 116, 0, 230, 116, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x0c78b6757f7f34e4, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x9c919ed83e2a97f0, [[229, 116, 0, 230, 116, 0, 0, 0]]))
        Representation #  £ modes #  £ £ £
|--(1, (0xdba48247898e260f, [[240, 117]]))
        Self-consistent Calculation
|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x0c78b6757f7f34e4, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0], [251, 0, 252, 59, 0, 253, 252, 59, 0], [-1]]))
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x5474f4b6dac157a1, [[245, 116, 0, 246, 247, 248, 82, 0, 249, 250, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0x45eb0fd88a11c0fd, [[251, 0, 252, 59, 0, 253, 252, 59, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe0a1f05897ff10aa, [[254, 13, 255, 256]]))
        End of self-consistent calculation
|--(1, (0x577433df8e85718a, [[257, 258, 259, 260]]))
        Convergence has been achieved 
|--(1, (0x53713bc497779f17, [[261, 13, 118, 37, 14, 262, 59, 0]]))
        Number of q in the star =    £
|--(1, (0x48ef3ad0157fd309, [[263, 13, 118, 37, 14, 264]]))
        List of q in the star:
|--(1, (0x58777f4a929200b5, [[999999999]]))
             £   £   £   £
|--(1, (0xc5c9b4948d6399d5, [[265, 14, 170, 171]]))
        Diagonalizing the dynamical matrix
|--(1, (0x91847589c75ec446, [[118, 59, 33, 0, 0, 0, 73]]))
        q = (    £   £   £ ) 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(12, (0x59a7983d462ccd11, [[267, 33, 0, 73, 59, 0, 268, 59, 0, 269]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0x14049fc72a1eaf50, [[266]]))
    **************************************************************************
|--(2, (0xef43b1b63ee93df5, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x87f06da9d872b716, [[347, 348, 345]]))
        Called by  __QEelROUTINES__ 
|--(5, (0xf0add3e9eb0eda9e, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x87f06da9d872b716, [[347, 348, 345]]))
        Called by  __QEelROUTINES__ 
|--(4, (0x0d4a9b1bcef5a049, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x87f06da9d872b716, [[347, 348, 345]]))
        Called by  __QEelROUTINES__ 
|--(2, (0xef43b1b63ee93df5, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--(2, (0xfcc2733e1e002506, [[347, 348, 345]]))
        Called by  __QEelROUTINES__ 
        Called by  __QEelROUTINES__ 
|--(9, (0xfec69d2338423130, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x87f06da9d872b716, [[347, 348, 345]]))
        Called by  __QEelROUTINES__ 
|--(4, (0x0d4a9b1bcef5a049, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(1, (0x0dc5456e4e6f18b7, [[349, 350]]))
        General routines
|--(5, (0xcefb6b33b7f78ce6, [[351, 237, 238, 237, 239, 33, 0, 346]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x88a9c2d7e6cb22b8, [[47, 350]]))
        Parallel routines
|--(2, (0x32a24d8c5632da70, [[351, 237, 238, 237, 239, 33, 0, 346]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x07bf0c78fb51f0e2, [[352]]))
        INITIALIZATION: 
|--(5, (0x1d800b496629aa2b, [[236, 237, 238, 237, 239, 33, 0, 346]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x175e2fb1ce5a9def, [[353, 354]]))
        DYNAMICAL MATRIX:
|--(26, (0x329fee1a95a06dcf, [[236, 237, 238, 237, 239, 33, 0, 346]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
|--(2, (0x66a2f14ac3047d8f, [[355, 345, 237, 238, 237, 239, 33, 0, 346]]))
        c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
        c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--(1, (0x253f37d1e38bb4b0, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--(1, (0xd3aa1ac5620ebc4b, [[236, 237, 238, 237, 239, 33, 0, 346]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(2, (0xef43b1b63ee93df5, [[345, 237, 238, 237, 239, 33, 0, 346]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(1, (0xd3aa1ac5620ebc4b, [[236, 237, 238, 237, 239, 33, 0, 346]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x0dc5456e4e6f18b7, [[349, 350]]))
         General routines
|--(6, (0x872153d9403d5477, [[351, 237, 238, 237, 239, 33, 0, 346]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
|--(1, (0xb1fbcfc8faddd37e, [[236, 237, 238, 237, 239]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x1c486baa854a41c7, [[9, 356, 357, 358, 359, 8, 6]]))
      This run was terminated on:    __HHMMSS__    __DATEa__             
|--(1, (0xa2666434465d49da, [[360]]))
   =------------------------------------------------------------------------------=
|--(1, (0xdeae9576c79de47d, [[361, 362]]))
      JOB DONE.
|--(1, (0xa2666434465d49da, [[360]]))
   =------------------------------------------------------------------------------=