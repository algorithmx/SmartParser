(1, (0xd2672a2c44a543f6, [[380, 515, 162, 363, 111, 283, 183, 284], [211, 303, 33, 350, 31, 71, 367, 391, 352, 358], [85, 393, 389, 31, 361, 378, 390], [568, 274, 276, 569, 570, 571, 270, 0, 0, 2, 0, 273], [373, 271], [76, 366, 266, 374, 377, 96, 329, 572, 353, 349, 183], [271], [282, 360, 376, 354, 111, 0, 382], [388, 394, 369, 111, 0, 278], [365, 275, 385, 3, 0], [356, 351, 264, 384, 275, 371, 3, 0], [262, 511, 85, 484, 516, 76, 272], [2, 0, 484, 1, 7], [519, 454, 0, 1, 454, 0, 1, 454, 0, 1], [999999999], [395, 236, 96, 506], [119], [509, 520, 523, 508, 96, 272, 7], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [521, 504, 512, 517, 328, 116, 510], [507, 513, 329, 33, 505, 518, 514, 522], [259, 258], [573], [261, 167, 165, 237, 260, 167, 165, 256], [257, 0, 0, 0, 0, 0, 0], [163, 0, 0, 0, 0, 0, 0], [263, 0, 0, 0, 0, 0, 0], [91, 3, 0], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [91, 3, 0], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [-1], [95, 31, 123, 3, 0, 0, 0], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [217, 279, 3, 0, 15], [115, 118, 279, 3, 0, 15], [154, 182, 3, 0], [117, 3, 0], [74, 31, 49, 170, 3, 0], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [403, 415, 71, 326, 407], [215, 161], [160, 576, 26, 229, 159, 227, 232], [0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1], [83, 120, 281, 85], [123, 3, 2, 0, 0, 0, 1], [0, 577, 401, 123, 109, 280, 1], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [211, 414, 402, 123, 109, 280], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [411, 412], [405, 72, 0, 413, 400], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [410, 170, 76, 408, 169, 3, 0], [108, 25, 36, 25, 37], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [399, 31, 123, 76, 71, 417, 3, 0], [404, 31, 123, 76, 71, 416], [999999999], [246, 71, 120, 281], [123, 3, 2, 0, 0, 0, 1], [586], [93, 2, 0, 1, 3, 0, 92, 3, 0, 94], [586], [95, 31, 123, 3, 0, 0, 0], [359, 53, 76, 368, 364, 31, 71, 370, 386], [372, 355, 157, 307, 383, 328, 116, 170], [379, 381, 357, 375, 31, 362, 0, 392, 0, 387], [259, 258], [573], [261, 167, 165, 237, 260, 167, 165, 256], [257, 0, 0, 0, 0, 0, 0], [163, 0, 0, 0, 0, 0, 0], [263, 0, 0, 0, 0, 0, 0], [285], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [74, 31, 296, 3, 0], [74, 31, 287, 289, 0], [217, 156, 3, 0, 15], [115, 118, 156, 3, 0, 15], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [98, 238, 286, 229, 299], [38, 0, 0, 38, 2, 0, 1], [0, 587, 588, 44, 291, 288], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [215, 161], [160, 576, 26, 159, 227, 232], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [294, 161], [160, 576, 26, 159, 589, 590], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [292, 195, 0, 184, 198, 265, 194], [63, 7, 0, 52], [63, 591, 295, 1, 7, 0, 52], [63, 7, 0, 52], [262, 121, 85, 297, 1, 7, 0, 52], [63, 7, 0, 52], [63, 293, 0, 52], [149, 298, 120, 121, 157, 178, 125, 0, 52], [149, 290, 120, 121, 157, 178, 125, 0, 52], [149, 18, 120, 121, 125, 0, 52], [70, 174, 33, 337, 96, 239, 7], [119], [301, 168, 72, 0, 98, 168], [456, 455, 95], [56, 53, 44, 57], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [58, 3, 0, 51, 59, 16, 31, 49, 3, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [97, 31, 307, 457, 99], [10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1], [71, 73, 34, 33, 0, 9], [409, 406, 236, 239, 119], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [217, 279, 3, 0, 15], [115, 118, 279, 3, 0, 15], [154, 182, 3, 0], [117, 3, 0], [74, 31, 49, 170, 3, 0], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [403, 415, 71, 326, 407], [215, 161], [160, 576, 26, 229, 159, 227, 232], [0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1], [83, 120, 281, 85], [123, 3, 2, 0, 0, 0, 1], [0, 577, 401, 123, 109, 280, 1], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [211, 414, 402, 123, 109, 280], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [411, 412], [405, 72, 0, 413, 400], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [410, 170, 76, 408, 169, 3, 0], [108, 25, 36, 25, 37], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [399, 31, 123, 76, 71, 417, 3, 0], [404, 31, 123, 76, 71, 416], [999999999], [246, 71, 120, 281], [123, 3, 2, 0, 0, 0, 1], [586], [93, 2, 0, 1, 3, 0, 92, 3, 0, 94], [586], [95, 31, 123, 3, 0, 0, 0], [259, 258], [573], [261, 167, 165, 237, 260, 167, 165, 256], [257, 0, 0, 0, 0, 0, 0], [163, 0, 0, 0, 0, 0, 0], [263, 0, 0, 0, 0, 0, 0], [285], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [74, 31, 296, 3, 0], [74, 31, 287, 289, 0], [217, 156, 3, 0, 15], [115, 118, 156, 3, 0, 15], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [98, 238, 286, 229, 299], [38, 0, 0, 38, 2, 0, 1], [0, 587, 588, 44, 291, 288], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [215, 161], [160, 576, 26, 159, 227, 232], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [294, 161], [160, 576, 26, 159, 589, 590], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [292, 195, 0, 184, 198, 265, 194], [63, 7, 0, 52], [63, 591, 295, 1, 7, 0, 52], [63, 7, 0, 52], [262, 121, 85, 297, 1, 7, 0, 52], [63, 7, 0, 52], [63, 293, 0, 52], [149, 298, 120, 121, 157, 178, 125, 0, 52], [149, 290, 120, 121, 157, 178, 125, 0, 52], [149, 18, 120, 121, 125, 0, 52], [70, 174, 33, 337, 96, 239, 7], [119], [301, 168, 72, 0, 98, 168], [456, 455, 95], [56, 53, 44, 57], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [58, 3, 0, 51, 59, 16, 31, 49, 3, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [97, 31, 307, 457, 99], [10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1], [71, 73, 34, 33, 0, 9], [409, 406, 236, 239, 119], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [217, 279, 3, 0, 15], [115, 118, 279, 3, 0, 15], [154, 182, 3, 0], [117, 3, 0], [74, 31, 49, 170, 3, 0], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [403, 415, 71, 326, 407], [215, 161], [160, 576, 26, 229, 159, 227, 232], [0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1], [83, 120, 281, 85], [123, 3, 2, 0, 0, 0, 1], [0, 577, 401, 123, 109, 280, 1], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [211, 414, 402, 123, 109, 280], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [411, 412], [405, 72, 0, 413, 400], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [410, 170, 76, 408, 169, 3, 0], [108, 25, 36, 25, 37], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [399, 31, 123, 76, 71, 417, 3, 0], [404, 31, 123, 76, 71, 416], [999999999], [246, 71, 120, 281], [123, 3, 2, 0, 0, 0, 1], [586], [93, 2, 0, 1, 3, 0, 92, 3, 0, 94], [586], [95, 31, 123, 3, 0, 0, 0], [259, 258], [573], [261, 167, 165, 237, 260, 167, 165, 256], [257, 0, 0, 0, 0, 0, 0], [163, 0, 0, 0, 0, 0, 0], [263, 0, 0, 0, 0, 0, 0], [285], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [74, 31, 296, 3, 0], [74, 31, 287, 289, 0], [217, 156, 3, 0, 15], [115, 118, 156, 3, 0, 15], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [98, 238, 286, 229, 299], [38, 0, 0, 38, 2, 0, 1], [0, 587, 588, 44, 291, 288], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [215, 161], [160, 576, 26, 159, 227, 232], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [294, 161], [160, 576, 26, 159, 589, 590], [0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [292, 195, 0, 184, 198, 265, 194], [63, 7, 0, 52], [63, 591, 295, 1, 7, 0, 52], [63, 7, 0, 52], [262, 121, 85, 297, 1, 7, 0, 52], [63, 7, 0, 52], [63, 293, 0, 52], [149, 298, 120, 121, 157, 178, 125, 0, 52], [149, 290, 120, 121, 157, 178, 125, 0, 52], [149, 18, 120, 121, 125, 0, 52], [70, 174, 33, 337, 96, 239, 7], [119], [301, 168, 72, 0, 98, 168], [456, 455, 95], [56, 53, 44, 57], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [83, 88, 89, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [58, 3, 0, 51, 59, 16, 31, 49, 3, 0], [18, 28, 30, 42, 41, 35, 40, 33, 0, 29], [97, 31, 307, 457, 99], [10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1], [71, 73, 34, 33, 0, 9], [409, 406, 236, 239, 119], [38], [231, 224, 3, 0], [214, 225, 212, 3, 0, 226], [152, 153, 3, 0, 213], [74, 31, 218, 3, 0], [74, 31, 98, 222, 3, 0], [217, 279, 3, 0, 15], [115, 118, 279, 3, 0, 15], [154, 182, 3, 0], [117, 3, 0], [74, 31, 49, 170, 3, 0], [197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1], [81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0], [221, 144, 574, 575, 76, 113, 31, 223], [114, 0, 1, 3, 2, 0, 0, 0, 1], [219, 144, 574, 575, 76, 113, 146, 1], [112, 0, 1, 3, 2, 0, 0, 0, 1], [403, 415, 71, 326, 407], [215, 161], [160, 576, 26, 229, 159, 227, 232], [0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1], [83, 120, 281, 85], [123, 3, 2, 0, 0, 0, 1], [0, 577, 401, 123, 109, 280, 1], [228, 578, 579], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [211, 414, 402, 123, 109, 280], [19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1], [264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194], [74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0], [581, 575, 76, 113, 146], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [580, 575], [6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [583, 16, 0, 85, 38, 147, 96, 141], [119], [136], [148, 33, 309, 142, 3, 0], [145, 76, 481, 480, 479], [138, 137, 139, 31, 0, 135, 0, 117, 140, 143], [68, 0, 1, 3, 0], [411, 412], [405, 72, 0, 413, 400], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1], [87, 0, 0, 101, 17, 127, 116, 124], [78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1], [410, 170, 76, 408, 169, 3, 0], [108, 25, 36, 25, 37], [87, 16, 0, 69, 16, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [87, 16, 0, 101, 16, 0, 0, 0], [103, 95], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1], [97, 31, 105, 99], [126, 104, 106, 107], [399, 31, 123, 76, 71, 417, 3, 0], [404, 31, 123, 76, 71, 416], [999999999], [246, 71, 120, 281], [123, 3, 2, 0, 0, 0, 1], [586], [93, 2, 0, 1, 3, 0, 92, 3, 0, 94], [586], [50, 25, 36, 25, 37, 2, 0, 39], [155, 102, 50], [50, 25, 36, 25, 37, 2, 0, 39], [155, 102, 50], [50, 25, 36, 25, 37, 2, 0, 39], [155, 102, 50], [50, 25, 36, 25, 37, 2, 0, 39], [155, 102, 50], [50, 25, 36, 25, 37, 2, 0, 39], [155, 102, 50], [50, 25, 36, 25, 37, 2, 0, 39], [336, 250], [122, 25, 36, 25, 37, 2, 0, 39], [282, 250], [122, 25, 36, 25, 37, 2, 0, 39], [108, 25, 36, 25, 37], [526], [108, 25, 36, 25, 37, 2, 0, 39], [524, 525], [108, 25, 36, 25, 37, 2, 0, 39], [485, 50, 25, 36, 25, 37, 2, 0, 39], [50, 25, 36, 25, 37, 2, 0, 39], [108, 25, 36, 25, 37, 2, 0, 39], [50, 25, 36, 25, 37, 2, 0, 39], [108, 25, 36, 25, 37, 2, 0, 39], [336, 250], [122, 25, 36, 25, 37, 2, 0, 39], [108, 25, 36, 25, 37], [211, 423, 247, 424, 421, 284, 283], [592], [422, 593], [592], [-1]]))
|--(1, (0x4b22988756bc62fa, [[380, 515, 162, 363, 111, 283, 183, 284]]))
        Program  __KWPHONON__   __VERSIONa__  starts on  __DATEa__  at   __HHMMSS__  
|--(1, (0x578405074ccc015a, [[211, 303, 33, 350, 31, 71, 367, 391, 352, 358]]))
        This program is part of the open-source Quantum ESPRESSO suite
|--(1, (0xa4326edcc37ac1c4, [[85, 393, 389, 31, 361, 378, 390]]))
        for quantum simulation of materials; please cite
|--(2, (0x25273969f4b7d26a, [[568, 274, 276, 569, 570, 571, 270, 0, 0, 2, 0, 273]]))
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
            "P. Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--(1, (0x240ec5db1cae7802, [[373, 271]]))
             URL  __URL__  
|--(1, (0x6959a98b7e84d860, [[76, 366, 266, 374, 377, 96, 329, 572, 353, 349, 183]]))
        in publications or presentations arising from this work. More details at
|--(1, (0x8eb10c0eac6aa57d, [[271]]))
         __URL__ 
|--(1, (0x77baf472faa91c60, [[282, 360, 376, 354, 111, 0, 382]]))
        Parallel version (MPI), running on    £ processors
|--(1, (0x8c9ff9cdc213d179, [[388, 394, 369, 111, 0, 278]]))
        MPI processes distributed on     £ nodes
|--(1, (0x6cd10444f44a7e6a, [[365, 275, 385, 3, 0]]))
        K-points division:     npool     =       £
|--(1, (0x29587c5d2d8a78b4, [[356, 351, 264, 384, 275, 371, 3, 0]]))
        R & G space division:  proc/nbgrp/npool/nimage =       £
|--(1, (0xb6d89011d981d00c, [[262, 511, 85, 484, 516, 76, 272]]))
        Dynamical matrices for q-points given in input
|--(1, (0x65f90febfa59bfdb, [[2, 0, 484, 1, 7]]))
        (   £ q-points ) :
|--(1, (0x2d79e68f50c19b89, [[519, 454, 0, 1, 454, 0, 1, 454, 0, 1]]))
          NUM          xq( £ )         xq( £ )         xq( £ ) 
|--(4, (0x390eb0b412c4b370, [[999999999]]))
          £   £   £   £
          £   £   £   £
          £   £   £   £
          £   £   £   £
|--(1, (0xb2b295a791271f0c, [[395, 236, 96, 506]]))
        Reading data from directory:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0xb9e2e38b6a6e1dee, [[509, 520, 523, 508, 96, 272, 7]]))
        IMPORTANT: XC functional enforced from input :
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(1, (0x35d1695d373a5677, [[521, 504, 512, 517, 328, 116, 510]]))
        Any further DFT definition will be discarded
|--(1, (0x3cc0a05424617915, [[507, 513, 329, 33, 505, 518, 514, 522]]))
        Please, verify this is what you really want
|--(1, (0xb90c52b354aebd04, [[259, 258]]))
        Parallelization info
|--(1, (0x1d0422aa2b7d0604, [[573]]))
        --------------------
|--(1, (0x7956652488857874, [[261, 167, 165, 237, 260, 167, 165, 256]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0xc37af5848751587b, [[257, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x52390d5428b3b77c, [[163, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0xeb16ced3e6ad3379, [[263, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(24, (0xa405f1d64b935e2a, [[91, 3, 0], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [91, 3, 0], [78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1], [-1]]))
|--|--(1, (0x5999d442924b80cc, [[91, 3, 0]]))
        autoval = £
|--|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
              Irreps are as follows:
|--|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                              mode #   £
|--|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                              (  £  £   ) 
                              (   £   £   ) 
                              (   £   £   ) 
                              (  £  £   ) 
                              (   £   £   ) 
                              (   £   £   ) 
                              (  £  £   ) 
                              (   £   £   ) 
                              (   £   £   ) 
                              (  £   £   ) 
                              (  £   £   ) 
                              (  £   £   ) 
|--|--(1, (0x5999d442924b80cc, [[91, 3, 0]]))
        autoval = £
|--|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
              Irreps are as follows:
|--|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                              mode #   £
|--|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £  £   ) 
                              (  £   £   ) 
                              (  £   £   ) 
                              (  £   £   ) 
|--(1, (0x71ebe4988a447057, [[95, 31, 123, 3, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0x20ecd49401d4bb26, [[217, 279, 3, 0, 15]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0xf9632d810fcdd9cf, [[115, 118, 279, 3, 0, 15]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0xbf3e83dcb4c5a04b, [[154, 182, 3, 0]]))
        convergence threshold     =      £
|--(1, (0xf4adb5366260b36f, [[117, 3, 0]]))
        beta                      =       £
|--(1, (0xa61c70aef3bed369, [[74, 31, 49, 170, 3, 0]]))
        number of iterations used =            £
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x26e969b6d3a5490d, [[403, 415, 71, 326, 407]]))
        Atoms inside the unit cell: 
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
        Cartesian axes
|--(1, (0xf4a21a9deeb950d5, [[160, 576, 26, 229, 159, 227, 232]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x86d4fad7d2c730e8, [[0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x9ee75e7069df9035, [[83, 120, 281, 85]]))
        Computing dynamical matrix for 
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
                       q = (   £   £   £ )
|--(1, (0xa6d38bddf5835dfb, [[0, 577, 401, 123, 109, 280, 1]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0xd9d73759b0ebd9ba, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0x6510eb53f8c28cc9, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x4a65b7e5aec40122, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0xca5ea2e04844f7d1, [[211, 414, 402, 123, 109, 280]]))
        This transformation sends q -> -q+G
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym = £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x5c8fa4fb320b09e0, [[264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194]]))
        G cutoff =  £  (   £ G-vectors )     FFT grid:  __THREETUPLES__ 
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(20, (0x33c1dcadf304db30, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(20, (0x33c1dcadf304db30, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0xe0e293b3242d2e95, [[411, 412]]))
        Atomic displacements:
|--(1, (0xd0efeb573f6398cd, [[405, 72, 0, 413, 400]]))
        There are   £ irreducible representations
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £  £ ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (   £   £ ) (  £  £ ) 
           (   £  £ ) (   £   £ ) (   £  £ ) 
           (   £  £ ) (   £   £ ) (   £  £ ) 
           (   £  £ ) (  £  £ ) (   £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £  £ ) 
           (  £  £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £   £ ) 
           (  £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #  £              mode #  £              mode #  £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £   £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (   £   £ ) (   £   £ ) 
           (   £  £ ) (   £   £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (  £  £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
           (  £   £ ) (  £   £ ) (  £   £ ) 
|--(1, (0x0e62a00dbe42e201, [[410, 170, 76, 408, 169, 3, 0]]))
        Alpha used in Ewald sum =   £
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(6, (0x405efd347ce93633, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(3, (0x646f8f0f8b127c30, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0]]))
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :     £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(6, (0x405efd347ce93633, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(3, (0x646f8f0f8b127c30, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0]]))
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £    £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(5, (0xe55a659c87b252c4, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(3, (0x646f8f0f8b127c30, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0]]))
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =     £     £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #  £ £ £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(6, (0x405efd347ce93633, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(3, (0x646f8f0f8b127c30, [[584, 16, 0, 7, 73, 34, 82, 2, 15, 1, 3, 0, 0]]))
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
           Pert. #   £ : Fermi energy shift ( __Ry__ ) =    £     £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x35f7feec57a5f6ff, [[399, 31, 123, 76, 71, 417, 3, 0]]))
        Number of q in the star =    £
|--(1, (0x8639f29ae17bbf60, [[404, 31, 123, 76, 71, 416]]))
        List of q in the star:
|--(1, (0x58777f4a929200b5, [[999999999]]))
             £   £   £   £
|--(1, (0x7b1235f3fb9a7614, [[246, 71, 120, 281]]))
        Diagonalizing the dynamical matrix
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
        q = (    £   £   £ ) 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(12, (0x97a310b962cc487d, [[93, 2, 0, 1, 3, 0, 92, 3, 0, 94]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(1, (0x71ebe4988a447057, [[95, 31, 123, 3, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0x29beaa9b47580f94, [[359, 53, 76, 368, 364, 31, 71, 370, 386]]))
        Subspace diagonalization in iterative solution of the eigenvalue problem:
|--(1, (0x115b4c9dc57ca625, [[372, 355, 157, 307, 383, 328, 116, 170]]))
        one sub-group per band group will be used
|--(1, (0xc1d7dd6d15e29858, [[379, 381, 357, 375, 31, 362, 0, 392, 0, 387]]))
        scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--(1, (0xb90c52b354aebd04, [[259, 258]]))
        Parallelization info
|--(1, (0x1d0422aa2b7d0604, [[573]]))
        --------------------
|--(1, (0x7956652488857874, [[261, 167, 165, 237, 260, 167, 165, 256]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0xc37af5848751587b, [[257, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x52390d5428b3b77c, [[163, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0xeb16ced3e6ad3379, [[263, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £    £
|--(1, (0xb6313f28a1729f04, [[285]]))
        Title: 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0xa20743242ea08961, [[74, 31, 296, 3, 0]]))
        number of electrons       =        £
|--(1, (0x6e3312308e984d6e, [[74, 31, 287, 289, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x8209fa07e0f56e55, [[217, 156, 3, 0, 15]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0xc19f956322179849, [[115, 118, 156, 3, 0, 15]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0x21131b2d62dc44dd, [[98, 238, 286, 229, 299]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x840f004e9e359cb0, [[38, 0, 0, 38, 2, 0, 1]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x330f137737bb6df1, [[0, 587, 588, 44, 291, 288]]))
        £ Sym. Ops., with inversion, found
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(3, (0x1447eccd904b3d59, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0x5c19ef3cfb0f4837, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(4, (0xf5203666207a8b6d, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £         £      )
                        (     £         £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £ £ )
                        (  £ £  £ )
|--(12, (0x13ec5d7be7e3d8b5, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__      
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(8, (0x486928893e17ea40, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £         £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (    £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £ £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        ( £  £  £ )
                        (  £  £  £ )
|--(4, (0x5c19ef3cfb0f4837, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(8, (0x486928893e17ea40, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__ 
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (    £          £          £      )
                        (     £         £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £ £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £ £ )
                        ( £  £  £ )
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
      Cartesian axes
|--(1, (0x4561b1b1364b53eb, [[160, 576, 26, 159, 227, 232]]))
        site n.     atom                  positions (alat units)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0x2fa24fbb7f6b7764, [[294, 161]]))
      Crystallographic axes
|--(1, (0x0d78ff47ba8dd80e, [[160, 576, 26, 159, 589, 590]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xbb51400802f82136, [[292, 195, 0, 184, 198, 265, 194]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x53cdf445c97fe095, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0x049d1774df5eab59, [[63, 591, 295, 1, 7, 0, 52]]))
         __QEDynRAMfor__  (w. buffer ) :       £ MB
|--(6, (0xf73cadeefabc012b, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc6001fd090e5aed5, [[262, 121, 85, 297, 1, 7, 0, 52]]))
        Dynamical RAM for          h,s,v(r/c ) :       £ MB
|--(3, (0x2639a77984018dd4, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x3a58899afc20fc5c, [[63, 293, 0, 52]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0x93c2772cc1e48b57, [[149, 298, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0xb58477ab5d89db98, [[149, 290, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0x614ea03d53b28624, [[149, 18, 120, 121, 125, 0, 52]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0x137205c3d3b4a9be, [[70, 174, 33, 337, 96, 239, 7]]))
        The potential is recalculated from file :
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0xf43dab2a2e8525ed, [[301, 168, 72, 0, 98, 168]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0xe802c04586ce8231, [[456, 455, 95]]))
        Band Structure Calculation
|--(1, (0xdf9537b00d38784d, [[56, 53, 44, 57]]))
        Davidson diagonalization with overlap
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:    £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x92fad9dc37a184e0, [[58, 3, 0, 51, 59, 16, 31, 49, 3, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xd15f56a26c8e51b6, [[97, 31, 307, 457, 99]]))
        End of band structure calculation
|--(80, (0x259f8393414d3146, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1]]))
|--|--(1, (0x057163690ff656bb, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7]]))
                k = £ £ £ (  £ PWs)   bands  (  __EV__  )  :
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x61b4e7acf34b39da, [[14, 13]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8bc3d4df1534c759, [[71, 73, 34, 33, 0, 9]]))
        the Fermi energy is     £  __EV__ 
|--(1, (0x8a54c0458e307b89, [[409, 406, 236, 239, 119]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0x20ecd49401d4bb26, [[217, 279, 3, 0, 15]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0xf9632d810fcdd9cf, [[115, 118, 279, 3, 0, 15]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0xbf3e83dcb4c5a04b, [[154, 182, 3, 0]]))
        convergence threshold     =      £
|--(1, (0xf4adb5366260b36f, [[117, 3, 0]]))
        beta                      =       £
|--(1, (0xa61c70aef3bed369, [[74, 31, 49, 170, 3, 0]]))
        number of iterations used =            £
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x26e969b6d3a5490d, [[403, 415, 71, 326, 407]]))
        Atoms inside the unit cell: 
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
        Cartesian axes
|--(1, (0xf4a21a9deeb950d5, [[160, 576, 26, 229, 159, 227, 232]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x86d4fad7d2c730e8, [[0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x9ee75e7069df9035, [[83, 120, 281, 85]]))
        Computing dynamical matrix for 
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
                       q = (   £   £   £ )
|--(1, (0xa6d38bddf5835dfb, [[0, 577, 401, 123, 109, 280, 1]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(3, (0x1447eccd904b3d59, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0x5c19ef3cfb0f4837, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(4, (0xf5203666207a8b6d, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £         £      )
                        (     £         £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £ £ )
                        (  £ £  £ )
|--(1, (0xca5ea2e04844f7d1, [[211, 414, 402, 123, 109, 280]]))
        This transformation sends q -> -q+G
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym = £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x5c8fa4fb320b09e0, [[264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194]]))
        G cutoff =  £  (   £ G-vectors )     FFT grid:  __THREETUPLES__ 
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0xe0e293b3242d2e95, [[411, 412]]))
        Atomic displacements:
|--(1, (0xd0efeb573f6398cd, [[405, 72, 0, 413, 400]]))
        There are   £ irreducible representations
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (   £   £   )            (  £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
                 (  £   £   )            (   £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
                           (   £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #  £                           mode #  £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #  £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x0e62a00dbe42e201, [[410, 170, 76, 408, 169, 3, 0]]))
        Alpha used in Ewald sum =   £
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(4, (0xa0d50f3a7725e494, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x7da3e1ad194d6fe3, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:  £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(4, (0xa0d50f3a7725e494, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #  £ £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(4, (0xa0d50f3a7725e494, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x35f7feec57a5f6ff, [[399, 31, 123, 76, 71, 417, 3, 0]]))
        Number of q in the star =    £
|--(1, (0x8639f29ae17bbf60, [[404, 31, 123, 76, 71, 416]]))
        List of q in the star:
|--(3, (0xcb3e341309ff2801, [[999999999]]))
             £   £   £   £
             £   £   £   £
             £   £   £   £
|--(1, (0x7b1235f3fb9a7614, [[246, 71, 120, 281]]))
        Diagonalizing the dynamical matrix
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
        q = (    £   £   £ ) 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(12, (0x97a310b962cc487d, [[93, 2, 0, 1, 3, 0, 92, 3, 0, 94]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(1, (0x71ebe4988a447057, [[95, 31, 123, 3, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0xb90c52b354aebd04, [[259, 258]]))
        Parallelization info
|--(1, (0x1d0422aa2b7d0604, [[573]]))
        --------------------
|--(1, (0x7956652488857874, [[261, 167, 165, 237, 260, 167, 165, 256]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0xc37af5848751587b, [[257, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x52390d5428b3b77c, [[163, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0xeb16ced3e6ad3379, [[263, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £   £
|--(1, (0xb6313f28a1729f04, [[285]]))
        Title: 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0xa20743242ea08961, [[74, 31, 296, 3, 0]]))
        number of electrons       =        £
|--(1, (0x6e3312308e984d6e, [[74, 31, 287, 289, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x8209fa07e0f56e55, [[217, 156, 3, 0, 15]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0xc19f956322179849, [[115, 118, 156, 3, 0, 15]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0x21131b2d62dc44dd, [[98, 238, 286, 229, 299]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x840f004e9e359cb0, [[38, 0, 0, 38, 2, 0, 1]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x330f137737bb6df1, [[0, 587, 588, 44, 291, 288]]))
        £ Sym. Ops., with inversion, found
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0xd9d73759b0ebd9ba, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0x6510eb53f8c28cc9, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x4a65b7e5aec40122, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
      Cartesian axes
|--(1, (0x4561b1b1364b53eb, [[160, 576, 26, 159, 227, 232]]))
        site n.     atom                  positions (alat units)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0x2fa24fbb7f6b7764, [[294, 161]]))
      Crystallographic axes
|--(1, (0x0d78ff47ba8dd80e, [[160, 576, 26, 159, 589, 590]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xbb51400802f82136, [[292, 195, 0, 184, 198, 265, 194]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x53cdf445c97fe095, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0x049d1774df5eab59, [[63, 591, 295, 1, 7, 0, 52]]))
         __QEDynRAMfor__  (w. buffer ) :       £ MB
|--(6, (0xf73cadeefabc012b, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc6001fd090e5aed5, [[262, 121, 85, 297, 1, 7, 0, 52]]))
        Dynamical RAM for          h,s,v(r/c ) :       £ MB
|--(3, (0x2639a77984018dd4, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x3a58899afc20fc5c, [[63, 293, 0, 52]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0x93c2772cc1e48b57, [[149, 298, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0xb58477ab5d89db98, [[149, 290, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0x614ea03d53b28624, [[149, 18, 120, 121, 125, 0, 52]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0x137205c3d3b4a9be, [[70, 174, 33, 337, 96, 239, 7]]))
        The potential is recalculated from file :
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0xf43dab2a2e8525ed, [[301, 168, 72, 0, 98, 168]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0xe802c04586ce8231, [[456, 455, 95]]))
        Band Structure Calculation
|--(1, (0xdf9537b00d38784d, [[56, 53, 44, 57]]))
        Davidson diagonalization with overlap
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:    £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x92fad9dc37a184e0, [[58, 3, 0, 51, 59, 16, 31, 49, 3, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xd15f56a26c8e51b6, [[97, 31, 307, 457, 99]]))
        End of band structure calculation
|--(80, (0x259f8393414d3146, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1]]))
|--|--(1, (0x057163690ff656bb, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7]]))
                k = £ £ £ (  £ PWs)   bands  (  __EV__  )  :
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x61b4e7acf34b39da, [[14, 13]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8bc3d4df1534c759, [[71, 73, 34, 33, 0, 9]]))
        the Fermi energy is     £  __EV__ 
|--(1, (0x8a54c0458e307b89, [[409, 406, 236, 239, 119]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0x20ecd49401d4bb26, [[217, 279, 3, 0, 15]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0xf9632d810fcdd9cf, [[115, 118, 279, 3, 0, 15]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0xbf3e83dcb4c5a04b, [[154, 182, 3, 0]]))
        convergence threshold     =      £
|--(1, (0xf4adb5366260b36f, [[117, 3, 0]]))
        beta                      =       £
|--(1, (0xa61c70aef3bed369, [[74, 31, 49, 170, 3, 0]]))
        number of iterations used =            £
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x26e969b6d3a5490d, [[403, 415, 71, 326, 407]]))
        Atoms inside the unit cell: 
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
        Cartesian axes
|--(1, (0xf4a21a9deeb950d5, [[160, 576, 26, 229, 159, 227, 232]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x86d4fad7d2c730e8, [[0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x9ee75e7069df9035, [[83, 120, 281, 85]]))
        Computing dynamical matrix for 
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
                       q = (   £   £   £ )
|--(1, (0xa6d38bddf5835dfb, [[0, 577, 401, 123, 109, 280, 1]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0xd9d73759b0ebd9ba, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(4, (0x5c19ef3cfb0f4837, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(1, (0xca5ea2e04844f7d1, [[211, 414, 402, 123, 109, 280]]))
        This transformation sends q -> -q+G
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym = £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x5c8fa4fb320b09e0, [[264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194]]))
        G cutoff =  £  (   £ G-vectors )     FFT grid:  __THREETUPLES__ 
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(80, (0xc6b5edc85eb29b94, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0xe0e293b3242d2e95, [[411, 412]]))
        Atomic displacements:
|--(1, (0xd0efeb573f6398cd, [[405, 72, 0, 413, 400]]))
        There are   £ irreducible representations
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (   £  £   ) 
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £   £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £   £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #  £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (   £   £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
                           (  £  £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #  £                           mode #  £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (  £  £   )            (  £  £   ) 
|--(1, (0x0e62a00dbe42e201, [[410, 170, 76, 408, 169, 3, 0]]))
        Alpha used in Ewald sum =   £
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :    £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :    £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x7da3e1ad194d6fe3, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:   £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:  £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(4, (0xa0d50f3a7725e494, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #  £ £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(4, (0xa0d50f3a7725e494, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x35f7feec57a5f6ff, [[399, 31, 123, 76, 71, 417, 3, 0]]))
        Number of q in the star =    £
|--(1, (0x8639f29ae17bbf60, [[404, 31, 123, 76, 71, 416]]))
        List of q in the star:
|--(3, (0xcb3e341309ff2801, [[999999999]]))
             £   £   £   £
             £   £   £   £
             £   £   £   £
|--(1, (0x7b1235f3fb9a7614, [[246, 71, 120, 281]]))
        Diagonalizing the dynamical matrix
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
        q = (    £   £   £ ) 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(12, (0x97a310b962cc487d, [[93, 2, 0, 1, 3, 0, 92, 3, 0, 94]]))
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(1, (0x71ebe4988a447057, [[95, 31, 123, 3, 0, 0, 0]]))
        Calculation of q =    £   £   £
|--(1, (0xb90c52b354aebd04, [[259, 258]]))
        Parallelization info
|--(1, (0x1d0422aa2b7d0604, [[573]]))
        --------------------
|--(1, (0x7956652488857874, [[261, 167, 165, 237, 260, 167, 165, 256]]))
        sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--(1, (0xc37af5848751587b, [[257, 0, 0, 0, 0, 0, 0]]))
        Min         £     £     £                 £     £    £
|--(1, (0x52390d5428b3b77c, [[163, 0, 0, 0, 0, 0, 0]]))
        Max         £     £     £                 £     £    £
|--(1, (0xeb16ced3e6ad3379, [[263, 0, 0, 0, 0, 0, 0]]))
        Sum        £    £    £                £    £   £
|--(1, (0xb6313f28a1729f04, [[285]]))
        Title: 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0xa20743242ea08961, [[74, 31, 296, 3, 0]]))
        number of electrons       =        £
|--(1, (0x6e3312308e984d6e, [[74, 31, 287, 289, 0]]))
        number of Kohn-Sham states=           £
|--(1, (0x8209fa07e0f56e55, [[217, 156, 3, 0, 15]]))
        kinetic-energy cutoff     =     £   __Ry__ 
|--(1, (0xc19f956322179849, [[115, 118, 156, 3, 0, 15]]))
        charge density cutoff     =     £   __Ry__ 
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
        celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
                  a( £ ) = (   £   £   £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0x21131b2d62dc44dd, [[98, 238, 286, 229, 299]]))
        atomic species   valence    mass     pseudopotential
|--(2, (0x840f004e9e359cb0, [[38, 0, 0, 38, 2, 0, 1]]))
            __CHEM__              £   £      __CHEM__ ( £ )
            __CHEM__               £    £      __CHEM__  ( £ )
|--(1, (0x330f137737bb6df1, [[0, 587, 588, 44, 291, 288]]))
        £ Sym. Ops., with inversion, found
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0xd9d73759b0ebd9ba, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0x6510eb53f8c28cc9, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x4a65b7e5aec40122, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
      Cartesian axes
|--(1, (0x4561b1b1364b53eb, [[160, 576, 26, 159, 227, 232]]))
        site n.     atom                  positions (alat units)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__    tau(   £ ) = (   £   £   £  )
            £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--(1, (0x2fa24fbb7f6b7764, [[294, 161]]))
      Crystallographic axes
|--(1, (0x0d78ff47ba8dd80e, [[160, 576, 26, 159, 589, 590]]))
        site n.     atom                  positions (cryst. coord.)
|--(4, (0xa6c3c7623559d8ab, [[0, 38, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__    tau(   £ ) = (  £  £  £  )
            £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(40, (0xfd57bb976d51badf, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(40, (0xfd57bb976d51badf, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xbb51400802f82136, [[292, 195, 0, 184, 198, 265, 194]]))
        Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--(1, (0x53cdf445c97fe095, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
|--(1, (0x049d1774df5eab59, [[63, 591, 295, 1, 7, 0, 52]]))
         __QEDynRAMfor__  (w. buffer ) :       £ MB
|--(6, (0xf73cadeefabc012b, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0xc6001fd090e5aed5, [[262, 121, 85, 297, 1, 7, 0, 52]]))
        Dynamical RAM for          h,s,v(r/c ) :       £ MB
|--(3, (0x2639a77984018dd4, [[63, 7, 0, 52]]))
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
         __QEDynRAMfor__ :       £ MB
|--(1, (0x3a58899afc20fc5c, [[63, 293, 0, 52]]))
         __QEDynRAMfor__ init/wfcrot:       £ MB
|--(1, (0x93c2772cc1e48b57, [[149, 298, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated static dynamical RAM per process >       £ MB
|--(1, (0xb58477ab5d89db98, [[149, 290, 120, 121, 157, 178, 125, 0, 52]]))
        Estimated max dynamical RAM per process >       £ MB
|--(1, (0x614ea03d53b28624, [[149, 18, 120, 121, 125, 0, 52]]))
        Estimated total dynamical RAM >     £ MB
|--(1, (0x137205c3d3b4a9be, [[70, 174, 33, 337, 96, 239, 7]]))
        The potential is recalculated from file :
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0xf43dab2a2e8525ed, [[301, 168, 72, 0, 98, 168]]))
        Starting wfcs are   £ atomic wfcs
|--(1, (0xe802c04586ce8231, [[456, 455, 95]]))
        Band Structure Calculation
|--(1, (0xdf9537b00d38784d, [[56, 53, 44, 57]]))
        Davidson diagonalization with overlap
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xde54ce070f704873, [[83, 88, 89, 0]]))
        Computing kpt #:     £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0x92fad9dc37a184e0, [[58, 3, 0, 51, 59, 16, 31, 49, 3, 0]]))
        ethr =  £ ,  avg # of iterations = £
|--(1, (0x3d86b7e78b8b8323, [[18, 28, 30, 42, 41, 35, 40, 33, 0, 29]]))
        total cpu time spent up to now is        £ secs
|--(1, (0xd15f56a26c8e51b6, [[97, 31, 307, 457, 99]]))
        End of band structure calculation
|--(40, (0xdf8e3487771c4fe7, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7], [999999999], [14, 13], [999999999], [-1]]))
|--|--(1, (0x057163690ff656bb, [[10, 3, 0, 0, 0, 2, 0, 12, 11, 2, 9, 1, 7]]))
                k = £ £ £ (  £ PWs)   bands  (  __EV__  )  :
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
         £ £ £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--|--(1, (0x61b4e7acf34b39da, [[14, 13]]))
           occupation numbers 
|--|--(3, (0xcb3e341309ff2801, [[999999999]]))
           £   £   £   £   £   £   £   £
           £   £   £   £   £   £   £  £
          £
|--(1, (0x8bc3d4df1534c759, [[71, 73, 34, 33, 0, 9]]))
        the Fermi energy is     £  __EV__ 
|--(1, (0x8a54c0458e307b89, [[409, 406, 236, 239, 119]]))
        Writing output data file  __FULLPATH__ 
|--(1, (0x918f90f2e5248295, [[38]]))
         __CHEM__                                                                        
|--(1, (0xc35cc93be2ab52d3, [[231, 224, 3, 0]]))
        bravais-lattice index     =            £
|--(1, (0x1de366526fa60406, [[214, 225, 212, 3, 0, 226]]))
        lattice parameter  __ALAT__   =       £   __au__ 
|--(1, (0xeb1bf1b533a68ce1, [[152, 153, 3, 0, 213]]))
        unit-cell volume          =     £  __UNITVOLa__ 
|--(1, (0x2a1bd79b21e6f8a4, [[74, 31, 218, 3, 0]]))
        number of atoms/cell      =            £
|--(1, (0xc43d8584c3530949, [[74, 31, 98, 222, 3, 0]]))
        number of atomic types    =            £
|--(1, (0x20ecd49401d4bb26, [[217, 279, 3, 0, 15]]))
        kinetic-energy cut-off    =     £   __Ry__ 
|--(1, (0xf9632d810fcdd9cf, [[115, 118, 279, 3, 0, 15]]))
        charge density cut-off    =     £   __Ry__ 
|--(1, (0xbf3e83dcb4c5a04b, [[154, 182, 3, 0]]))
        convergence threshold     =      £
|--(1, (0xf4adb5366260b36f, [[117, 3, 0]]))
        beta                      =       £
|--(1, (0xa61c70aef3bed369, [[74, 31, 49, 170, 3, 0]]))
        number of iterations used =            £
|--(1, (0xbc88a1135ee976c6, [[197, 3, 471, 2, 0, 0, 0, 0, 0, 0, 1]]))
        Exchange-correlation      = PZ ( £  £  £  £ £ £ )
|--(2, (0x97d1774a170e5aff, [[81, 0, 75, 0, 81, 0, 75, 0, 81, 0, 75, 0]]))
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
        celldm( £ )=    £  celldm( £ )=    £  celldm( £ )=    £
|--(1, (0xf4ba080783508385, [[221, 144, 574, 575, 76, 113, 31, 223]]))
        crystal axes: (cart. coord. in units of alat)
|--(3, (0xf9320b54b64402ed, [[114, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
                  a( £ ) = (  £  £  £ )  
|--(1, (0xd2bf71ef1cb130d1, [[219, 144, 574, 575, 76, 113, 146, 1]]))
        reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--(3, (0x9ca0058d678d68a0, [[112, 0, 1, 3, 2, 0, 0, 0, 1]]))
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
                  b( £ ) = (  £  £  £ )  
|--(1, (0x26e969b6d3a5490d, [[403, 415, 71, 326, 407]]))
        Atoms inside the unit cell: 
|--(1, (0x97671e8208dcfbb2, [[215, 161]]))
        Cartesian axes
|--(1, (0xf4a21a9deeb950d5, [[160, 576, 26, 229, 159, 227, 232]]))
        site n.  atom      mass           positions (alat units)
|--(4, (0x86d4fad7d2c730e8, [[0, 38, 0, 77, 0, 1, 3, 2, 0, 0, 0, 1]]))
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__    £   tau(    £ ) = (    £    £    £  )
           £      __CHEM__  £   tau(    £ ) = (    £    £    £  )
|--(1, (0x9ee75e7069df9035, [[83, 120, 281, 85]]))
        Computing dynamical matrix for 
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
                       q = (   £   £   £ )
|--(1, (0xa6d38bddf5835dfb, [[0, 577, 401, 123, 109, 280, 1]]))
        £ Sym.Ops. (with q -> -q+G )
|--(1, (0x20f7ecfc32e526b4, [[228, 578, 579]]))
                                       s                        frac. trans.
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym =  £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(3, (0xaaa30e9748dcf784, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £  £ )
|--(1, (0x8a163b3666884f89, [[19, 3, 0, 185], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xec27fa5f2a34e283, [[19, 3, 0, 185]]))
            isym =  £     inversion                                    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (    £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £         £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = ( £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £ £  £ )
                        (  £  £ £ )
|--(7, (0xd9d73759b0ebd9ba, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym =  £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(20, (0x6510eb53f8c28cc9, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xb87a9ad6af88ac4a, [[19, 3, 0, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     £ deg rotation - cart. axis  __MILLER__         
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £         £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £ £ )
|--(16, (0x4a65b7e5aec40122, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0xf32b0b199fd145be, [[19, 3, 0, 582, 0, 23, 21, 17, 581, 20, 22]]))
            isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £         £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (    £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £ £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        ( £  £  £ )
|--(1, (0xca5ea2e04844f7d1, [[211, 414, 402, 123, 109, 280]]))
        This transformation sends q -> -q+G
|--(1, (0xcbd541e099aeaaad, [[19, 3, 0, 164], [580, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [581, 8, 0, 1, 3, 2, 0, 0, 0, 1], [2, 0, 0, 0, 1], [-1]]))
|--|--(1, (0x6042c9cae7a79210, [[19, 3, 0, 164]]))
            isym = £     identity                                     
|--|--(1, (0x09ccb9030998d8e4, [[580, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cryst.   s( £ ) = (     £          £          £      )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (     £          £          £      )
                        (     £          £          £      )
|--|--(1, (0xcc875f309064affc, [[581, 8, 0, 1, 3, 2, 0, 0, 0, 1]]))
       cart.    s( £ ) = (  £  £  £ )
|--|--(2, (0xdd8815a91c596de9, [[2, 0, 0, 0, 1]]))
                        (  £  £  £ )
                        (  £  £  £ )
|--(1, (0x5c8fa4fb320b09e0, [[264, 156, 3, 0, 2, 0, 184, 1, 198, 195, 194]]))
        G cutoff =  £  (   £ G-vectors )     FFT grid:  __THREETUPLES__ 
|--(1, (0xa0f9469d64b37d1f, [[74, 31, 10, 216, 0, 310, 220, 230, 2, 15, 75, 0]]))
        number of k points=    £  mp smearing, width ( __Ry__ )=  £
|--(1, (0xac0e8b3bea25a9de, [[581, 575, 76, 113, 146]]))
                          cart. coord. in units  __UNITTWOPIALAT__ 
|--(40, (0xfd57bb976d51badf, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0x6a371d3aaab283f6, [[580, 575]]))
                          cryst. coord.
|--(40, (0xfd57bb976d51badf, [[6, 0, 1, 3, 2, 0, 0, 0, 4, 5, 3, 0]]))
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(    £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
           k(   £ ) = (   £   £   £ ), wk =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__  read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(6, (0xcf5b9f6d57fd9b0b, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
                   l( £ ) =   £
|--(1, (0xd121121cb76d747c, [[583, 16, 0, 85, 38, 147, 96, 141]]))
        PseudoPot. # £ for  __CHEM__   read from file:
|--(1, (0xba9a08d4c23f4b87, [[119]]))
         __FULLPATH__ 
|--(1, (0x0bef8daa72c1bdf4, [[136]]))
         __CHKSUM__ 
|--(1, (0x2829af3c6222269a, [[148, 33, 309, 142, 3, 0]]))
        Pseudo is Norm-conserving, Zval =  £
|--(1, (0x864bbe0fa3a2b76d, [[145, 76, 481, 480, 479]]))
        Generated in analytical, separable form
|--(1, (0x0a3af19d586c1e9d, [[138, 137, 139, 31, 0, 135, 0, 117, 140, 143]]))
        Using radial grid of £ points,  £ beta functions with: 
|--(1, (0x1b81789690dc708e, [[68, 0, 1, 3, 0]]))
                   l( £ ) =   £
|--(1, (0xe0e293b3242d2e95, [[411, 412]]))
        Atomic displacements:
|--(1, (0xd0efeb573f6398cd, [[405, 72, 0, 413, 400]]))
        There are   £ irreducible representations
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x71f7723c7770ee71, [[78, 72, 79, 80], [69, 16, 0], [2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x294d740e0f84f9e1, [[69, 16, 0]]))
                           mode #   £
|--|--(12, (0xeff5b99bae86c7ed, [[2, 0, 0, 1]]))
                           (   £   £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £  £   ) 
                           (  £   £   ) 
                           (  £  £   ) 
                           (   £  £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
                           (  £   £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (   £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £   £ ) (   £   £ ) 
           (  £  £ ) (   £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (   £   £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
           (   £  £ ) (  £  £ ) (  £  £ ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #   £              mode #   £              mode #   £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £   £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0x4eeb8a89e13c7aac, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0x084358d63b7bae75, [[69, 16, 0, 69, 16, 0]]))
                 mode #   £                           mode #   £
|--|--(12, (0xe9d8307739f6c655, [[2, 0, 0, 1, 2, 0, 0, 1]]))
                 (  £   £   )            (   £   £   ) 
                 (   £  £   )            (   £  £   ) 
                 (  £  £   )            (  £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £   £   )            (   £  £   ) 
                 (   £   £   )            (  £   £   ) 
                 (   £  £   )            (   £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
                 (  £  £   )            (  £   £   ) 
|--(1, (0x1d441768273a9cd0, [[87, 0, 0, 101, 17, 127, 116, 124]]))
        Representation     £      £ modes -  To be done
|--(1, (0xf41609752f0d075c, [[78, 72, 79, 80], [69, 16, 0, 69, 16, 0, 69, 16, 0], [2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1], [-1]]))
|--|--(1, (0xba5930cf344c9243, [[78, 72, 79, 80]]))
           Irreps are as follows:
|--|--(1, (0xe84464c88bf0c8f7, [[69, 16, 0, 69, 16, 0, 69, 16, 0]]))
           mode #  £              mode #  £              mode #  £
|--|--(12, (0x2cf42b4dc7823d37, [[2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1]]))
           (   £  £ ) (  £   £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £  £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (  £  £ ) (  £   £ ) 
           (   £   £ ) (   £   £ ) (   £  £ ) 
           (   £   £ ) (   £   £ ) (  £   £ ) 
           (   £   £ ) (   £  £ ) (  £   £ ) 
           (  £  £ ) (   £   £ ) (   £  £ ) 
           (  £  £ ) (  £  £ ) (   £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
           (  £  £ ) (  £  £ ) (  £   £ ) 
|--(1, (0x0e62a00dbe42e201, [[410, 170, 76, 408, 169, 3, 0]]))
        Alpha used in Ewald sum =   £
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x3504697759a2995d, [[87, 16, 0, 69, 16, 0]]))
        Representation #  £ mode #   £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #   £  £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(3, (0x7e56992133d8d52b, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x42afbe2e938192b7, [[87, 16, 0, 101, 16, 0, 0]]))
        Representation #  £ modes #   £  £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x7da3e1ad194d6fe3, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x1368deb350a19943, [[87, 16, 0, 101, 16, 0, 0, 0]]))
        Representation #  £ modes #  £ £ £
|--(1, (0x91e9e058cc0c348d, [[103, 95]]))
        Self-consistent Calculation
|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
         iter #   £ total cpu time :   £ secs   av.it.:   £
|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
         thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(2, (0x7da3e1ad194d6fe3, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0], [46, 0, 24, 3, 0, 45, 24, 3, 0], [-1]]))
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--|--(1, (0x27a43a05dc78a7b4, [[47, 16, 0, 18, 28, 30, 7, 0, 29, 585, 0]]))
            iter #   £ total cpu time :   £ secs   av.it.:  £
|--|--(1, (0xdf88894ec7c74570, [[46, 0, 24, 3, 0, 45, 24, 3, 0]]))
            thresh= £  __SYMBOLtypeA__  =  £ | __SYMBOLtypeA__  =  £
|--(1, (0xe6d7f42acb4d92db, [[97, 31, 105, 99]]))
        End of self-consistent calculation
|--(1, (0xac174ffe63f60261, [[126, 104, 106, 107]]))
        Convergence has been achieved 
|--(1, (0x35f7feec57a5f6ff, [[399, 31, 123, 76, 71, 417, 3, 0]]))
        Number of q in the star =    £
|--(1, (0x8639f29ae17bbf60, [[404, 31, 123, 76, 71, 416]]))
        List of q in the star:
|--(1, (0x58777f4a929200b5, [[999999999]]))
             £   £   £   £
|--(1, (0x7b1235f3fb9a7614, [[246, 71, 120, 281]]))
        Diagonalizing the dynamical matrix
|--(1, (0xef4cc1073f8602d4, [[123, 3, 2, 0, 0, 0, 1]]))
        q = (    £   £   £ ) 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(12, (0x97a310b962cc487d, [[93, 2, 0, 1, 3, 0, 92, 3, 0, 94]]))
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =      £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =       £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (    £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =     £  __UNITCMINV__ 
        freq (   £ ) =      £ [THz] =    £  __UNITCMINV__ 
|--(1, (0xb38de3ad6a520714, [[586]]))
    **************************************************************************
|--(2, (0x85e230276fa118d7, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x985c9ab3dd7d9964, [[155, 102, 50]]))
        Called by  __QEelROUTINES__ 
|--(5, (0x2c818c016688a0ad, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x985c9ab3dd7d9964, [[155, 102, 50]]))
        Called by  __QEelROUTINES__ 
|--(4, (0xae4bab630b504b4a, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x985c9ab3dd7d9964, [[155, 102, 50]]))
        Called by  __QEelROUTINES__ 
|--(2, (0x85e230276fa118d7, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--(2, (0xa091335e57539757, [[155, 102, 50]]))
        Called by  __QEelROUTINES__ 
        Called by  __QEelROUTINES__ 
|--(9, (0x2ca29fba42277e35, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x985c9ab3dd7d9964, [[155, 102, 50]]))
        Called by  __QEelROUTINES__ 
|--(4, (0xae4bab630b504b4a, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(1, (0x344ffdf1cd0f231a, [[336, 250]]))
        General routines
|--(5, (0x8776244fc34c1e1d, [[122, 25, 36, 25, 37, 2, 0, 39]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x70b5ef59b316462e, [[282, 250]]))
        Parallel routines
|--(2, (0x1e846f05c7d83a5e, [[122, 25, 36, 25, 37, 2, 0, 39]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x106184c9d1b91a68, [[526]]))
        INITIALIZATION: 
|--(5, (0xb111cdc47e55e5cf, [[108, 25, 36, 25, 37, 2, 0, 39]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--(1, (0x326ae755036baa1e, [[524, 525]]))
        DYNAMICAL MATRIX:
|--(26, (0x99a8776d40db9cb7, [[108, 25, 36, 25, 37, 2, 0, 39]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (       £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__      __DURATION__   __KWCPU__      __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEphROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
|--(2, (0x1f4146f270786d61, [[485, 50, 25, 36, 25, 37, 2, 0, 39]]))
        c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
        c __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--(1, (0x24df89c0caab2b72, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
|--(1, (0x720bb8b3739e7834, [[108, 25, 36, 25, 37, 2, 0, 39]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(2, (0x85e230276fa118d7, [[50, 25, 36, 25, 37, 2, 0, 39]]))
         __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (   £ calls)
         __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
|--(1, (0x720bb8b3739e7834, [[108, 25, 36, 25, 37, 2, 0, 39]]))
         __QEphROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--(1, (0x344ffdf1cd0f231a, [[336, 250]]))
         General routines
|--(6, (0x0b85505dfb7af84a, [[122, 25, 36, 25, 37, 2, 0, 39]]))
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (   £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
         __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
         __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
|--(1, (0xb45aa06f355a3562, [[108, 25, 36, 25, 37]]))
         __QEphROUTINES__     __DURATION__   __KWCPU__     __DURATION__  WALL
|--(1, (0x5487e62693121a56, [[211, 423, 247, 424, 421, 284, 283]]))
      This run was terminated on:    __HHMMSS__    __DATEa__             
|--(1, (0xfbe848ed0318c882, [[592]]))
   =------------------------------------------------------------------------------=
|--(1, (0xb75baff7bc0bbea9, [[422, 593]]))
      JOB DONE.
|--(1, (0xfbe848ed0318c882, [[592]]))
   =------------------------------------------------------------------------------=