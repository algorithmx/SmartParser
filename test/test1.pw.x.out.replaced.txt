(1, (0xb6b924017bd73a6b, [Int64[], [1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1], [49, 50, 51, 52, 5, 0, 53], Int64[], [-1], [54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1], [72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], Int64[], [-1], [87, 88, 39, 89, 90, 13, 14, 91, 92], [93, 94, 95, 96, 97, 98, 99, 100], [101, 102, 103, 104, 13, 105, 0, 106, 0, 107], Int64[], [-1], Int64[], [108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [119], [120], Int64[], [-1], Int64[], [121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], [152, 61, 0], Int64[], [-1], Int64[], [153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1], [155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], Int64[], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1], [0, 199, 200, 193, 201, 202], Int64[], [-1], Int64[], [203, 204, 205], Int64[], [-1], [206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1], [14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [234, 235], Int64[], [-1], [236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [243, 235], Int64[], [-1], [236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [254, 255, 0, 256, 257, 258, 259], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 263, 264, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 265, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 273, 268, 269, 271, 0, 274], Int64[], [-1], [275, 276, 44, 277, 13, 278, 279], Int64[], [-1], [280, 138, 0, 281, 282, 182, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [362, 363, 364], Int64[], [-1], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 179, 61, 0, 137], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [382, 120, 383, 366, 384], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], [382, 120, 383, 366, 384], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], Int64[], [-1], [366, 401, 39, 0, 310, 365, 230, 0, 366, 367], [402, 306, 312, 0, 137, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 151], Int64[], [-1], [313, 13, 362, 363, 364], Int64[], [-1], [405, 368, 61, 0, 137], [406, 407, 408], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], [313, 407, 408], Int64[], [-1], Int64[], [409, 407, 310, 315, 7, 14, 410, 411], [324, 256, 220, 412, 19, 14, 407, 413, 404], [414, 415, 416, 44, 417, 7, 14, 418, 419], Int64[], [-1], [108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [119], [120], Int64[], [-1], Int64[], [121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], Int64[], [-1], [153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1], [155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], Int64[], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1], [0, 199, 200, 193, 201, 202], Int64[], [-1], Int64[], [203, 204, 205], Int64[], [-1], [206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1], [14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [234, 235], Int64[], [-1], [236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [243, 235], Int64[], [-1], [236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [254, 255, 0, 256, 257, 258, 259], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 263, 264, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 265, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 273, 268, 269, 271, 0, 274], Int64[], [-1], [275, 276, 44, 277, 13, 278, 279], Int64[], [-1], [280, 138, 0, 281, 282, 182, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [426, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [49, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [420, 421, 422, 421, 423], Int64[], [-1], Int64[], [9, 429, 388, 430, 431, 8, 6], Int64[], [-1], [432], [433, 434], [432], Int64[], [-1], [-1]]))
|--
|--(1, (0x7e00ca7bda37f4db, [[1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1]]))
|--|--     Program  __KWPWSCF__   __VERSIONa__  starts on  __DATEa__  at  __HHMMSS__  
|--|--
|--(1, (0x68f918b830e4034b, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1]]))
|--|--     This program is part of the open-source Quantum ESPRESSO suite
|--|--     for quantum simulation of materials; please cite
|--|--         " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
               " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--|--          URL  __URL__  
|--|--     in publications or presentations arising from this work. More details at
|--|--      __URL__ 
|--|--
|--(1, (0x6fbf7773363bce3a, [[49, 50, 51, 52, 5, 0, 53], Int64[], [-1]]))
|--|--     Parallel version (MPI), running on    £ processors
|--|--
|--(1, (0xfd3b00449fa3f6a0, [[54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1]]))
|--|--     MPI processes distributed on     £ nodes
|--|--     K-points division:     npool     =       £
|--|--     R & G space division:  proc/nbgrp/npool/nimage =       £
|--|--     Waiting for input...
|--|--     Reading input from standard input
|--|--
|--(1, (0xe64f033202f47196, [[72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], Int64[], [-1]]))
|--|--     Current dimensions of program  __KWPWSCF__  are:
|--|--     Max number of different atomic species (ntypx) = £
|--|--     Max number of k-points (npk) =  £
|--|--     Max angular momentum in pseudopotentials (lmaxx) =  £
|--|--
|--(1, (0xf440fca0c7875b34, [[87, 88, 39, 89, 90, 13, 14, 91, 92], [93, 94, 95, 96, 97, 98, 99, 100], [101, 102, 103, 104, 13, 105, 0, 106, 0, 107], Int64[], [-1]]))
|--|--     Subspace diagonalization in iterative solution of the eigenvalue problem:
|--|--     one sub-group per band group will be used
|--|--     scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--|--
|--
|--(1, (0x8a66644b8a7f59b3, [[108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x747cbfd56eb64919, [[119], [120], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0xb6ddabfe889139f3, [[121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], [152, 61, 0], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--|--     nstep                     =           £
|--|--
|--
|--(1, (0x48c7d7c781b427ff, [[153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x90a8ca16018fa8bf, [[155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x81fc08ded1e4d47a, [[162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(2, (0x631169b297920f92, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval = £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £   £
                                                             £
|--|--
|--(1, (0xb38a9de5f1a46215, [[78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0xefb416ddf52ba0da, [[0, 199, 200, 193, 201, 202], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x42806707c9550a1c, [[203, 204, 205], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0xfcf69a20bc024480, [[206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x9ba4bb04ec28a9e1, [[206, 61, 0, 207], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0xbf9c88aa5e9e5e55, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x1c427c8ee752b000, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x27bb13a516449481, [[206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xb9893857922cb980, [[206, 61, 0, 216], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x638644aaa66c11bc, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x0e84c5ac4581c74c, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0xb1dc8bf0439dc282, [[218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1]]))
|--|--      __POINTGROUP__  
|--|--     there are £ classes
|--|--     the character table:
|--|--
|--(1, (0x59b8e8bc8b7dc2c7, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--        __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--|-- __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
       __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
       __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
       __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
       __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
       __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
       __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
       __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
       __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
       __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--|--
|--(1, (0x90658de57531737c, [[14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1]]))
|--|--     the symmetry operations in each class and the name of the first element:
|--|--
|--(1, (0x0ca651c7a8e987a1, [[224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--      __GRPSYMBOL__         £
|--|--          identity                                               
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          £ deg rotation - cart. axis  __MILLER__                
|--|--      __GRPSYMBOL__       £    £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__       £    £   £   £   £   £
|--|--           £ deg rotation - cart. axis  __MILLER__                  
|--|--      __GRPSYMBOL__      £    £   £   £   £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__        £
|--|--          inversion                                              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__           
|--|--      __GRPSYMBOL__     £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £
|--|--          inv.  £ deg rotation - cart. axis  __MILLER__             
|--|--      __GRPSYMBOL__     £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--
|--(1, (0x76ff8a0c55f7225b, [[234, 235], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0xdda1a33b4283d014, [[236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0x2bbd3deefa2b9abe, [[243, 235], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0x692c625584864114, [[236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x721895ac665abd59, [[76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xf5004fa53fcfcce8, [[208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x59ebb3e12c57b64f, [[254, 255, 0, 256, 257, 258, 259], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xab38e653c91ac4c5, [[260, 263, 264, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x7bba360f749bbfaf, [[260, 265, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x57428eb9fb8cb368, [[266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x67c01b1c28318efe, [[266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x942f4a8a50ad5af4, [[266, 273, 268, 269, 271, 0, 274], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0xf21686903afb58aa, [[275, 276, 44, 277, 13, 278, 279], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0x144a8c3240ab80ec, [[280, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--
|--(1, (0x2638ee1891bc99dd, [[283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £    £   £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__  £
|--|--  £   £   £        £      £      £
         £  £   £          £    £      £
         £   £  £          £      £    £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xf28b1c9974e4316e, [[362, 363, 364], Int64[], [-1]]))
|--|--     BFGS Geometry Optimization
|--|--
|--(1, (0x1a72ba5b8913ca87, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0xabd3acae6e9574db, [[368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x1a78be4893fb426f, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0x16bcf952dbb164b1, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0x3229aacaf9b61271, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x4d1268b09a42963a, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd43692a57db28b25, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x2678182e128c4aad, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £   £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--   £   £   £         £      £      £
         £   £   £          £     £      £
         £   £   £          £      £     £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x1a72ba5b8913ca87, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x3d99c1e6023ec240, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x41722abd06d02769, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0x1a78be4893fb426f, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0x16bcf952dbb164b1, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0x3229aacaf9b61271, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x4d1268b09a42963a, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd43692a57db28b25, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x2678182e128c4aad, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in  £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--  £   £   £         £      £      £
         £  £   £          £     £      £
         £   £  £          £      £     £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x1a72ba5b8913ca87, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x3d99c1e6023ec240, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x41722abd06d02769, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xf8046185a34384f7, [[382, 120, 383, 366, 384], Int64[], [-1]]))
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0x1a78be4893fb426f, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0x16bcf952dbb164b1, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0x3229aacaf9b61271, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x4d1268b09a42963a, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd43692a57db28b25, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x2678182e128c4aad, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x43fb43f76c65cdbc, [[385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0xb73fa4dd6e947591, [[302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £    £   £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x1a72ba5b8913ca87, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x3d99c1e6023ec240, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x41722abd06d02769, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xfa0dcb3a41b63557, [[393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], [382, 120, 383, 366, 384], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0x1a78be4893fb426f, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0x16bcf952dbb164b1, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0x3229aacaf9b61271, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x4d1268b09a42963a, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0xd43692a57db28b25, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x2678182e128c4aad, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x43fb43f76c65cdbc, [[385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0xb73fa4dd6e947591, [[302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
|--(1, (0xa813b77c0f72867c, [[393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--
|--(1, (0x3f7f4107f1bc4962, [[366, 401, 39, 0, 310, 365, 230, 0, 366, 367], [402, 306, 312, 0, 137, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 151], Int64[], [-1]]))
|--|--     bfgs converged in   £ scf cycles and   £ bfgs steps
|--|--     (criteria: energy <  £  __Ry__ , force <  £ __UNITFORCEa__ , cell <  £ __UNITkbar__ )
|--|--
|--(1, (0x3b746444a0f3b076, [[313, 13, 362, 363, 364], Int64[], [-1]]))
|--|--     End of BFGS Geometry Optimization
|--|--
|--(1, (0x9df7031583392266, [[405, 368, 61, 0, 137], [406, 407, 408], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     Final enthalpy =    £  __Ry__ 
|--|--Begin final coordinates
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0x3229aacaf9b61271, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x47a15a336fb1374c, [[120, 376], [26, 0, 0, 0], [313, 407, 408], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--End final coordinates
|--|--
|--
   
|--(1, (0xb56cbcdf233b4f97, [[409, 407, 310, 315, 7, 14, 410, 411], [324, 256, 220, 412, 19, 14, 407, 413, 404], [414, 415, 416, 44, 417, 7, 14, 418, 419], Int64[], [-1]]))
|--|--     A final scf calculation at the relaxed structure.
|--|--     The G-vectors are recalculated for the final unit cell
|--|--     Results may differ from those at the preceding step.
|--|--
|--(1, (0x8a66644b8a7f59b3, [[108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x747cbfd56eb64919, [[119], [120], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0x4965da6b1f24cc92, [[121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--|--
|--(1, (0x48c7d7c781b427ff, [[153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0x90a8ca16018fa8bf, [[155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x81fc08ded1e4d47a, [[162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(2, (0x631169b297920f92, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval = £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £   £
                                                             £
|--|--
|--(1, (0xb38a9de5f1a46215, [[78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0xefb416ddf52ba0da, [[0, 199, 200, 193, 201, 202], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x42806707c9550a1c, [[203, 204, 205], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0xfcf69a20bc024480, [[206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x9ba4bb04ec28a9e1, [[206, 61, 0, 207], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0xbf9c88aa5e9e5e55, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x1c427c8ee752b000, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0x27bb13a516449481, [[206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0xb9893857922cb980, [[206, 61, 0, 216], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x638644aaa66c11bc, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x0e84c5ac4581c74c, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0xb1e4a9ad2c7f1138, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0xccac018af5591b49, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0xb1dc8bf0439dc282, [[218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1]]))
|--|--      __POINTGROUP__  
|--|--     there are £ classes
|--|--     the character table:
|--|--
|--(1, (0x59b8e8bc8b7dc2c7, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--        __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--|-- __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
       __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
       __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
       __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
       __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
       __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
       __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
       __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
       __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
       __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--|--
|--(1, (0x90658de57531737c, [[14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1]]))
|--|--     the symmetry operations in each class and the name of the first element:
|--|--
|--(1, (0x0ca651c7a8e987a1, [[224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--      __GRPSYMBOL__         £
|--|--          identity                                               
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          £ deg rotation - cart. axis  __MILLER__                
|--|--      __GRPSYMBOL__       £    £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__       £    £   £   £   £   £
|--|--           £ deg rotation - cart. axis  __MILLER__                  
|--|--      __GRPSYMBOL__      £    £   £   £   £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__        £
|--|--          inversion                                              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__           
|--|--      __GRPSYMBOL__     £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £
|--|--          inv.  £ deg rotation - cart. axis  __MILLER__             
|--|--      __GRPSYMBOL__     £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--
|--(1, (0x76ff8a0c55f7225b, [[234, 235], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0xdda1a33b4283d014, [[236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0x2bbd3deefa2b9abe, [[243, 235], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0x692c625584864114, [[236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0x721895ac665abd59, [[76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xf5004fa53fcfcce8, [[208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x59ebb3e12c57b64f, [[254, 255, 0, 256, 257, 258, 259], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xab38e653c91ac4c5, [[260, 263, 264, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x7bba360f749bbfaf, [[260, 265, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0x7d47a687bfd31748, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x57428eb9fb8cb368, [[266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x67c01b1c28318efe, [[266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x942f4a8a50ad5af4, [[266, 273, 268, 269, 271, 0, 274], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0xf21686903afb58aa, [[275, 276, 44, 277, 13, 278, 279], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0x144a8c3240ab80ec, [[280, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--
|--(1, (0x2638ee1891bc99dd, [[283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--
|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x746537846ecd0011, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe2d151a295811912, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0xcd7213e22e9b1aad, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x07b664d31349da1d, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0xb4edaab309d0218a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe0e8721999ffa3f1, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x8f4c3d0f198ca20c, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x51d7c4011f69532e, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x6aac9f1792df2980, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0x5bf572dc4adcbc91, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x81a64851f212ce45, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0xf53ed716ec72591a, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x778859ff2121f121, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x10397f308850306f, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x8e5a63411f161ae7, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xa1d5d05d14e73efe, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0x95e7cc723a61666d, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x16d0b6f66f1f4af6, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--
|--(1, (0xa5df7d9c1f591445, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0xefa142612d1d4e1c, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xd0b1bcba488a4c00, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x3aa2bae3dafabdef, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xee7c66077f17efe6, [[420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(6, (0x2a556c95b1d40d2b, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0xf3db04bf404d6d93, [[426, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     General routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0x2fb764dd69468073, [[49, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Parallel routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0xb7f979336c6df3b6, [[420, 421, 422, 421, 423], Int64[], [-1]]))
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--|--
|--
|--(1, (0x0d10d4dc111a3448, [[9, 429, 388, 430, 431, 8, 6], Int64[], [-1]]))
|--|--   This run was terminated on:   __HHMMSS__    __DATEa__             
|--|--
|--(1, (0x74a602af4c2972f4, [[432], [433, 434], [432], Int64[], [-1]]))
|--|--=------------------------------------------------------------------------------=
|--|--   JOB DONE.
|--|--=------------------------------------------------------------------------------=
|--|--