(1, (0x46cdc01c3d70bb6c, [Int64[], [1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1], [49, 50, 51, 52, 5, 0, 53], Int64[], [-1], [54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1], [72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], Int64[], [-1], [87, 88, 39, 89, 90, 13, 14, 91, 92], [93, 94, 95, 96, 97, 98, 99, 100], [101, 102, 103, 104, 13, 105, 0, 106, 0, 107], Int64[], [-1], Int64[], [108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [119], [120], Int64[], [-1], Int64[], [121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], [152, 61, 0], Int64[], [-1], Int64[], [153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1], [155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], Int64[], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1], [0, 199, 200, 193, 201, 202], Int64[], [-1], Int64[], [203, 204, 205], Int64[], [-1], [206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1], [14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [234, 235], Int64[], [-1], [236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [243, 235], Int64[], [-1], [236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [254, 255, 0, 256, 257, 258, 259], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 263, 264, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 265, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 273, 268, 269, 271, 0, 274], Int64[], [-1], [275, 276, 44, 277, 13, 278, 279], Int64[], [-1], [280, 138, 0, 281, 282, 182, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [362, 363, 364], Int64[], [-1], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 179, 61, 0, 137], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [382, 120, 383, 366, 384], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1], [368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1], [381, 120, 312, 120], Int64[], [-1], [393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], [382, 120, 383, 366, 384], Int64[], [-1], [179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], Int64[], [-1], Int64[], [377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1], [283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], Int64[], [-1], [366, 401, 39, 0, 310, 365, 230, 0, 366, 367], [402, 306, 312, 0, 137, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 151], Int64[], [-1], [313, 13, 362, 363, 364], Int64[], [-1], [405, 368, 61, 0, 137], [406, 407, 408], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1], [120, 375, 0, 151], [999999999], Int64[], [-1], [120, 376], [26, 0, 0, 0], [313, 407, 408], Int64[], [-1], Int64[], [409, 407, 310, 315, 7, 14, 410, 411], [324, 256, 220, 412, 19, 14, 407, 413, 404], [414, 415, 416, 44, 417, 7, 14, 418, 419], Int64[], [-1], [108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1], Int64[], [119], [120], Int64[], [-1], Int64[], [121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], Int64[], [-1], [153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1], [155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], Int64[], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1], [78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1], [0, 199, 200, 193, 201, 202], Int64[], [-1], Int64[], [203, 204, 205], Int64[], [-1], [206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1], [218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1], [224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1], [14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1], [224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [234, 235], Int64[], [-1], [236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [243, 235], Int64[], [-1], [236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1], [76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1], [254, 255, 0, 256, 257, 258, 259], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 263, 264, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [260, 265, 0, 262], Int64[], [-1], [260, 261, 0, 262], Int64[], [-1], [266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1], [266, 273, 268, 269, 271, 0, 274], Int64[], [-1], [275, 276, 44, 277, 13, 278, 279], Int64[], [-1], [280, 138, 0, 281, 282, 182, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [297, 298], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1], [313, 13, 314, 315], Int64[], [-1], [246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1], [14, 321, 306, 11, 0, 322], Int64[], [-1], [323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1], [324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1], [328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1], [140, 336, 337, 338, 39, 0, 144], Int64[], [-1], [283, 284, 285, 286, 0, 0], Int64[], [-1], [339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1], [352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1], Int64[], [353, 354, 355, 356, 230, 357], Int64[], [-1], Int64[], [283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1], [361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1], Int64[], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [426, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [49, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1], [420, 421, 422, 421, 423], Int64[], [-1], Int64[], [9, 429, 388, 430, 431, 8, 6], Int64[], [-1], [432], [433, 434], [432], Int64[], [-1], [-1]]))
|--
|--(1, (0x10bde1773b8be224, [[1, 2, 3, 4, 5, 6, 7, 8], Int64[], [-1]]))
|--|--     Program  __KWPWSCF__   __VERSIONa__  starts on  __DATEa__  at  __HHMMSS__  
|--|--
|--(1, (0x396fa251132c8ae5, [[9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 13, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31, 32, 33, 0, 0, 35, 0, 36], [37, 38], [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7], [38], Int64[], [-1]]))
|--|--     This program is part of the open-source Quantum ESPRESSO suite
|--|--     for quantum simulation of materials; please cite
|--|--         " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
               " __CHEM__ . Giannozzi et al., J. Phys.:Condens. Matter £ £ ( £ );
|--|--          URL  __URL__  
|--|--     in publications or presentations arising from this work. More details at
|--|--      __URL__ 
|--|--
|--(1, (0xb6c5fb88abd4695e, [[49, 50, 51, 52, 5, 0, 53], Int64[], [-1]]))
|--|--     Parallel version (MPI), running on    £ processors
|--|--
|--(1, (0xbb171a88b7adf870, [[54, 55, 56, 5, 0, 57], [58, 59, 60, 61, 0], [62, 63, 64, 65, 59, 66, 61, 0], [67, 19, 68], [69, 70, 44, 71, 70], Int64[], [-1]]))
|--|--     MPI processes distributed on     £ nodes
|--|--     K-points division:     npool     =       £
|--|--     R & G space division:  proc/nbgrp/npool/nimage =       £
|--|--     Waiting for input...
|--|--     Reading input from standard input
|--|--
|--(1, (0xd99cbb03c4a01aa9, [[72, 73, 13, 10, 2, 74], [75, 76, 13, 77, 78, 79, 80, 61, 0], [75, 76, 13, 81, 82, 61, 0], [75, 83, 84, 39, 85, 86, 61, 0], Int64[], [-1]]))
|--|--     Current dimensions of program  __KWPWSCF__  are:
|--|--     Max number of different atomic species (ntypx) = £
|--|--     Max number of k-points (npk) =  £
|--|--     Max angular momentum in pseudopotentials (lmaxx) =  £
|--|--
|--(1, (0xce8b5299abc445a8, [[87, 88, 39, 89, 90, 13, 14, 91, 92], [93, 94, 95, 96, 97, 98, 99, 100], [101, 102, 103, 104, 13, 105, 0, 106, 0, 107], Int64[], [-1]]))
|--|--     Subspace diagonalization in iterative solution of the eigenvalue problem:
|--|--     one sub-group per band group will be used
|--|--     scalapack distributed-memory algorithm (size of sub-group:  £ *   £ procs)
|--|--
|--
|--(1, (0x9a0040d6af8b7f6e, [[108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x5b178fa8d6676b27, [[119], [120], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0x1398d4b9160f3233, [[121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], [152, 61, 0], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--|--     nstep                     =           £
|--|--
|--
|--(1, (0xc82c8c9bcd5501b2, [[153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0xabb38e7bd85c78d4, [[155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x5c70a9713f6882cc, [[162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0xbec6d2f7ef675ccc, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval = £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £   £
                                                             £
|--|--
|--(1, (0x0c61c24b00846a58, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__   read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval =  £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £
|--|--
|--(1, (0xcf2481161e4f4816, [[78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0x52e4f35b471b600c, [[0, 199, 200, 193, 201, 202], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x66c5952956f4072c, [[203, 204, 205], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x6d7ba9ebbb321fee, [[206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x569e67d9b80a54aa, [[206, 61, 0, 207], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0xd34cb652cd16e053, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x3064b0d52fb1b93a, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0xa5fbb71fb44aa910, [[206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x898e2b1d64363d57, [[206, 61, 0, 216], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x52ef4267f539363a, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5c9096ebbbd91c1b, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0x75e448c226002ec2, [[218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1]]))
|--|--      __POINTGROUP__  
|--|--     there are £ classes
|--|--     the character table:
|--|--
|--(1, (0x464664cc2de766b5, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--        __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--|-- __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
       __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
       __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
       __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
       __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
       __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
       __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
       __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
       __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
       __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--|--
|--(1, (0x27a2708a3a250ab5, [[14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1]]))
|--|--     the symmetry operations in each class and the name of the first element:
|--|--
|--(1, (0xc6b83800ce5a82a4, [[224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--      __GRPSYMBOL__         £
|--|--          identity                                               
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          £ deg rotation - cart. axis  __MILLER__                
|--|--      __GRPSYMBOL__       £    £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__       £    £   £   £   £   £
|--|--           £ deg rotation - cart. axis  __MILLER__                  
|--|--      __GRPSYMBOL__      £    £   £   £   £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__        £
|--|--          inversion                                              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__           
|--|--      __GRPSYMBOL__     £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £
|--|--          inv.  £ deg rotation - cart. axis  __MILLER__             
|--|--      __GRPSYMBOL__     £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--
|--(1, (0x142bfa9a0b87ed32, [[234, 235], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0x898bdb6c51353b84, [[236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0x326f894bb4393fd0, [[243, 235], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xce9bfb119bcb0620, [[236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0xcf331d428078ab7e, [[76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xe7dbd461783cfcbe, [[208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x76a79a31a926db1b, [[254, 255, 0, 256, 257, 258, 259], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x45cbc35d1d691f25, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xe78fa0a8bb379d10, [[260, 263, 264, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x866352fcfde1a89e, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x4ffea65c9eeb0e31, [[260, 265, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0xeaa2aacd19c6d36a, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x84edd1637c8db9e9, [[266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x0da276932e972711, [[266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x26ceeb8e8a78bf53, [[266, 273, 268, 269, 271, 0, 274], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0x46e9fb49c8150138, [[275, 276, 44, 277, 13, 278, 279], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0xe560fbdf096c9583, [[280, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--
|--(1, (0xf57661133938e968, [[283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is        £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is        £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £    £   £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__  £
|--|--  £   £   £        £      £      £
         £  £   £          £    £      £
         £   £  £          £      £    £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x1fe10ed9c3005b02, [[362, 363, 364], Int64[], [-1]]))
|--|--     BFGS Geometry Optimization
|--|--
|--(1, (0xe2436b01e1308064, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x383e26fbc6190963, [[368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0xf8e0719d51407685, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0xa0a024f5a410b9d3, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xcb575b145bf57997, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x186caca86ba6a4e0, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0x854a7fd8412afaf4, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x8fdf770ababb8e28, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £   £    £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £   £   £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--   £   £   £         £      £      £
         £   £   £          £     £      £
         £   £   £          £      £     £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xe2436b01e1308064, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x4f0083b70e4ad566, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x923f7554e5610ec2, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xf8e0719d51407685, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0xa0a024f5a410b9d3, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xcb575b145bf57997, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x186caca86ba6a4e0, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0x854a7fd8412afaf4, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x8fdf770ababb8e28, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration # £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in  £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__   £
|--|--  £   £   £         £      £      £
         £  £   £          £     £      £
         £   £  £          £      £     £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xe2436b01e1308064, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x4f0083b70e4ad566, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x923f7554e5610ec2, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xb73329ccf8640d0e, [[382, 120, 383, 366, 384], Int64[], [-1]]))
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0xf8e0719d51407685, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0xa0a024f5a410b9d3, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xcb575b145bf57997, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x186caca86ba6a4e0, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0x854a7fd8412afaf4, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x8fdf770ababb8e28, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xeef55b7a7d2cc5f5, [[385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0x8f8678ae6a037ab7, [[302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £    £   £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0xe2436b01e1308064, [[76, 13, 310, 365, 61, 0], [76, 13, 366, 367, 61, 0], Int64[], [-1]]))
|--|--     number of scf cycles    =   £
|--|--     number of bfgs steps    =   £
|--|--
|--(1, (0x4f0083b70e4ad566, [[368, 380, 61, 0, 137], [368, 179, 61, 0, 137], Int64[], [-1]]))
|--|--     enthalpy old            =    £  __Ry__ 
|--|--     enthalpy new            =    £  __Ry__ 
|--|--
|--(1, (0x923f7554e5610ec2, [[381, 120, 312, 120], Int64[], [-1]]))
|--|--     CASE:  __SYMBOLtypeA__  <  __SYMBOLtypeA__ 
|--|--
|--(1, (0xac779cf9ccd765a5, [[393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], [382, 120, 383, 366, 384], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--     small  __SYMBOLtypeA__  resetting bfgs history
|--|--
|--(1, (0xf8e0719d51407685, [[179, 369, 370, 61, 0, 371], [179, 120, 61, 0, 137], Int64[], [-1]]))
|--|--     new trust radius        =       £ bohr
|--|--     new  __SYMBOLtypeA__             =       £  __Ry__ 
|--|--
|--(1, (0xa0a024f5a410b9d3, [[179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xcb575b145bf57997, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x186caca86ba6a4e0, [[120, 376], [26, 0, 0, 0], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--
|--
|--(1, (0x854a7fd8412afaf4, [[377, 78, 138, 139, 378, 19, 14, 276], Int64[], [-1]]))
|--|--     NEW-OLD atomic charge density approx. for the potential
|--|--
|--(1, (0x8fdf770ababb8e28, [[283, 284, 285, 286, 0, 0], [379, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     extrapolated charge   £ , renormalised to   £
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0xeef55b7a7d2cc5f5, [[385, 386, 5, 387, 388, 389, 390], [391, 193, 392, 141], Int64[], [-1]]))
|--|--     Threshold (ethr) on eigenvalues was too large:
|--|--     Diagonalizing with lowered threshold
|--|--
|--(1, (0x8f8678ae6a037ab7, [[302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =    £   £   £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
           atom    £ type  £   force =    £   £   £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
|--(1, (0xde68cdf44a784cd0, [[393, 44, 394, 395], [384, 396, 397, 7, 398, 399, 400], Int64[], [-1]]))
|--|--     Message from routine bfgs:
|--|--     history already reset at previous step: stopping
|--|--
|--(1, (0x48989ec9278cffd9, [[366, 401, 39, 0, 310, 365, 230, 0, 366, 367], [402, 306, 312, 0, 137, 281, 346, 312, 0, 403, 281, 404, 312, 0, 359, 151], Int64[], [-1]]))
|--|--     bfgs converged in   £ scf cycles and   £ bfgs steps
|--|--     (criteria: energy <  £  __Ry__ , force <  £ __UNITFORCEa__ , cell <  £ __UNITkbar__ )
|--|--
|--(1, (0x4d803229f77038d1, [[313, 13, 362, 363, 364], Int64[], [-1]]))
|--|--     End of BFGS Geometry Optimization
|--|--
|--(1, (0xca841c88ed6b213a, [[405, 368, 61, 0, 137], [406, 407, 408], [179, 127, 128, 61, 0, 372, 35, 0, 373, 151], [139, 61, 0, 374], Int64[], [-1]]))
|--|--     Final enthalpy =    £  __Ry__ 
|--|--Begin final coordinates
|--|--     new unit-cell volume =    £  __UNITVOLb__  (    £  __UNITVOLc__  )
|--|--     density =      £  __UNITDENSITY__ 
|--|--
|--(1, (0xcb575b145bf57997, [[120, 375, 0, 151], [999999999], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (alat=  £ )
|--|--   £   £   £
         £   £   £
         £   £   £
|--|--
|--(1, (0x2a8b8bb170e6d8b3, [[120, 376], [26, 0, 0, 0], [313, 407, 408], Int64[], [-1]]))
|--|-- __SYMBOLtypeA__  (crystal)
|--|-- __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__         £   £   £
       __CHEM__        £   £   £
|--|--End final coordinates
|--|--
|--
   
|--(1, (0x9a378cdcb9f92b19, [[409, 407, 310, 315, 7, 14, 410, 411], [324, 256, 220, 412, 19, 14, 407, 413, 404], [414, 415, 416, 44, 417, 7, 14, 418, 419], Int64[], [-1]]))
|--|--     A final scf calculation at the relaxed structure.
|--|--     The G-vectors are recalculated for the final unit cell
|--|--     Results may differ from those at the preceding step.
|--|--
|--(1, (0x9a0040d6af8b7f6e, [[108, 109], [110], [111, 112, 113, 114, 115, 112, 113, 116], [117, 0, 0, 0, 0, 0, 0], [75, 0, 0, 0, 0, 0, 0], [118, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--     Parallelization info
|--|--     --------------------
|--|--     sticks:   dense  smooth      __KWPW__      G-vecs:    dense   smooth      PW
|--|--     Min         £     £     £                 £     £    £
|--|--     Max         £     £     £                 £     £    £
|--|--     Sum        £    £    £                £    £    £
|--|--
|--
|--(1, (0x5b178fa8d6676b27, [[119], [120], Int64[], [-1]]))
|--|--     Title: 
|--|--      __SYMBOLtypeA__                                                               
|--|--
|--
|--(1, (0xb0ede9c3e5200c66, [[121, 122, 61, 0], [123, 124, 125, 61, 0, 126], [127, 128, 61, 0, 129], [76, 13, 130, 61, 0], [76, 13, 78, 131, 61, 0], [76, 13, 132, 61, 0], [76, 13, 133, 134, 0], [135, 136, 61, 0, 137], [138, 139, 136, 61, 0, 137], [140, 141, 61, 0], [142, 143, 61, 0], [76, 13, 144, 100, 61, 0, 145, 142], [146, 61, 147, 148, 149, 150, 35, 0, 0, 0, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     bravais-lattice index     =            £
|--|--     lattice parameter (alat)  =       £   __au__ 
|--|--     unit-cell volume          =     £  __UNITVOLa__ 
|--|--     number of atoms/cell      =            £
|--|--     number of atomic types    =            £
|--|--     number of electrons       =        £
|--|--     number of Kohn-Sham states=           £
|--|--     kinetic-energy cutoff     =     £   __Ry__ 
|--|--     charge density cutoff     =     £   __Ry__ 
|--|--     convergence threshold     =      £
|--|--     mixing beta               =       £
|--|--     number of iterations used =            £  plain     mixing
|--|--     Exchange-correlation      = SLA  PZ   NOGX NOGC ( £  £  £  £ £ £ )
|--|--
|--(1, (0xc82c8c9bcd5501b2, [[153, 0, 154, 0, 153, 0, 154, 0, 153, 0, 154, 0], Int64[], [-1]]))
|--|--     celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
           celldm( £ )=   £  celldm( £ )=   £  celldm( £ )=   £
|--|--
|--(1, (0xabb38e7bd85c78d4, [[155, 156, 157, 158, 39, 159, 13, 160], [161, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     crystal axes: (cart. coord. in units of alat)
|--|--               a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
                     a( £ ) = (   £   £   £ )  
|--|--
|--(1, (0x5c70a9713f6882cc, [[162, 156, 157, 158, 39, 159, 163, 151], [164, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     reciprocal axes: (cart. coord. in units  __UNITTWOPIALAT__ )
|--|--               b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
                     b( £ ) = (  £  £  £ )  
|--|--
|--
|--(1, (0xbec6d2f7ef675ccc, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__  read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval = £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £   £
                                                             £
|--|--
|--(1, (0x0c61c24b00846a58, [[165, 166, 0, 19, 26, 167, 44, 168], [169], [170], [171, 11, 172, 173, 174, 175, 176, 61, 0], [177, 178, 179, 78, 180, 41, 181, 182, 26, 183], [184, 185, 186, 13, 0, 187, 0, 143, 188, 189], [190, 0, 151, 61, 0], [191, 192, 193, 0, 194, 195, 61, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--     PseudoPot. # £ for  __CHEM__   read from file:
|--|--      __FULLPATH__ 
|--|--      __CHKSUM__ 
|--|--     Pseudo is Ultrasoft + core correction, Zval =  £
|--|--     Generated by new atomic code, or converted to  __CHEM__  format
|--|--     Using radial grid of  £ points,  £ beta functions with: 
|--|--                l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
                      l( £ ) =   £
|--|--     Q(r) pseudized with  £ coefficients,  rinner =    £   £   £
|--|--                                                       £   £
|--|--
|--(1, (0xcf2481161e4f4816, [[78, 79, 196, 197, 198], [26, 0, 0, 26, 35, 0, 151], Int64[], [-1]]))
|--|--     atomic species   valence    mass     pseudopotential
|--|--         __CHEM__             £   £      __CHEM__ ( £ )
               __CHEM__               £    £      __CHEM__  ( £ )
|--|--
|--(1, (0x52e4f35b471b600c, [[0, 199, 200, 193, 201, 202], Int64[], [-1]]))
|--|--     £ Sym. Ops., with inversion, found
|--|--
|--
|--(1, (0x66c5952956f4072c, [[203, 204, 205], Int64[], [-1]]))
|--|--                                    s                        frac. trans.
|--|--
|--(1, (0x6d7ba9ebbb321fee, [[206, 61, 0, 207], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x569e67d9b80a54aa, [[206, 61, 0, 207], Int64[], [-1]]))
|--|--|--      isym =  £     identity                                     
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(23, (0xd34cb652cd16e053, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x3064b0d52fb1b93a, [[206, 61, 0, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym =  £     £ deg rotation - cart. axis  __MILLER__         
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £          £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £  £ )
|--|--|--
|--|--
|--(1, (0xa5fbb71fb44aa910, [[206, 61, 0, 216], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x898e2b1d64363d57, [[206, 61, 0, 216], Int64[], [-1]]))
|--|--|--      isym = £     inversion                                    
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (    £          £          £      )
|--|--|--                  (     £         £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = ( £  £  £ )
|--|--|--                  (  £ £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(23, (0x52ef4267f539363a, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1], [208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], [210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1], Int64[], [-1]]))
|--|--(1, (0x5c9096ebbbd91c1b, [[206, 61, 0, 217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--|--      isym = £     inv. £ deg rotation - cart. axis  __MILLER__    
|--|--|--
|--|--(1, (0x235b97bd3cb56987, [[208, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cryst.   s( £ ) = (     £          £          £      )
|--|--|--                  (     £          £          £      )
                           (     £          £         £      )
|--|--|--
|--|--(1, (0x027d995218b71c82, [[210, 209, 0, 151, 61, 35, 0, 0, 0, 151], [35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--|-- cart.    s( £ ) = (  £  £  £ )
|--|--|--                  (  £  £  £ )
                           (  £  £ £ )
|--|--|--
|--|--
|--(1, (0x75e448c226002ec2, [[218], [219, 220, 0, 221], [14, 222, 223], Int64[], [-1]]))
|--|--      __POINTGROUP__  
|--|--     there are £ classes
|--|--     the character table:
|--|--
|--(1, (0x464664cc2de766b5, [[224, 224, 224, 224, 224, 224, 224, 224, 224, 224], [225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], Int64[], [-1]]))
|--|--        __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__       __GRPSYMBOL__     __GRPSYMBOL__    __GRPSYMBOL__     __GRPSYMBOL__  
|--|-- __REPSYMBOL__    £  £  £  £  £  £  £  £  £  £
       __REPSYMBOL__    £  £  £ £ £  £  £  £ £ £
       __REPSYMBOL__     £ £  £  £  £  £ £  £  £  £
       __REPSYMBOL__    £  £ £  £ £  £  £ £  £ £
       __REPSYMBOL__    £  £ £ £  £  £  £ £ £  £
       __REPSYMBOL__    £  £  £  £  £ £ £ £ £ £
       __REPSYMBOL__    £  £  £ £ £ £ £ £  £  £
       __REPSYMBOL__     £ £  £  £  £ £  £ £  £  £
       __REPSYMBOL__    £  £ £  £ £ £  £  £ £  £
       __REPSYMBOL__    £  £ £ £  £ £  £  £  £ £
|--|--
|--(1, (0x27a2708a3a250ab5, [[14, 226, 227, 39, 228, 229, 230, 14, 231, 13, 14, 232, 233], Int64[], [-1]]))
|--|--     the symmetry operations in each class and the name of the first element:
|--|--
|--(1, (0xc6b83800ce5a82a4, [[224, 0], [207], [224, 0, 0, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [0, 211, 212, 213, 210, 214, 215], [224, 0], [216], [224, 0, 0, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], [224, 0, 0, 0, 0, 0, 0], [217, 0, 211, 212, 213, 210, 214, 215], Int64[], [-1]]))
|--|--      __GRPSYMBOL__         £
|--|--          identity                                               
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          £ deg rotation - cart. axis  __MILLER__                
|--|--      __GRPSYMBOL__       £    £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__       £    £   £   £   £   £
|--|--           £ deg rotation - cart. axis  __MILLER__                  
|--|--      __GRPSYMBOL__      £    £   £   £   £    £
|--|--          £ deg rotation - cart. axis  __MILLER__                   
|--|--      __GRPSYMBOL__        £
|--|--          inversion                                              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__           
|--|--      __GRPSYMBOL__     £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--      __GRPSYMBOL__      £   £   £   £   £   £
|--|--          inv.  £ deg rotation - cart. axis  __MILLER__             
|--|--      __GRPSYMBOL__     £   £   £   £   £   £
|--|--          inv. £ deg rotation - cart. axis  __MILLER__              
|--|--
|--(1, (0x142bfa9a0b87ed32, [[234, 235], Int64[], [-1]]))
|--|--   Cartesian axes
|--|--
|--(1, (0x898bdb6c51353b84, [[236, 237, 238, 239, 240, 241], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (alat units)
|--|--         £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__    tau(   £ ) = (   £   £   £  )
               £            __CHEM__   tau(   £ ) = (   £   £   £  )
|--|--
|--(1, (0x326f894bb4393fd0, [[243, 235], Int64[], [-1]]))
|--|--   Crystallographic axes
|--|--
|--(1, (0xce9bfb119bcb0620, [[236, 237, 238, 239, 244, 245], [0, 26, 242, 0, 151, 61, 35, 0, 0, 0, 151], Int64[], [-1]]))
|--|--     site n.     atom                  positions (cryst. coord.)
|--|--         £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__    tau(   £ ) = (  £  £  £  )
               £            __CHEM__   tau(   £ ) = (  £  £  £  )
|--|--
|--(1, (0xcf331d428078ab7e, [[76, 13, 246, 247, 0, 248, 249, 250, 35, 137, 154, 0], [210, 158, 39, 159, 163], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--     number of k points=    £  Methfessel-Paxton smearing, width ( __Ry__ )=  £
|--|--                       cart. coord. in units  __UNITTWOPIALAT__ 
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0xe7dbd461783cfcbe, [[208, 158], [251, 0, 151, 61, 35, 0, 0, 0, 252, 253, 61, 0], Int64[], [-1]]))
|--|--                       cryst. coord.
|--|--        k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(    £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
              k(   £ ) = (   £   £   £ ), wk =   £
|--|--
|--(1, (0x76a79a31a926db1b, [[254, 255, 0, 256, 257, 258, 259], Int64[], [-1]]))
|--|--     Dense  grid:    £ G-vectors     FFT dimensions:  __THREETUPLES__ 
|--|--
|--(1, (0x45cbc35d1d691f25, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0xe78fa0a8bb379d10, [[260, 263, 264, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__  (w. buffer):       £ MB
|--|--
|--(13, (0x866352fcfde1a89e, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x4ffea65c9eeb0e31, [[260, 265, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ init/wfcrot:       £ MB
|--|--
|--(3, (0xeaa2aacd19c6d36a, [[260, 261, 0, 262], Int64[], [-1]]))
|--|--      __QEDynRAMfor__ :       £ MB
|--|--
|--(1, (0x84edd1637c8db9e9, [[266, 267, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated static dynamical RAM per process >      £ MB
|--|--
|--(1, (0x0da276932e972711, [[266, 272, 268, 269, 95, 270, 271, 0, 262], Int64[], [-1]]))
|--|--     Estimated max dynamical RAM per process >      £ MB
|--|--
|--(1, (0x26ceeb8e8a78bf53, [[266, 273, 268, 269, 271, 0, 274], Int64[], [-1]]))
|--|--     Estimated total dynamical RAM >       £ GB
|--|--
|--(1, (0x46e9fb49c8150138, [[275, 276, 44, 277, 13, 278, 279], Int64[], [-1]]))
|--|--     Initial potential from superposition of free atoms
|--|--
|--(1, (0xe560fbdf096c9583, [[280, 138, 0, 281, 282, 182, 0], Int64[], [-1]]))
|--|--     starting charge   £ , renormalised to   £
|--|--
|--(1, (0xf57661133938e968, [[283, 284, 285, 286, 0, 0], [287, 288, 220, 0, 289, 78, 288, 173, 0, 290, 288], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--     Starting wfcs are   £ randomized atomic wfcs +   £ random wfcs
|--|--
|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--     total cpu time spent up to now is       £ secs
|--|--
|--(1, (0x92a2d85b3f9f1dc9, [[297, 298], Int64[], [-1]]))
|--|--     Self-consistent Calculation
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations = £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xc3d6c340beab571b, [[273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--     total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <       £  __Ry__ 
|--|--
|--(1, (0x78dff274c0505dc8, [[299, 166, 0, 300, 0, 137, 301, 0], [302, 88, 193, 303], [304, 61, 0, 281, 305, 166, 13, 144, 61, 0], Int64[], [-1]]))
|--|--     iteration #  £     ecut=   £  __Ry__      beta= £
|--|--     Davidson diagonalization with overlap
|--|--     ethr =  £ ,  avg # of iterations =  £
|--|--
|--(1, (0x868688286915b9ab, [[283, 284, 285, 286, 0, 0], Int64[], [-1], [273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1], [-1]]))
|--|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--|--     negative rho (up, down):  £ £
|--|--|--
|--|--(1, (0x269a9c591afa690a, [[273, 291, 292, 293, 294, 182, 295, 11, 0, 296], Int64[], [-1]]))
|--|--|--     total cpu time spent up to now is       £ secs
|--|--|--
|--(1, (0xe8a2e7cfabcb81b0, [[313, 13, 314, 315], Int64[], [-1]]))
|--|--     End of self-consistent calculation
|--|--
|--(56, (0x7c1321d23bb94031, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1], [999999999], Int64[], [-1], [319, 320], [999999999], Int64[], [-1], [-1]]))
|--|--(1, (0x9083ed2b0011e945, [[246, 61, 0, 0, 0, 35, 0, 316, 317, 318], Int64[], [-1]]))
|--|--|--          k = £ £ £ (  £ PWs)   bands (ev):
|--|--|--
|--|--(1, (0x99a6d78585cd3021, [[999999999], Int64[], [-1]]))
|--|--|--   £ £ £ £ £ £ £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--|--(1, (0xaa76d9ba74ee2d15, [[319, 320], [999999999], Int64[], [-1]]))
|--|--|--     occupation numbers 
|--|--|--     £   £   £   £   £   £   £   £
              £   £   £   £   £   £   £   £
              £   £   £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £  £  £  £  £  £  £
             £  £
|--|--|--
|--(1, (0x8f6e07f8d3b85034, [[14, 321, 306, 11, 0, 322], Int64[], [-1]]))
|--|--     the Fermi energy is     £ ev
|--|--
|--(1, (0x7ee854ea6fb212dc, [[323, 273, 306, 61, 0, 137], [307, 308, 61, 0, 137], [309, 310, 311, 312, 0, 137], Int64[], [-1]]))
|--|--!    total energy              =    £  __Ry__ 
|--|--     Harris-Foulkes estimate   =    £  __Ry__ 
|--|--     estimated scf accuracy    <          £  __Ry__ 
|--|--
|--(1, (0x651c77880465ade7, [[324, 273, 306, 11, 14, 325, 13, 14, 326, 327], Int64[], [-1]]))
|--|--     The total energy is the sum of the following terms:
|--|--
|--(1, (0x08371a12ffcc0331, [[328, 329, 61, 0, 137], [330, 329, 61, 0, 137], [331, 329, 61, 0, 137], [332, 329, 61, 0, 137], [333, 334, 335, 61, 0, 137], Int64[], [-1]]))
|--|--     one-electron contribution =    £  __Ry__ 
|--|--     hartree contribution      =      £  __Ry__ 
|--|--     xc contribution           =     £  __Ry__ 
|--|--     ewald contribution        =    £  __Ry__ 
|--|--     smearing contrib. (-TS)   =      £  __Ry__ 
|--|--
|--(1, (0x5ac3e9739f959df6, [[140, 336, 337, 338, 39, 0, 144], Int64[], [-1]]))
|--|--     convergence has been achieved in   £ iterations
|--|--
|--(1, (0xb10875226a0ac636, [[283, 284, 285, 286, 0, 0], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--
|--(1, (0xff76e7fc5c1a5a1f, [[339, 340, 5, 279, 341, 342, 343, 344], Int64[], [-1]]))
|--|--     Forces acting on atoms (cartesian axes,  __UNITFORCEb__ ):
|--|--
|--(1, (0x712f920435288ec0, [[238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 347], [238, 0, 345, 0, 346, 61, 0, 0, 0], [324, 348, 349, 350, 182, 351], [238, 0, 345, 0, 346, 61, 0, 0, 0], Int64[], [-1]]))
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £   £
           atom    £ type  £   force =    £    £   £
           atom    £ type  £   force =    £   £    £
|--|--     The  __QEforceKW__ 
|--|--     atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
           atom    £ type  £   force =     £    £    £
|--|--     The  __KWSCF__  correction term to forces
|--|--     atom    £ type  £   force =     £    £   £
           atom    £ type  £   force =     £   £    £
           atom    £ type  £   force =    £    £    £
           atom    £ type  £   force =     £    £    £
|--|--
|--(1, (0xdf2817ccf756e4c7, [[352, 346, 61, 0, 352, 348, 349, 61, 0], Int64[], [-1]]))
|--|--     Total force =     £     Total  __KWSCF__  correction =     £
|--|--
|--
|--(1, (0x3701ee693b52187b, [[353, 354, 355, 356, 230, 357], Int64[], [-1]]))
|--|--     Computing stress (Cartesian axis) and pressure
|--|--
|--
|--(1, (0xa7aca47beb1a549e, [[283, 284, 285, 286, 0, 0], [273, 354, 35, 358, 151, 35, 359, 151, 360, 0], [999999999], Int64[], [-1]]))
|--|--     negative rho (up, down):  £ £
|--|--          total   stress  ( __UNITSTRESS__ )                   ( __UNITkbar__ )     __PRESSUREEQS__    £
|--|--   £   £   £          £      £      £
         £   £   £          £      £      £
         £   £   £          £      £      £
|--|--
|--(13, (0x401e08ee4c109928, [[361, 35, 359, 151, 0, 0, 0], [999999999], Int64[], [-1]]))
|--|--      __QEstressKW__  ( __UNITkbar__ )  £      £      £
|--|--                                £  £      £
                                      £      £  £
|--|--
|--
   
|--(1, (0x6096afd4e96e8038, [[420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0x49aedcd88830e9f4, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (       £ calls)
|--|--
|--(1, (0x6e156cec65f60072, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
|--|--
|--(2, (0xb8f34b66fb78b0e0, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (     £ calls)
|--|--
|--(1, (0xcac6e585b6982334, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--|--
|--(1, (0x2a811d662ea0f96a, [[425, 178, 420], [420, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Called by  __QEelROUTINES__ 
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (    £ calls)
            __QEelROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
|--|--
|--(1, (0xf2ca5bca6cd610d4, [[426, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     General routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (    £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (     £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (      £ calls)
            __QEgenROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0x291f57699ea7a6ad, [[49, 427], [428, 421, 422, 421, 423, 35, 0, 424], Int64[], [-1]]))
|--|--     Parallel routines
|--|--      __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
            __QEgenROUTINES__        __DURATION__   __KWCPU__        __DURATION__  WALL (  £ calls)
|--|--
|--(1, (0x04c2364ca627de62, [[420, 421, 422, 421, 423], Int64[], [-1]]))
|--|--      __QEelROUTINES__       __DURATION__   __KWCPU__       __DURATION__  WALL
|--|--
|--
|--(1, (0x65f0cf975404b2be, [[9, 429, 388, 430, 431, 8, 6], Int64[], [-1]]))
|--|--   This run was terminated on:   __HHMMSS__    __DATEa__             
|--|--
|--(1, (0x4e2ff69a604157c5, [[432], [433, 434], [432], Int64[], [-1]]))
|--|--=------------------------------------------------------------------------------=
|--|--   JOB DONE.
|--|--=------------------------------------------------------------------------------=
|--|--